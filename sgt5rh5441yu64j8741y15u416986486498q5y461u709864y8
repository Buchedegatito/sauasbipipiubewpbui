// ======================================================
// Modificar propiedades de las partículas de humo blanco
// ======================================================
{
    if (_x isKindOf "SmokeShellWhite") then {
        // Modificar tamaño de las partículas
        _x setParticleParams [
            ["\A3\data_f\ParticleEffects\Universal\smokeshell_white", 16, 12, 8], // Textura y opciones
            "", "Billboard", 1, 12, [0, 0, 0], 1, 1.2, "", "", [0.86, 8.5, 36], // Tamaño
            [0.7, 0.9, 0.7], 1, 1, 0.1, [0.2, 0.5, 0.1], 0.5, 1, 0.2, "", "", "", 0
        ];
    };
} forEach allMissionObjects "SmokeShellWhite";


// ======================================================

// Este script recupera el valor de intensidad desde profileNamespace y genera el efecto de blast wave.

params [["_particlePos", [0,0,0], [[]]]]; // posición donde ocurre el efecto

private _strength = profileNamespace getVariable ["WarFXPE_BlastWave", 1];

// Validación: si el valor es inválido o está en 0, no hacer nada
if (!(_strength isEqualType 0) || _strength isEqualTo 0) exitWith {false};

// Crear un objeto invisible como referencia para el efecto
private _particleSource = createSimpleObject ["Land_HelipadEmpty_F", AGLtoASL _particlePos, true];

// Generar el efecto de distorsión tipo “blastwave”
drop [
	["\A3\data_f\ParticleEffects\Universal\Refract", 1, 0, 1, 0],
	"", "Billboard", 1, 0.4 * _strength,
	[0,0,0],
	[0,0,0],
	0, 10, 7.9000001, 0.1, [2,2,24,60,105,150,210],
	[
		[0.1,0.1,0.1,1],
		[0.25,0.25,0.25,1],
		[0.5,0.5,0.5,1],
		[0,0,0,1],
		[0,0,0,0.5],
		[0,0,0,0.3]
	],
	[1],
	0.2, 0.2,
	"", "",
	_particleSource,
	1, false,
	-1, [],
	[0,1,0]
];

// Limpiar referencia
deleteVehicle _particleSource;

true;
// ======================================================

// Script de misión único que reproduce todos los efectos de explosión usando assets vanilla

params ["_pos"]; // Posición de la explosión (getPosASL o similar)

// --- CLOUDLETS (Partículas) ---
// fxp_VEESpark1 (x2 partículas)
private _spark1 = "#particlesource" createVehicleLocal _pos;
_spark1 setParticleParams [
    ["\\A3\\data_f\\ParticleEffects\\Universal\\Universal.p3d",16,2,32,0],"","Billboard",
    0.003,5.5,[0,0,0],[0,10,0],0,24,8,0,[0.1],[[1,1,1,-0.05]],[1000],0,0,"","",_spark1
];
_spark1 setDropInterval 0.01;

// fxp_VEESpark2 (x2 partículas)
private _spark2 = "#particlesource" createVehicleLocal _pos;
_spark2 setParticleParams [
    ["\\A3\\data_f\\ParticleEffects\\Universal\\Universal.p3d",16,7,48,0],"","Billboard",
    0.001,0.9,[0,0,0],[0,10,0],0,0.15,0.1,0.18,[0.2],[[1,1,0.8,1],[1,1,0.7,0]],[-2],1,0,"","",_spark2
];
_spark2 setDropInterval 0.001;

// fxp_VEEExpSmok1 (humo más oscuro x2 contraste)
private _smok1 = "#particlesource" createVehicleLocal _pos;
_smok1 setParticleParams [
    ["\\A3\\data_f\\ParticleEffects\\Universal\\Universal.p3d",16,7,32,0],"","Billboard",
    0.07,0.9,[0,0,0],[0,20,0],0,10.1,7.9,0.075,[5,50],[[0.1,0.1,0.1,0.6],[0.2,0.2,0.2,0.4]], [0],1,0,"","",_smok1
];
_smok1 setDropInterval 0.07;

// fxp_VEEExpSmok2 (humo más oscuro x2 contraste)
private _smok2 = "#particlesource" createVehicleLocal _pos;
_smok2 setParticleParams [
    ["\\A3\\data_f\\ParticleEffects\\Universal\\Universal.p3d",16,7,32,0],"","Billboard",
    0.08,0.9,[0,0,0],[0,20,0],0,50,7.9,0.075,[15,0],[[1,1,0.6,0.006],[1,1,0.6,0]], [0],1,0,"","",_smok2
];
_smok2 setDropInterval 0.08;

// fxp_VEEExplParSml (x2 partículas)
private _explPar = "#particlesource" createVehicleLocal _pos;
_explPar setParticleParams [
    ["\\A3\\data_f\\ParticleEffects\\Universal\\Universal.p3d",16,2,80,0],"","Billboard",
    0.015,0.5,[0,0,0],[0,4,0],0,0.056,0.04,0.1,[3,4.5],[[1,1,1,-4],[1,1,1,-1],[1,1,1,0]],[0.33],1,0,"","",_explPar
];
_explPar setDropInterval 0.015;

// fxp_VEESmok1 (humo más oscuro x2 contraste)
private _smokL1 = "#particlesource" createVehicleLocal _pos;
_smokL1 setParticleParams [
    ["\\A3\\data_f\\ParticleEffects\\Universal\\Universal.p3d",16,7,48,0],"","Billboard",
    0.03,12,[0,0,0],[0,2,0],0,0.05,0.04,0.025,[3,7,10],[[0.1,0.1,0.1,0.6],[0.2,0.2,0.2,0.4],[0.3,0.3,0.3,0.3],[0.4,0.4,0.4,0.2],[0.6,0.6,0.6,0]],[0.5],1,0,"","",_smokL1
];
_smokL1 setDropInterval 0.03;

// fxp_VEESmok2 (humo más oscuro x2 contraste)
private _smokL2 = "#particlesource" createVehicleLocal _pos;
_smokL2 setParticleParams [
    ["\\A3\\data_f\\ParticleEffects\\Universal\\Universal.p3d",16,7,48,0],"","Billboard",
    0.008,160,[0,0,0],[0,10,0],0,10.1,7.9,1,[6,15],[[0.1,0.1,0.1,0.6],[0.2,0.2,0.2,0.4],[0.3,0.3,0.3,0.3],[0.4,0.4,0.4,0.2],[0.6,0.6,0.6,0]],[0.009],1,0,"","",_smokL2
];
_smokL2 setDropInterval 0.008;

// fxp_VEESmok3 (humo más oscuro x2 contraste)
private _smokL3 = "#particlesource" createVehicleLocal _pos;
_smokL3 setParticleParams [
    ["\\A3\\data_f\\ParticleEffects\\Universal\\Universal.p3d",16,7,48,0],"","Billboard",
    0.008,160,[0,0,0],[0,5,0],0,10.1,7.9,1,[6,15],[[0.1,0.1,0.1,0.6],[0.2,0.2,0.2,0.4],[0.3,0.3,0.3,0.3],[0.4,0.4,0.4,0.2],[0.6,0.6,0.6,0]],[0.009],1,0,"","",_smokL3
];
_smokL3 setDropInterval 0.008;

// fxp_VEEBall1 (x2 partículas)
private _ball1 = "#particlesource" createVehicleLocal _pos;
_ball1 setParticleParams [
    ["\\A3\\data_f\\ParticleEffects\\Universal\\Universal.p3d",16,2,32,0],"","Billboard",
    0.01,3.5,[0,0,0],[0,10,0],10.1,10.1,7.9,1,[0,2,4,4,4,4,4],[[1,1,1,-1],[1,1,1,0]],[0.009],1,0,"","",_ball1
];
_ball1 setDropInterval 0.01;

// fxp_VEEBall2 (x2 partículas)
private _ball2 = "#particlesource" createVehicleLocal _pos;
_ball2 setParticleParams [
    ["\\A3\\data_f\\ParticleEffects\\Universal\\Universal.p3d",16,2,32,0],"","Billboard",
    0.025,3.5,[0,0,0],[0,10,0],10.1,10.1,7.9,1,[1.3,1.3,1.3],[[1,1,1,1],[1,1,1,0]],[0.05],1,0,"","",_ball2
];
_ball2 setDropInterval 0.025;

// fxp_VEEBall3 (x2 partículas)
private _ball3 = "#particlesource" createVehicleLocal _pos;
_ball3 setParticleParams [
    ["\\A3\\data_f\\ParticleEffects\\Universal\\Universal.p3d",16,2,32,0],"","Billboard",
    0.005,3.5,[0,0,0],[0,15,0],10.1,10.1,7.9,1,[1,4,0],[[1,1,0.2,-2],[1,1,1,0]],[1.5],1,0,"","",_ball3
];
_ball3 setDropInterval 0.005;

// --- LIGHTS ---
// fxp_VEELightExp1
private _light1 = "#lightpoint" createVehicleLocal _pos;
_light1 setLightBrightness 0.7;
_light1 setLightAmbient [0.3,0.3,0.3];
_light1 setLightColor [0.7,0.7,0.7];
_light1 setLightFlareSize 70;
_light1 setLightFlareMaxDistance 3000;
_light1 setLightUseFlare false;

// fxp_VEELightExp2
private _light2 = "#lightpoint" createVehicleLocal _pos;
_light2 setLightBrightness 0.45;
_light2 setLightAmbient [0.1,0.04,0.015];
_light2 setLightColor [1,0.45,0.15];
_light2 setLightFlareSize 30;
_light2 setLightFlareMaxDistance 3000;
_light2 setLightUseFlare false;

// --- EJECUCCIÓN Y LIMPIEZA ---

// Lista de entidades a eliminar\```


// ======================================================

// vapour_effect.sqf
// Script de misión único para simulación de vapour en aeronaves usando assets vanilla
// Basado en "Aircraft vapour simulation by Maddmatt" adaptado a misión sin mods externos

params ["_v"]; // Recibe el objeto (vehículo o unidad) donde generar vapour

// IMPORTANTE: Este script debe llamarse con un objeto, por ejemplo:
// [_plane] execVM "vapour_effect.sqf";

// Pequeña pausa inicial
sleep (0.1 + random 0.2);

// Asegurar que _v es un objeto válido
if (typeName _v != "OBJECT" || {isNull _v}) exitWith {};


private _trail1 = objNull;
private _trail2 = objNull;
private _fusv1 = objNull;
private _fusv2 = objNull;

// Crear partículas en puntas de ala si existen puntos de memoria
if (([0,0,0] distance (_v selectionPosition "cerveny pozicni")) != 0) then {
    _trail1 = "#particlesource" createVehicleLocal (_v modelToWorld [0,0,0]);
    _trail1 attachTo [_v, [0,0,0], "cerveny pozicni"];
    _trail1 setParticleRandom [0.2, [0.05,0.05,0.05], [0,0,0], 0, 0, [0,0,0,0], 0, 0];

    _trail2 = "#particlesource" createVehicleLocal (_v modelToWorld [0,0,0]);
    _trail2 attachTo [_v, [0,0,0], "zeleny pozicni"];
    _trail2 setParticleRandom [0.2, [0.05,0.05,0.05], [0,0,0], 0, 0, [0,0,0,0], 0, 0];
};
if (isNull _trail1) exitWith {};

// Recoger parámetros de segmento y validar puntos de memoria
private _posLS = _v selectionPosition "body_vapour_L_S";
private _posLE = _v selectionPosition "body_vapour_L_E";
private _posRS = _v selectionPosition "body_vapour_R_S";
private _posRE = _v selectionPosition "body_vapour_R_E";

if (_posLS isEqualTo [0,0,0] || _posLE isEqualTo [0,0,0] || _posRS isEqualTo [0,0,0] || _posRE isEqualTo [0,0,0]) exitWith {};

// Preparar emisores del fuselaje
_fusv1 = "#particlesource" createVehicleLocal (_v modelToWorld _posLS);
_fusv2 = "#particlesource" createVehicleLocal (_v modelToWorld _posRS);

_fusv1 attachTo [_v, [0,0,0], "body_vapour_L_S"];
_fusv2 attachTo [_v, [0,0,0], "body_vapour_R_S"];

private _lgap = _posLS distance _posLE;
private _rgap = _posRS distance _posRE;

if (_lgap <= 0 || _rgap <= 0) exitWith {};

private _lemmiters = [_fusv1];
private _remmiters = [_fusv2];

// Crear emisores intermedios en fuselaje izquierdo
private _i = 0;
private _xd = (_posLE select 0) - (_posLS select 0);
private _yd = (_posLE select 1) - (_posLS select 1);
private _zd = (_posLE select 2) - (_posLS select 2);
while {_i < _lgap} do {
    private _pe = "#particlesource" createVehicleLocal (_v modelToWorld [0,0,0]);
    _pe setParticleRandom [0.2, [0.05,0.05,0.05], [0,0,0], 0, 0.2, [0,0,0,0], 0, 0];
    _pe attachTo [_v, [_posLS select 0 + _i * (_xd/_lgap), _posLS select 1 + _i * (_yd/_lgap), _posLS select 2 + _i * (_zd/_lgap)]];
    _lemmiters pushBack _pe;
    _i = _i + 1;
};

// Derechos
_i = 0;
_xd = (_posRE select 0) - (_posRS select 0);
_yd = (_posRE select 1) - (_posRS select 1);
_zd = (_posRE select 2) - (_posRS select 2);
while {_i < _rgap} do {
    private _pe = "#particlesource" createVehicleLocal (_v modelToWorld [0,0,0]);
    _pe setParticleRandom [0.2, [0.05,0.05,0.05], [0,0,0], 0, 0.2, [0,0,0,0], 0, 0];
    _pe attachTo [_v, [_posRS select 0 + _i * (_xd/_rgap), _posRS select 1 + _i * (_yd/_rgap), _posRS select 2 + _i * (_zd/_rgap)]];
    _remmiters pushBack _pe;
    _i = _i + 1;
};

// Bucle principal para actualizar dropinterval y intensidad según velocidad y ángulos
[ _v, _trail1, _trail2, _lemmiters, _remmiters ] spawn {
    params ["_v","_t1","_t2","_lems","_rems"];
    while {alive _v} do {
        private _vel = velocity _v;
        private _speed = sqrt ((_vel select 0)^2 + (_vel select 1)^2 + (_vel select 2)^2);
        if (_speed > 50) then {
            sleep 0.05;
            private _pitchvel = abs ((velocity _v select 2) atan2 (_vel select 0 + _vel select 1));
            private _vdir = vectorDir _v;
            private _pitch = abs ((_vdir select 2) atan2 ((_vdir select 0) + (_vdir select 1)));
            private _dirvel = abs ((velocity _v select 0) atan2 (velocity _v select 1));
            private _dir = getDir _v;
            if (_dir > 180) then {_dir = 360 - _dir};
            private _aoa = abs(_pitch - _pitchvel) + abs(_dir - _dirvel);
            private _interval = 1 / (_speed * 2.5);
            private _intensity = (_aoa * (_speed / 4000)) min 3;
            if (_intensity > 0.3) then {
                { _x setDropInterval _interval; _x setParticleParams [["\A3\data_f\ParticleEffects\Universal\Universal.p3d",16,13,3,0],"","Billboard",1,0.6*_intensity,[0,0,0],velocity _v,0,1,0.79,0.18,[0.5,1+_intensity/1.7],[[1,1,1,0.04*_intensity],[1,1,1,0.14*_intensity],[1,1,1,0.05*_intensity],[1,1,1,0]],[1000],100,0.01,"","",_x]; } forEach _t1;
                { _x setDropInterval _interval; _x setParticleParams [["\A3\data_f\ParticleEffects\Universal\Universal.p3d",16,13,3,0],"","Billboard",1,0.6*_intensity,[0,0,0],velocity _v,0,1,0.79,0.18,[0.4,1+_intensity/1.7],[[1,1,1,0.04*_intensity],[1,1,1,0.14*_intensity],[1,1,1,0.05*_intensity],[1,1,1,0]],[1000],100,0.01,"","",_x]; } forEach _t2;
            } else {
                { _x setDropInterval 0 } forEach (_t1 + _t2 + _lems + _rems);
            };
        } else {
            sleep 1;
        };
    };
};

// Limpieza final al apagar motor
_v addEventHandler ["Engine", {
    params ["_veh", "_engineOn"];
    if (!_engineOn) then {
        {
            if !(isNull _x) then { deleteVehicle _x };
        } forEach (_veh getVariable ["vapourSources", []]);
    };
}];

_v setVariable ["vapourSources", [_trail1, _trail2, _fusv1, _fusv2] + _lemmiters + _remmiters];

true;

// ======================================================

/*
    Author: ThomasAngel
    Steam: https://steamcommunity.com/id/Thomasangel/
    Github: https://github.com/rekterakathom

    Description:
    Spawns a large refract wave.

    Parameters:
        _this: ARRAY - Position format AGL.

    Usage: "WarFXPE\scripts\blastrefractEffectLarge.sqf";

    Returns: True if executed successfully.
*/

params ["_particlePos"]; // Asegura que se recibe un parámetro válido

private _strength = profileNamespace getVariable ["warFXPE_blastWave", 1];
if (_strength isEqualTo 0) exitWith { false };

// Convertir posición AGL a ASL
private _particleASL = AGLtoASL _particlePos;

// Crear objeto auxiliar invisible
private _particleSource = createSimpleObject ["Land_HelipadEmpty_F", _particleASL, true];

// Crear efecto de onda refractiva
drop [
    ["\A3\data_f\ParticleEffects\Universal\Refract", 1, 0, 1, 0], // animationName, type, timerPeriod, lifeTime
    "", "Billboard", 1, 0.4 * _strength,
    [0, 0, 0],      // Posición relativa
    [0, 0, 0],      // Velocidad
    0,              // Rotación
    10,             // Peso
    7.9,            // Volumen
    0.1,            // Rozamiento
    [2, 2, 24, 60, 105, 150, 210], // Tamaños (animación)
    [
        [0.1, 0.1, 0.1, 1],
        [0.25, 0.25, 0.25, 1],
        [0.5, 0.5, 0.5, 1],
        [0, 0, 0, 1],
        [0, 0, 0, 0.5],
        [0, 0, 0, 0.3]
    ],
    [1],    // Fase de animación
    0.2,    // randomDirectionPeriod
    0.2,    // randomDirectionIntensity
    "", "", // onTimer, beforeDestroy
    _particleSource,
    1, false,   // angle, bounce
    -1, [],     // bounceOnSurface, emissiveColor
    [0, 1, 0]   // vectorDir (debe ser no nulo)
];

// Eliminar objeto auxiliar
deleteVehicle _particleSource;

true

// ======================================================

/*
    Script: blastrefractEffect.sqf
    Author: ThomasAngel (modificado por OpenAI para integración multipropósito)
    Descripción:
        Genera una onda refractiva tipo "blast wave" con tamaño configurable.

    Parámetros:
        _this select 0: POSICIÓN en formato AGL (Array)
        _this select 1: TAMAÑO del efecto (String): "tiny", "small", "medium" o "huge"

    Uso:
        [_pos, "huge"] execVM "WarFXPE\scripts\blastrefractEffect.sqf";

    Requiere:
        Variable global "warFXPE_blastWave" en profileNamespace (default: 1)

    Retorna: true si se ejecuta correctamente.
*/

params ["_particlePos", "_size"];

private _strength = profileNamespace getVariable ["warFXPE_blastWave", 1];
if (_strength isEqualTo 0) exitWith {false};

private _particleSource = createSimpleObject ["Land_HelipadEmpty_F", AGLtoASL _particlePos, true];

private _dropParams = switch (_size) do {
    case "huge": {
        [
            0.5 * _strength,
            [3,6,12,24,48,64,96]
        ]
    };
    case "medium": {
        [
            0.3 * _strength,
            [1,1,6,12,24,32,48]
        ]
    };
    case "small": {
        [
            0.125 * _strength,
            [1,2,5,8,12,17]
        ]
    };
    case "tiny": {
        [
            0.1 * _strength,
            [0.5,1,2.5,4,6,8.5]
        ]
    };
    default {
        [0.2 * _strength, [1,1,6,12,24,32,48]] // Fallback
    };
};

private _lifeTime = _dropParams select 0;
private _sizeArray = _dropParams select 1;

// Crear efecto
_drop = drop [
    ["\A3\data_f\ParticleEffects\Universal\Refract", 1, 0, 1, 0],
    "", "Billboard", 1, _lifeTime,
    [0,0,0],
    [0,0,0],
    0, 10, 7.9, 0.1,
    _sizeArray,
    [
        [0.1,0.1,0.1,1],
        [0.25,0.25,0.25,1],
        [0.5,0.5,0.5,1],
        [0,0,0,1],
        [0,0,0,0.5],
        [0,0,0,0.3]
    ],
    [1],
    0.2, 0.2,
    "", "",
    _particleSource,
    1, false,
    -1, [],
    [0,1,0]
];

deleteVehicle _particleSource;
true;


// ======================================================
/*
    Script: fn_bombRefract.sqf
    Author: ThomasAngel
    Modificado para integración directa por OpenAI

    Descripción:
        Genera un anillo de partículas que convergen hacia el centro.
        Ideal para simular impactos o efectos de presión en explosiones.

    Parámetros:
        _this: ARRAY - Posición (formato AGL) que será el centro de la explosión.

    Uso:
        [_pos] execVM "WarFXPE\scripts\fn_bombRefract.sqf";

    Retorna: true si se ejecuta correctamente.
*/

// === Configuración del efecto ===
#define DIST_FROM_CENTER 12.0      // Distancia inicial de cada partícula respecto al centro
#define DIST_VARIATION 5           // Variación aleatoria ±
#define VELOCITY_REDUCTION 1.5     // Menor valor = mayor velocidad hacia el centro
#define STARTING_HEIGHT 0.05       // Altura inicial de cada partícula
#define VELOCITY_DOWN 0            // Velocidad hacia abajo (0 = plano)
#define DIR_STEP_SIZE 8            // Menor valor = más partículas

private _expCenter = _this;

// Crear objeto invisible que sirve como fuente de referencia
private _particleSource = "Land_HelipadEmpty_F" createVehicleLocal [0, 0, 0];
_particleSource enableSimulation false;
_particleSource setPosASL (AGLtoASL _expCenter);

// Calcular las direcciones radiales desde donde se emitirán las partículas
private _directions = [];
for "_i" from 0 to 360 step DIR_STEP_SIZE do {
    _directions pushBack [sin _i, cos _i, 0];
};

// Generar partículas
{
    private _randomX = random [-DIST_VARIATION, 0, DIST_VARIATION];
    private _randomY = random [-DIST_VARIATION, 0, DIST_VARIATION];
    private _currentPosition = [
        (DIST_FROM_CENTER * (_x # 0)) + _randomX,
        (DIST_FROM_CENTER * (_x # 1)) + _randomY,
        STARTING_HEIGHT
    ];
    private _currentDirection = [
        (_x # 0)/-VELOCITY_REDUCTION,
        (_x # 1)/-VELOCITY_REDUCTION,
        -VELOCITY_DOWN
    ];

    drop [
        ["\A3\data_f\ParticleEffects\Universal\smoke_2", 1, 0, 1, 1],
        "", "Billboard", 1, 8,
        _currentPosition,
        _currentDirection,
        0, 0.05, 0.04, 0.01,
        [1, 5],
        [
            [0.2722, 0.226, 0.18, 0.35],
            [0.5304, 0.441, 0.352, 0]
        ],
        [1],
        1, 0.2,
        "", "",
        _particleSource,
        0, false,
        -1, [],
        [0,1,0]
    ];
} forEach _directions;

deleteVehicle _particleSource;
true;

// ======================================================
/*
    Script: heatHaze.sqf
    Author: ThomasAngel
    Modificado para integración por OpenAI

    Descripción:
        Genera un efecto de distorsión visual por calor (heat haze).
        Ideal para explosiones o motores activos.

    Parámetros:
        _this: ARRAY - Posición (formato AGL) donde aparecerá el efecto.

    Uso:
        [_pos] execVM "WarFXPE\scripts\heatHaze.sqf";

    Requiere:
        profileNamespace variable: WarFXPE_HeatHaze (default: true)

    Retorna: true si se ejecuta correctamente.
*/

if !(profileNamespace getVariable ["WarFXPE_HeatHaze", true]) exitWith {false};
private _weatherEffect = profileNamespace getVariable ["warFXPE_weatherEffects", true];

private _particlePos = _this;
if (player distance _particlePos > 100) exitWith {false};

// Fuente del efecto
private _particleSource = createSimpleObject ["Land_HelipadEmpty_F", AGLtoASL _particlePos, true];

// Variación de tamaño aleatoria
private _sizeVar = random [0.5, 1, 1.5];

// Temperatura ambiente afecta la intensidad si está activado
private _airTemp = 0.20;
if (_weatherEffect) then {
    _airTemp = (ambientTemperature # 0) / 100;
};

// Clampeo de temperatura para que el efecto no desaparezca o se vuelva irreal
_airTemp = (_airTemp max 0.15) min 0.45;

// Crear efecto de distorsión
drop [
    ["\A3\data_f\ParticleEffects\Universal\Refract", 1, 0, 1, 0],
    "", "Billboard", 0, 0.85,
    [0,0,0],
    [0,0,0],
    1, 1.265, 1, 0.07,
    [_sizeVar],
    [
        [0.06, 0.06, 0.06, _airTemp],
        [0.3, 0.3, 0.3, _airTemp - 0.3],
        [0.3, 0.3, 0.3, _airTemp - 0.6],
        [0.3, 0.3, 0.3, _airTemp - 0.9],
        [0.3, 0.3, 0.3, _airTemp - 0.15]
    ],
    [1],
    0.1, 0.02,
    "", "",
    _particleSource,
    1, false,
    -1, [],
    [0,1,0]
];

deleteVehicle _particleSource;
true;

// ======================================================
/*
    Script: blastrefractEffect.sqf
    Author: ThomasAngel (modificado por OpenAI para integración multipropósito)
    Descripción:
        Genera una onda refractiva tipo "blast wave" con tamaño configurable.

    Parámetros:
        _this select 0: POSICIÓN en formato AGL (Array)
        _this select 1: TAMAÑO del efecto (String): "tiny", "small", "medium" o "large"

    Uso:
        [_pos, "tiny"] execVM "WarFXPE\scripts\blastrefractEffect.sqf";

    Requiere:
        Variable global "warFXPE_blastWave" en profileNamespace (default: 1)

    Retorna: true si se ejecuta correctamente.
*/

params ["_particlePos", "_size"];

private _strength = profileNamespace getVariable ["warFXPE_blastWave", 1];
if (_strength isEqualTo 0) exitWith {false};

private _particleSource = createSimpleObject ["Land_HelipadEmpty_F", AGLtoASL _particlePos, true];

private _dropParams = switch (_size) do {
    case "medium": {
        [
            0.3 * _strength,
            [1,1,6,12,24,32,48]
        ]
    };
    case "small": {
        [
            0.125 * _strength,
            [1,2,5,8,12,17]
        ]
    };
    case "tiny": {
        [
            0.1 * _strength,
            [0.5,1,2.5,4,6,8.5]
        ]
    };
    case "large": {
        [
            0.4 * _strength,
            [2,2,24,60,105,150,210]
        ]
    };
    default {
        [0.2 * _strength, [1,1,6,12,24,32,48]] // Fallback
    };
};

private _lifeTime = _dropParams select 0;
private _sizeArray = _dropParams select 1;

// Crear efecto
_drop = drop [
    ["\A3\data_f\ParticleEffects\Universal\Refract", 1, 0, 1, 0],
    "", "Billboard", 1, _lifeTime,
    [0,0,0],
    [0,0,0],
    0, 10, 7.9, 0.1,
    _sizeArray,
    [
        [0.1,0.1,0.1,1],
        [0.25,0.25,0.25,1],
        [0.5,0.5,0.5,1],
        [0,0,0,1],
        [0,0,0,0.5],
        [0,0,0,0.3]
    ],
    [1],
    0.2, 0.2,
    "", "",
    _particleSource,
    1, false,
    -1, [],
    [0,1,0]
];

deleteVehicle _particleSource;
true;
// ======================================================
/*
    Script: blastrefractEffect.sqf
    Autor: ThomasAngel (modificado por OpenAI para integración multipropósito)
    Descripción:
        Genera una onda refractiva tipo "blast wave" con tamaño configurable, junto con múltiples efectos de partículas vanilla simulando materiales como piedra, vidrio, carne, madera y destellos luminosos.

    Parámetros:
        _this select 0: POSICIÓN en formato AGL (Array)
        _this select 1: TAMAÑO del efecto (String): "tiny", "small", "medium" o "large"

    Uso:
        [_pos, "tiny"] execVM "WarFXPE\scripts\blastrefractEffect.sqf";

    Requiere:
        Variable global "warFXPE_blastWave" en profileNamespace (default: 1)

    Retorna: true si se ejecuta correctamente.
*/

params ["_particlePos", "_size"];

private _strength = profileNamespace getVariable ["warFXPE_blastWave", 1];
if (_strength isEqualTo 0) exitWith {false};

private _particleSource = createSimpleObject ["Land_HelipadEmpty_F", AGLtoASL _particlePos, true];

private _dropParams = switch (_size) do {
    case "medium": {
        [0.3 * _strength, [1,1,6,12,24,32,48]]
    };
    case "small": {
        [0.125 * _strength, [1,2,5,8,12,17]]
    };
    case "tiny": {
        [0.1 * _strength, [0.5,1,2.5,4,6,8.5]]
    };
    case "large": {
        [0.4 * _strength, [2,2,24,60,105,150,210]]
    };
    default {
        [0.2 * _strength, [1,1,6,12,24,32,48]]
    };
};

private _lifeTime = _dropParams select 0;
private _sizeArray = _dropParams select 1;

// Onda de refracción
_drop = drop [
    ["\A3\data_f\ParticleEffects\Universal\Refract", 1, 0, 1, 0],
    "", "Billboard", 1, _lifeTime,
    [0,0,0], [0,0,0],
    0, 10, 7.9, 0.1,
    _sizeArray,
    [
        [0.1,0.1,0.1,1],[0.25,0.25,0.25,1],
        [0.5,0.5,0.5,1],[0,0,0,1],
        [0,0,0,0.5],[0,0,0,0.3]
    ],
    [1], 0.2, 0.2,
    "", "", _particleSource, 1, false, -1, [], [0,1,0]
];

// Efectos vanilla complementarios:

// Fragmentos de piedra
_drop = drop [["\A3\data_f\ParticleEffects\Pstone\Data\pstone_nohq.paa", 1, 0, 1], "", "Billboard", 1.5, 1.2, [0,0,0], [0,0,0], 0, 0.5, 0.5, 0.1, [0.2, 0.15, 0.1], [[0.7,0.7,0.7,1],[0.4,0.4,0.4,0.5],[0,0,0,0]], [1], 0.2, 0.2, "", "", _particleSource, 1, false, -1, [], [0,1,0]];

// Chispa brillante (T800 simulado)
_drop = drop [["#(argb,8,8,3)color(1,0.2,0.2,1)", 1, 0, 1], "", "Billboard", 0.6, 0.8, [0,0,0], [0,0,0], 0, 1, 1, 0.2, [0.1, 0.05], [[1,0.2,0.2,1],[1,0.1,0.1,0.5],[0,0,0,0]], [1], 0.2, 0.2, "", "", _particleSource, 1, false, -1, [], [0,1,0]];

// Carbón incandescente
_drop = drop [["#(argb,8,8,3)color(1,0.4,0,1)", 1, 0, 1], "", "Billboard", 1.5, 2.5, [0,0,0], [0,0.1,0], 0, 0.5, 0.5, 0.1, [0.5, 0.4, 0.3], [[1,0.4,0,1],[0.5,0.2,0,0.6],[0,0,0,0]], [1], 0.3, 0.3, "", "", _particleSource, 1, false, -1, [], [0,1,0]];

// Glow superficial (refractado)
_drop = drop [["#(argb,8,8,3)color(1,1,1,0.8)", 1, 0, 1], "", "Billboard", 2, 1.2, [0,0,0], [0,0,0], 0, 0.1, 0.1, 0.05, [0.4, 0.3, 0.1], [[1,1,1,0.8],[1,1,1,0.4],[1,1,1,0]], [1], 0.1, 0.1, "", "", _particleSource, 1, false, -1, [], [0,1,0]];

// Fragmentos de carne
_drop = drop [["#(argb,8,8,3)color(0.5,0.1,0.1,1)", 1, 0, 1], "", "Billboard", 1, 1.5, [0,0,0], [0,0.2,0], 0, 0.3, 0.4, 0.05, [0.2, 0.15, 0.05], [[0.5,0.1,0.1,1],[0.2,0.05,0.05,0.5],[0,0,0,0]], [1], 0.2, 0.2, "", "", _particleSource, 1, false, -1, [], [0,1,0]];

// Fragmentos de vidrio
_drop = drop [["#(argb,8,8,3)color(0.5,0.5,1,0.8)", 1, 0, 1], "", "Billboard", 1, 1.2, [0,0,0], [0,0.1,0], 0, 0.4, 0.4, 0.1, [0.2, 0.1], [[0.5,0.5,1,0.8],[0.2,0.2,0.5,0.4],[0,0,0,0]], [1], 0.1, 0.1, "", "", _particleSource, 1, false, -1, [], [0,1,0]];

// Luz base explosiva
_drop = drop [["#(argb,8,8,3)color(1,0.5,0,1)", 1, 0, 1], "", "Billboard", 0.5, 0.8, [0,0,0], [0,0,0], 0, 0.6, 0.5, 0.1, [0.2, 0.05], [[1,0.5,0,1],[1,0.2,0,0.6],[0,0,0,0]], [1], 0.3, 0.3, "", "", _particleSource, 1, false, -1, [], [0,1,0]];

// Fragmentos de madera
_drop = drop [["#(argb,8,8,3)color(0.4,0.3,0.2,1)", 1, 0, 1], "", "Billboard", 1.5, 2, [0,0,0], [0,0.05,0], 0, 0.5, 0.4, 0.1, [0.25, 0.2, 0.1], [[0.4,0.3,0.2,1],[0.2,0.15,0.1,0.6],[0,0,0,0]], [1], 0.3, 0.3, "", "", _particleSource, 1, false, -1, [], [0,1,0]];

deleteVehicle _particleSource;
true;

// ======================================================
/*
    Script: blastrefractEffect.sqf (versión extendida)
    Autor: ThomasAngel (modificado y ampliado por OpenAI)
    Descripción:
        Simula una onda de choque refractiva en múltiples fases visuales y sonoras.

    Parámetros:
        _this select 0: POSICIÓN AGL
        _this select 1: TAMAÑO (String): "tiny", "small", "medium", "large"

    Uso:
        [_pos, "medium"] execVM "WarFXPE\scripts\blastrefractEffect.sqf";

    Requiere:
        - Variable global "warFXPE_blastWave" en profileNamespace
        - CBA (para efectos retardados, opcional)

    Retorna: true
*/

params ["_particlePos", "_size"];

private _strength = profileNamespace getVariable ["warFXPE_blastWave", 1];
if (_strength isEqualTo 0) exitWith {false};

private _particleSource = createSimpleObject ["Land_HelipadEmpty_F", AGLtoASL _particlePos, true];

private _dropParams = switch (_size) do {
    case "tiny":   {[0.1 * _strength, [0.5,1,2.5,4,6,8.5]]};
    case "small":  {[0.125 * _strength, [1,2,5,8,12,17]]};
    case "medium": {[0.3 * _strength, [1,1,6,12,24,32,48]]};
    case "large":  {[0.4 * _strength, [2,2,24,60,105,150,210]]};
    default        {[0.2 * _strength, [1,1,6,12,24,32,48]]};
};

private _lifeTime = _dropParams select 0;
private _sizeArray = _dropParams select 1;

// ==================================================
// 🔴 FASE 1: ONDA REFRACTIVA + LUZ INICIAL
// ==================================================
_drop = drop [
    ["\A3\data_f\ParticleEffects\Universal\Refract", 1, 0, 1, 0],
    "", "Billboard", 1, _lifeTime,
    [0,0,0], [0,0,0],
    0, 10, 7.9, 0.1,
    _sizeArray,
    [[0.1,0.1,0.1,1],[0.5,0.5,0.5,1],[0,0,0,1],[0,0,0,0.3]],
    [1], 0.2, 0.2, "", "", _particleSource, 1, false, -1, [], [0,1,0]
];

// Flash explosivo
_drop = drop [["#(argb,8,8,3)color(1,1,1,0.8)",1,0,1], "", "Billboard", 0.2, 0.1, [0,0,0], [0,0,0], 0, 1, 1, 0, [2.5], [[1,1,1,0.8],[1,1,1,0]], [1], 0, 0, "", "", _particleSource, 1, false, -1, [], [0,1,0]];

// ==================================================
// 🔥 FASE 2: FRAGMENTACIÓN MULTIMATERIAL
// ==================================================
private _frags = [
    // Piedra
    ["#(argb,8,8,3)color(0.7,0.7,0.7,1)", [0.2,0.15,0.1]],
    // Carne
    ["#(argb,8,8,3)color(0.5,0.1,0.1,1)", [0.2,0.15,0.05]],
    // Vidrio
    ["#(argb,8,8,3)color(0.5,0.5,1,0.8)", [0.2,0.1]],
    // Madera
    ["#(argb,8,8,3)color(0.4,0.3,0.2,1)", [0.25,0.2,0.1]]
];

{
    private _tex = _x select 0;
    private _sizes = _x select 1;
    _drop = drop [[_tex,1,0,1], "", "Billboard", 1.5, 1.2, [0,0,0], [random 0.2,0.2,random 0.2], 0, 0.4, 0.4, 0.1, _sizes, [[1,1,1,1],[0,0,0,0.3],[0,0,0,0]], [1], 0.2, 0.2, "", "", _particleSource, 1, false, -1, [], [0,1,0]];
} forEach _frags;

// ==================================================
// 💥 FASE 3: CHISPAS / GLOW / CARBÓN
// ==================================================
// Glow
_drop = drop [["#(argb,8,8,3)color(1,1,1,0.6)",1,0,1], "", "Billboard", 2, 1.5, [0,0,0], [0,0,0], 0, 0.1, 0.1, 0.05, [0.3,0.1], [[1,1,1,0.6],[1,1,1,0.3],[1,1,1,0]], [1], 0.1, 0.1, "", "", _particleSource, 1, false, -1, [], [0,1,0]];

// Chispas tipo T800
_drop = drop [["#(argb,8,8,3)color(1,0.2,0.2,1)",1,0,1], "", "Billboard", 0.6, 0.8, [0,0,0], [0.1,0.1,0], 0, 1, 1, 0.2, [0.1, 0.05], [[1,0.2,0.2,1],[1,0.1,0.1,0.5],[0,0,0,0]], [1], 0.2, 0.2, "", "", _particleSource, 1, false, -1, [], [0,1,0]];

// Carbón incandescente
_drop = drop [["#(argb,8,8,3)color(1,0.4,0,1)",1,0,1], "", "Billboard", 1.5, 2.5, [0,0,0], [0,0.1,0], 0, 0.5, 0.5, 0.1, [0.5, 0.4, 0.3], [[1,0.4,0,1],[0.5,0.2,0,0.6],[0,0,0,0]], [1], 0.3, 0.3, "", "", _particleSource, 1, false, -1, [], [0,1,0]];

// ==================================================
// 🔊 FASE 4: SONIDO Y ECO
// ==================================================
playSound3D ["A3\Sounds_F\weapons\Explosion\expl_big_2.wss", objNull, false, _particlePos, 3, 1, 100];
[{ playSound3D ["A3\Sounds_F\weapons\Explosion\expl_big_distance_01.wss", objNull, false, _particlePos, 2, 1, 200]; }, [], 0.5] call CBA_fnc_waitAndExecute;

// ==================================================
// 🌫️ FASE 5: POLVO DE IMPACTO (TARDÍO)
// ==================================================
[{ 
    _dust = drop [["#(argb,8,8,3)color(0.4,0.4,0.4,0.3)",1,0,1], "", "Billboard", 4, 2, [0,0,0], [0,0.2,0], 0, 0.2, 0.2, 0.05, [2.5,2,1], [[0.4,0.4,0.4,0.3],[0.2,0.2,0.2,0.1],[0,0,0,0]], [1], 0.1, 0.1, "", "", _particleSource, 1, false, -1, [], [0,1,0]];
}, [], 0.9] call CBA_fnc_waitAndExecute;

deleteVehicle _particleSource;
true;
// ======================================================
/*
    Script: blastrefractEffect.sqf
    Autor: ThomasAngel (modificado por OpenAI para integración multipropósito)
    Descripción:
        Genera una onda refractiva tipo "blast wave" con tamaño configurable, junto con múltiples efectos de partículas vanilla simulando materiales como piedra, vidrio, carne, madera y destellos luminosos.

    Parámetros:
        _this select 0: POSICIÓN en formato AGL (Array)
        _this select 1: TAMAÑO del efecto (String): "tiny", "small", "medium" o "large"

    Uso:
        [_pos, "tiny"] execVM "WarFXPE\scripts\blastrefractEffect.sqf";

    Requiere:
        Variable global "warFXPE_blastWave" en profileNamespace (default: 1)

    Retorna: true si se ejecuta correctamente.
*/

params ["_particlePos", "_size"];

private _strength = profileNamespace getVariable ["warFXPE_blastWave", 1];
if (_strength isEqualTo 0) exitWith {false};

private _particleSource = createSimpleObject ["Land_HelipadEmpty_F", AGLtoASL _particlePos, true];

private _dropParams = switch (_size) do {
    case "medium": {
        [0.3 * _strength, [1,1,6,12,24,32,48]]
    };
    case "small": {
        [0.125 * _strength, [1,2,5,8,12,17]]
    };
    case "tiny": {
        [0.1 * _strength, [0.5,1,2.5,4,6,8.5]]
    };
    case "large": {
        [0.4 * _strength, [2,2,24,60,105,150,210]]
    };
    default {
        [0.2 * _strength, [1,1,6,12,24,32,48]]
    };
};

private _lifeTime = _dropParams select 0;
private _sizeArray = _dropParams select 1;

// Onda de refracción
_drop = drop [
    ["\A3\data_f\ParticleEffects\Universal\Refract", 1, 0],
    "", "Billboard", 1, _lifeTime,
    [0,0,0], [0,0,0],
    0, 10, 7.9, 0.1,
    _sizeArray,
    [
        [0.1,0.1,0.1,1],[0.25,0.25,0.25,1],
        [0.5,0.5,0.5,1],[0,0,0,1],
        [0,0,0,0.5],[0,0,0,0.3]
    ],
    [1], 0.2, 0.2,
    "", "", _particleSource, 1, false, -1, [], [0,1,0]
];

// Fragmentos de piedra violentos y persistentes
_drop = drop [["\A3\data_f\ParticleEffects\Pstone\Data\pstone_nohq.paa", 1, 0, 1], "", "Billboard", 60, 45, [0,0,0], [0,12,0], 5, 2, 2, 0.2, [0.4, 0.35, 0.2], [[0.7,0.7,0.7,1],[0.4,0.4,0.4,0.5],[0,0,0,0]], [1], 0.4, 0.4, "", "", _particleSource, 1, false, -1, [], [0,1,0]];

// Chispa brillante T800 extendida
_drop = drop [["#(argb,8,8,3)color(1,0.2,0.2,1)", 1, 0, 1], "", "Billboard", 10, 8, [0,0,0], [0,6,0], 2, 2, 1, 0.2, [0.2, 0.1], [[1,0.2,0.2,1],[1,0.1,0.1,0.5],[0,0,0,0]], [1], 0.2, 0.2, "", "", _particleSource, 1, false, -1, [], [0,1,0]];

// Carbón incandescente lento
_drop = drop [["#(argb,8,8,3)color(1,0.4,0,1)", 1, 0, 1], "", "Billboard", 30, 25, [0,0,0], [0,0.2,0], 1, 0.5, 0.5, 0.1, [0.5, 0.4, 0.3], [[1,0.4,0,1],[0.5,0.2,0,0.6],[0,0,0,0]], [1], 0.3, 0.3, "", "", _particleSource, 1, false, -1, [], [0,1,0]];

// Glow superficial intenso
_drop = drop [["#(argb,8,8,3)color(1,1,1,0.8)", 1, 0, 1], "", "Billboard", 5, 3, [0,0,0], [0,0.1,0], 0.2, 0.3, 0.2, 0.05, [0.6, 0.4, 0.2], [[1,1,1,0.8],[1,1,1,0.4],[1,1,1,0]], [1], 0.2, 0.2, "", "", _particleSource, 1, false, -1, [], [0,1,0]];

// Fragmentos de carne
_drop = drop [["#(argb,8,8,3)color(0.5,0.1,0.1,1)", 1, 0, 1], "", "Billboard", 20, 15, [0,0,0], [0,1,0], 0.5, 0.3, 0.4, 0.05, [0.3, 0.2, 0.1], [[0.5,0.1,0.1,1],[0.2,0.05,0.05,0.5],[0,0,0,0]], [1], 0.2, 0.2, "", "", _particleSource, 1, false, -1, [], [0,1,0]];

// Fragmentos de vidrio afilados y rápidos
_drop = drop [["#(argb,8,8,3)color(0.5,0.5,1,0.8)", 1, 0, 1], "", "Billboard", 25, 20, [0,0,0], [0,2,0], 1, 0.5, 0.4, 0.1, [0.3, 0.2], [[0.5,0.5,1,0.8],[0.2,0.2,0.5,0.4],[0,0,0,0]], [1], 0.1, 0.1, "", "", _particleSource, 1, false, -1, [], [0,1,0]];

// Luz explosiva duradera
_drop = drop [["#(argb,8,8,3)color(1,0.5,0,1)", 1, 0, 1], "", "Billboard", 3, 5, [0,0,0], [0,0,0], 0, 0.8, 0.6, 0.2, [0.4, 0.1], [[1,0.5,0,1],[1,0.2,0,0.6],[0,0,0,0]], [1], 0.3, 0.3, "", "", _particleSource, 1, false, -1, [], [0,1,0]];

// Fragmentos de madera pesados
_drop = drop [["#(argb,8,8,3)color(0.4,0.3,0.2,1)", 1, 0, 1], "", "Billboard", 40, 30, [0,0,0], [0,0.4,0], 0.8, 0.5, 0.4, 0.1, [0.4, 0.3, 0.2], [[0.4,0.3,0.2,1],[0.2,0.15,0.1,0.6],[0,0,0,0]], [1], 0.3, 0.3, "", "", _particleSource, 1, false, -1, [], [0,1,0]];

// Fuego radiante persistente
_drop = drop [["#(argb,8,8,3)color(1,0.3,0,1)", 1, 0, 1], "", "Billboard", 15, 12, [0,0,0], [0,0.05,0], 0.5, 0.3, 0.25, 0.05, [0.4, 0.3, 0.2], [[1,0.3,0,1],[1,0.2,0,0.6],[0,0,0,0]], [1], 0.3, 0.3, "", "", _particleSource, 1, false, -1, [], [0,1,0]];

// Humo negro ascendente lento
_drop = drop [["\A3\data_f\ParticleEffects\Universal\Universal", 16, 12, 8, 0], "", "Billboard", 25, 20, [0,0,0], [0,0.2,0], 0.3, 0.2, 0.2, 0.05, [0.6, 0.8, 1.2], [[0.1,0.1,0.1,0.4],[0.1,0.1,0.1,0.3],[0.1,0.1,0.1,0]], [1], 0.2, 0.2, "", "", _particleSource, 1, false, -1, [], [0,1,0]];

// SONIDO EXPLOSIVO IMPACTANTE
playSound3D ["A3\\Sounds_F\\weapons\\Explosion\\expl_big_2.wss", objNull, false, _particlePos, 3, 1, 100];

// ECO AMBIENTAL OPCIONAL
[{ playSound3D ["A3\\Sounds_F\\weapons\\Explosion\\expl_big_distance_01.wss", objNull, false, _particlePos, 2, 1, 200]; }, [], 0.4] call CBA_fnc_waitAndExecute;

deleteVehicle _particleSource;
true;

// ======================================================
/*
    Script: blastrefractEffect.sqf
    Autor: ThomasAngel (modificado por OpenAI para integración multipropósito)
    Descripción:
        Genera una onda refractiva tipo "blast wave" con tamaño configurable, junto con múltiples efectos de partículas vanilla simulando materiales como piedra, vidrio, carne, madera y destellos luminosos.

    Parámetros:
        _this select 0: POSICIÓN en formato AGL (Array)
        _this select 1: TAMAÑO del efecto (String): "tiny", "small", "medium" o "large"

    Uso:
        [_pos, "tiny"] execVM "WarFXPE\scripts\blastrefractEffect.sqf";

    Requiere:
        Variable global "warFXPE_blastWave" en profileNamespace (default: 1)

    Retorna: true si se ejecuta correctamente.
*/

params ["_particlePos", "_size"];

private _strength = profileNamespace getVariable ["warFXPE_blastWave", 1];
if (_strength isEqualTo 0) exitWith {false};

private _particleSource = createSimpleObject ["Land_HelipadEmpty_F", AGLtoASL _particlePos, true];

// === Materiales vanilla definidos ===
private _tex_refract = ["\A3\data_f\ParticleEffects\Universal\Refract", 1, 0];
private _tex_stone   = ["\A3\data_f\ParticleEffects\Pstone\Data\pstone_nohq.paa", 1, 0, 1];
private _tex_black   = ["\A3\data_f\ParticleEffects\Universal\Universal", 16, 12, 8, 0];
private _tex_glow    = ["#(argb,8,8,3)color(1,1,1,0.8)", 1, 0, 1];
private _tex_spark   = ["#(argb,8,8,3)color(1,0.2,0.2,1)", 1, 0, 1];
private _tex_coal    = ["#(argb,8,8,3)color(1,0.4,0,1)", 1, 0, 1];
private _tex_fire    = ["#(argb,8,8,3)color(1,0.3,0,1)", 1, 0, 1];
private _tex_flash   = ["#(argb,8,8,3)color(1,0.5,0,1)", 1, 0, 1];
private _tex_glass   = ["#(argb,8,8,3)color(0.5,0.5,1,0.8)", 1, 0, 1];
private _tex_flesh   = ["#(argb,8,8,3)color(0.5,0.1,0.1,1)", 1, 0, 1];
private _tex_wood    = ["#(argb,8,8,3)color(0.4,0.3,0.2,1)", 1, 0, 1];

// === Tamaños y duraciones por escala ===
private _dropParams = switch (_size) do {
    case "medium": {[0.3 * _strength, [1,1,6,12,24,32,48]]};
    case "small":  {[0.125 * _strength, [1,2,5,8,12,17]]};
    case "tiny":   {[0.1 * _strength, [0.5,1,2.5,4,6,8.5]]};
    case "large":  {[0.4 * _strength, [2,2,24,60,105,150,210]]};
    default        {[0.2 * _strength, [1,1,6,12,24,32,48]]};
};

private _lifeTime = _dropParams select 0;
private _sizeArray = _dropParams select 1;

// === Onda de refracción ===
_drop = drop [_tex_refract, "", "Billboard", 1, _lifeTime, [0,0,0], [0,0,0], 0, 10, 7.9, 0.1, _sizeArray,
    [[0.1,0.1,0.1,1],[0.25,0.25,0.25,1],[0.5,0.5,0.5,1],[0,0,0,1],[0,0,0,0.5],[0,0,0,0.3]],
    [1], 0.2, 0.2, "", "", _particleSource, 1, false, -1, [], [0,1,0]
];

// === Efectos materiales ===
[
    [_tex_stone, 60, 45, [0,12,0], 5, [0.4,0.35,0.2], [[0.7,0.7,0.7,1],[0.4,0.4,0.4,0.5],[0,0,0,0]]],
    [_tex_spark, 10, 8, [0,6,0], 2, [0.2,0.1], [[1,0.2,0.2,1],[1,0.1,0.1,0.5],[0,0,0,0]]],
    [_tex_coal, 30, 25, [0,0.2,0], 1, [0.5,0.4,0.3], [[1,0.4,0,1],[0.5,0.2,0,0.6],[0,0,0,0]]],
    [_tex_glow, 5, 3, [0,0.1,0], 0.2, [0.6,0.4,0.2], [[1,1,1,0.8],[1,1,1,0.4],[1,1,1,0]]],
    [_tex_flesh, 20, 15, [0,1,0], 0.5, [0.3,0.2,0.1], [[0.5,0.1,0.1,1],[0.2,0.05,0.05,0.5],[0,0,0,0]]],
    [_tex_glass, 25, 20, [0,2,0], 1, [0.3,0.2], [[0.5,0.5,1,0.8],[0.2,0.2,0.5,0.4],[0,0,0,0]]],
    [_tex_flash, 3, 5, [0,0,0], 0, [0.4,0.1], [[1,0.5,0,1],[1,0.2,0,0.6],[0,0,0,0]]],
    [_tex_wood, 40, 30, [0,0.4,0], 0.8, [0.4,0.3,0.2], [[0.4,0.3,0.2,1],[0.2,0.15,0.1,0.6],[0,0,0,0]]],
    [_tex_fire, 15, 12, [0,0.05,0], 0.5, [0.4,0.3,0.2], [[1,0.3,0,1],[1,0.2,0,0.6],[0,0,0,0]]],
    [_tex_black, 25, 20, [0,0.2,0], 0.3, [0.6,0.8,1.2], [[0.1,0.1,0.1,0.4],[0.1,0.1,0.1,0.3],[0.1,0.1,0.1,0]]]
] apply {
    params ["_tex", "_life", "_age", "_vec", "_vel", "_sizes", "_colors"];
    drop [_tex, "", "Billboard", _life, _age, [0,0,0], _vec, _vel, 2, 2, 0.2, _sizes, _colors,
          [1], 0.2, 0.2, "", "", _particleSource, 1, false, -1, [], [0,1,0]];
};

// === Sonidos ===
playSound3D ["A3\\Sounds_F\\weapons\\Explosion\\expl_big_2.wss", objNull, false, _particlePos, 3, 1, 100];
[{ playSound3D ["A3\\Sounds_F\\weapons\\Explosion\\expl_big_distance_01.wss", objNull, false, _particlePos, 2, 1, 200]; }, [], 0.4] call CBA_fnc_waitAndExecute;

// === Limpieza ===
deleteVehicle _particleSource;
true;

// ======================================================
/*
    Script: blastrefractEffect.sqf
    Autor: ThomasAngel (modificado por OpenAI para integración multipropósito)
    Descripción:
        Genera una onda refractiva tipo "blast wave" con tamaño configurable, junto con múltiples efectos de partículas vanilla simulando materiales como piedra, vidrio, carne, madera y destellos luminosos.

    Parámetros:
        _this select 0: POSICIÓN en formato AGL (Array)
        _this select 1: TAMAÑO del efecto (String): "tiny", "small", "medium" o "large"
        _this select 2 (opcional): BOOLEANO para habilitar sonido (default: true)

    Uso:
        [_pos, "tiny", true] execVM "WarFXPE\scripts\blastrefractEffect.sqf";

    Requiere:
        Variable global "warFXPE_blastWave" en profileNamespace (default: 1)

    Retorna: true si se ejecuta correctamente.
*/

params ["_particlePos", "_size", ["_withSound", true]];

private _strength = profileNamespace getVariable ["warFXPE_blastWave", 1];
if (_strength isEqualTo 0) exitWith {false};

// Optimización: No ejecuta si no hay jugadores cerca
if ((_particlePos nearEntities ["CAManBase", 300]) findIf { isPlayer _x } isEqualTo -1) exitWith {false};

// Validación robusta del tamaño
if !(_size in ["tiny", "small", "medium", "large"]) then {
    diag_log format ["[blastrefractEffect] Tamaño desconocido: %1. Usando 'medium' por defecto.", _size];
};

private _particleSource = createSimpleObject ["Land_HelipadEmpty_F", AGLtoASL _particlePos, true];

private _dropParams = switch (_size) do {
    case "medium": { [0.3 * _strength, [1,1,6,12,24,32,48]] };
    case "small":  { [0.125 * _strength, [1,2,5,8,12,17]] };
    case "tiny":   { [0.1 * _strength, [0.5,1,2.5,4,6,8.5]] };
    case "large":  { [0.4 * _strength, [2,2,24,60,105,150,210]] };
    default        { [0.2 * _strength, [1,1,6,12,24,32,48]] };
};

private _lifeTime = _dropParams select 0;
private _sizeArray = _dropParams select 1;

// Efectos visuales de partículas
drop [["\A3\data_f\ParticleEffects\Universal\Refract", 1, 0], "", "Billboard", 1, _lifeTime, [0,0,0], [0,0,0], 0, 10, 7.9, 0.1, _sizeArray, [[0.1,0.1,0.1,1],[0.25,0.25,0.25,1],[0.5,0.5,0.5,1],[0,0,0,1],[0,0,0,0.5],[0,0,0,0.3]], [1], 0.2, 0.2, "", "", _particleSource, 1, false, -1, [], [0,1,0]];
drop [["\A3\data_f\ParticleEffects\Pstone\Data\pstone_nohq.paa", 1, 0, 1], "", "Billboard", 60, 45, [0,0,0], [0,12,0], 5, 2, 2, 0.2, [0.4, 0.35, 0.2], [[0.7,0.7,0.7,1],[0.4,0.4,0.4,0.5],[0,0,0,0]], [1], 0.4, 0.4, "", "", _particleSource, 1, false, -1, [], [0,1,0]];
drop [["#(argb,8,8,3)color(1,0.2,0.2,1)", 1, 0, 1], "", "Billboard", 10, 8, [0,0,0], [0,6,0], 2, 2, 1, 0.2, [0.2, 0.1], [[1,0.2,0.2,1],[1,0.1,0.1,0.5],[0,0,0,0]], [1], 0.2, 0.2, "", "", _particleSource, 1, false, -1, [], [0,1,0]];
drop [["#(argb,8,8,3)color(1,0.4,0,1)", 1, 0, 1], "", "Billboard", 30, 25, [0,0,0], [0,0.2,0], 1, 0.5, 0.5, 0.1, [0.5, 0.4, 0.3], [[1,0.4,0,1],[0.5,0.2,0,0.6],[0,0,0,0]], [1], 0.3, 0.3, "", "", _particleSource, 1, false, -1, [], [0,1,0]];
drop [["#(argb,8,8,3)color(1,1,1,0.8)", 1, 0, 1], "", "Billboard", 5, 3, [0,0,0], [0,0.1,0], 0.2, 0.3, 0.2, 0.05, [0.6, 0.4, 0.2], [[1,1,1,0.8],[1,1,1,0.4],[1,1,1,0]], [1], 0.2, 0.2, "", "", _particleSource, 1, false, -1, [], [0,1,0]];
drop [["#(argb,8,8,3)color(0.5,0.1,0.1,1)", 1, 0, 1], "", "Billboard", 20, 15, [0,0,0], [0,1,0], 0.5, 0.3, 0.4, 0.05, [0.3, 0.2, 0.1], [[0.5,0.1,0.1,1],[0.2,0.05,0.05,0.5],[0,0,0,0]], [1], 0.2, 0.2, "", "", _particleSource, 1, false, -1, [], [0,1,0]];

drop [["#(argb,8,8,3)color(0.5,0.5,1,0.8)", 1, 0, 1], "", "Billboard", 25, 20, [0,0,0], [0,2,0], 1, 0.5, 0.4, 0.1, [0.3, 0.2], [[0.5,0.5,1,0.8],[0.2,0.2,0.5,0.4],[0,0,0,0]], [1], 0.1, 0.1, "", "", _particleSource, 1, false, -1, [], [0,1,0]];
drop [["#(argb,8,8,3)color(1,0.5,0,1)", 1, 0, 1], "", "Billboard", 3, 5, [0,0,0], [0,0,0], 0, 0.8, 0.6, 0.2, [0.4, 0.1], [[1,0.5,0,1],[1,0.2,0,0.6],[0,0,0,0]], [1], 0.3, 0.3, "", "", _particleSource, 1, false, -1, [], [0,1,0]];
drop [["#(argb,8,8,3)color(0.4,0.3,0.2,1)", 1, 0, 1], "", "Billboard", 40, 30, [0,0,0], [0,0.4,0], 0.8, 0.5, 0.4, 0.1, [0.4, 0.3, 0.2], [[0.4,0.3,0.2,1],[0.2,0.15,0.1,0.6],[0,0,0,0]], [1], 0.3, 0.3, "", "", _particleSource, 1, false, -1, [], [0,1,0]];
drop [["#(argb,8,8,3)color(1,0.3,0,1)", 1, 0, 1], "", "Billboard", 15, 12, [0,0,0], [0,0.05,0], 0.5, 0.3, 0.25, 0.05, [0.4, 0.3, 0.2], [[1,0.3,0,1],[1,0.2,0,0.6],[0,0,0,0]], [1], 0.3, 0.3, "", "", _particleSource, 1, false, -1, [], [0,1,0]];
drop [["\A3\data_f\ParticleEffects\Universal\Universal", 16, 12, 8, 0], "", "Billboard", 25, 20, [0,0,0], [0,0.2,0], 0.3, 0.2, 0.2, 0.05, [0.6, 0.8, 1.2], [[0.1,0.1,0.1,0.4],[0.1,0.1,0.1,0.3],[0.1,0.1,0.1,0]], [1], 0.2, 0.2, "", "", _particleSource, 1, false, -1, [], [0,1,0]];

// Sonido (solo si _withSound es true)
if (_withSound) then {
    playSound3D ["A3\\Sounds_F\\weapons\\Explosion\\expl_big_2.wss", objNull, false, _particlePos, 3, 1, 100];
    [{ playSound3D ["A3\\Sounds_F\\weapons\\Explosion\\expl_big_distance_01.wss", objNull, false, _particlePos, 2, 1, 200]; }, [], 0.4] call CBA_fnc_waitAndExecute;
};

// Limpieza
deleteVehicle _particleSource;
true;

// ======================================================
/*
    Script: blastrefractEffect.sqf
    Autor: ThomasAngel (modificado por OpenAI para integración multipropósito)
    Descripción:
        Genera una onda refractiva tipo "blast wave" con tamaño configurable, junto con múltiples efectos de partículas vanilla simulando materiales como piedra, vidrio, carne, madera y destellos luminosos.

    Parámetros:
        _this select 0: POSICIÓN en formato AGL (Array)
        _this select 1: TAMAÑO del efecto (String): "tiny", "small", "medium" o "large"
        _this select 2 (opcional): BOOLEANO para habilitar sonido (default: true)

    Uso:
        [_pos, "tiny", true] execVM "WarFXPE\scripts\blastrefractEffect.sqf";

    Requiere:
        Ninguna dependencia externa (CBA eliminado, compatible con vanilla 100%)

    Retorna: true si se ejecuta correctamente.
*/

params ["_particlePos", "_size", ["_withSound", true]];

// Valor de fuerza de onda, se puede ajustar si se desea
private _strength = 1;

// Optimización: No ejecuta si no hay jugadores cerca
if ((_particlePos nearEntities ["CAManBase", 300]) findIf { isPlayer _x } isEqualTo -1) exitWith {false};

// AGLtoASL para efectos correctos según altura del terreno
private _particleSource = createSimpleObject ["Land_HelipadEmpty_F", AGLtoASL _particlePos, true];

private _dropParams = switch (_size) do {
    case "medium": {
        [0.3 * _strength, [1,1,6,12,24,32,48]]
    };
    case "small": {
        [0.125 * _strength, [1,2,5,8,12,17]]
    };
    case "tiny": {
        [0.1 * _strength, [0.5,1,2.5,4,6,8.5]]
    };
    case "large": {
        [0.4 * _strength, [2,2,24,60,105,150,210]]
    };
    default {
        [0.2 * _strength, [1,1,6,12,24,32,48]]
    };
};

private _lifeTime = _dropParams select 0;
private _sizeArray = _dropParams select 1;

// Efectos visuales principales
_drop = drop [["\A3\data_f\ParticleEffects\Universal\Refract", 1, 0], "", "Billboard", 1, _lifeTime, [0,0,0], [0,0,0], 0, 10, 7.9, 0.1, _sizeArray, [[0.1,0.1,0.1,1],[0.25,0.25,0.25,1],[0.5,0.5,0.5,1],[0,0,0,1],[0,0,0,0.5],[0,0,0,0.3]], [1], 0.2, 0.2, "", "", _particleSource, 1, false, -1, [], [0,1,0]];
_drop = drop [["\A3\data_f\ParticleEffects\Pstone\Data\pstone_nohq.paa", 1, 0, 1], "", "Billboard", 60, 45, [0,0,0], [0,12,0], 5, 2, 2, 0.2, [0.4, 0.35, 0.2], [[0.7,0.7,0.7,1],[0.4,0.4,0.4,0.5],[0,0,0,0]], [1], 0.4, 0.4, "", "", _particleSource, 1, false, -1, [], [0,1,0]];
_drop = drop [["#(argb,8,8,3)color(1,0.2,0.2,1)", 1, 0, 1], "", "Billboard", 10, 8, [0,0,0], [0,6,0], 2, 2, 1, 0.2, [0.2, 0.1], [[1,0.2,0.2,1],[1,0.1,0.1,0.5],[0,0,0,0]], [1], 0.2, 0.2, "", "", _particleSource, 1, false, -1, [], [0,1,0]];
_drop = drop [["#(argb,8,8,3)color(1,0.4,0,1)", 1, 0, 1], "", "Billboard", 30, 25, [0,0,0], [0,0.2,0], 1, 0.5, 0.5, 0.1, [0.5, 0.4, 0.3], [[1,0.4,0,1],[0.5,0.2,0,0.6],[0,0,0,0]], [1], 0.3, 0.3, "", "", _particleSource, 1, false, -1, [], [0,1,0]];
_drop = drop [["#(argb,8,8,3)color(1,1,1,0.8)", 1, 0, 1], "", "Billboard", 5, 3, [0,0,0], [0,0.1,0], 0.2, 0.3, 0.2, 0.05, [0.6, 0.4, 0.2], [[1,1,1,0.8],[1,1,1,0.4],[1,1,1,0]], [1], 0.2, 0.2, "", "", _particleSource, 1, false, -1, [], [0,1,0]];
_drop = drop [["#(argb,8,8,3)color(0.5,0.1,0.1,1)", 1, 0, 1], "", "Billboard", 20, 15, [0,0,0], [0,1,0], 0.5, 0.3, 0.4, 0.05, [0.3, 0.2, 0.1], [[0.5,0.1,0.1,1],[0.2,0.05,0.05,0.5],[0,0,0,0]], [1], 0.2, 0.2, "", "", _particleSource, 1, false, -1, [], [0,1,0]];
_drop = drop [["#(argb,8,8,3)color(0.5,0.5,1,0.8)", 1, 0, 1], "", "Billboard", 25, 20, [0,0,0], [0,2,0], 1, 0.5, 0.4, 0.1, [0.3, 0.2], [[0.5,0.5,1,0.8],[0.2,0.2,0.5,0.4],[0,0,0,0]], [1], 0.1, 0.1, "", "", _particleSource, 1, false, -1, [], [0,1,0]];
_drop = drop [["#(argb,8,8,3)color(1,0.5,0,1)", 1, 0, 1], "", "Billboard", 3, 5, [0,0,0], [0,0,0], 0, 0.8, 0.6, 0.2, [0.4, 0.1], [[1,0.5,0,1],[1,0.2,0,0.6],[0,0,0,0]], [1], 0.3, 0.3, "", "", _particleSource, 1, false, -1, [], [0,1,0]];
_drop = drop [["#(argb,8,8,3)color(0.4,0.3,0.2,1)", 1, 0, 1], "", "Billboard", 40, 30, [0,0,0], [0,0.4,0], 0.8, 0.5, 0.4, 0.1, [0.4, 0.3, 0.2], [[0.4,0.3,0.2,1],[0.2,0.15,0.1,0.6],[0,0,0,0]], [1], 0.3, 0.3, "", "", _particleSource, 1, false, -1, [], [0,1,0]];
_drop = drop [["#(argb,8,8,3)color(1,0.3,0,1)", 1, 0, 1], "", "Billboard", 15, 12, [0,0,0], [0,0.05,0], 0.5, 0.3, 0.25, 0.05, [0.4, 0.3, 0.2], [[1,0.3,0,1],[1,0.2,0,0.6],[0,0,0,0]], [1], 0.3, 0.3, "", "", _particleSource, 1, false, -1, [], [0,1,0]];
_drop = drop [["\A3\data_f\ParticleEffects\Universal\Universal", 16, 12, 8, 0], "", "Billboard", 25, 20, [0,0,0], [0,0.2,0], 0.3, 0.2, 0.2, 0.05, [0.6, 0.8, 1.2], [[0.1,0.1,0.1,0.4],[0.1,0.1,0.1,0.3],[0.1,0.1,0.1,0]], [1], 0.2, 0.2, "", "", _particleSource, 1, false, -1, [], [0,1,0]];

// Sonido (solo si _withSound es true)
if (_withSound) then {
    playSound3D ["A3\\Sounds_F\\weapons\\Explosion\\expl_big_2.wss", objNull, false, _particlePos, 3, 1, 100];
    [] spawn {
        sleep 0.4;
        playSound3D ["A3\\Sounds_F\\weapons\\Explosion\\expl_big_distance_01.wss", objNull, false, _particlePos, 2, 1, 200];
    };
};

deleteVehicle _particleSource;
true;

// ======================================================

// Fire Effect 1
_fire1 = '#particlesource' createVehicleLocal [0,0,0];
_fire1 setParticleParams [
  ["\A3\data_f\ParticleEffects\Universal\Universal",16,7,48], // particleShape
  '', '', '', 1,
  [0, 0, 1.5],
  [0,0,0],
  0,
  0.5,
  0.2,
  0.1,
  [0.05, 0.8, 0.8],
  [[1,0.3,0,1],[0,0,0,0]],
  [0.5],
  1,
  0.1
];
_fire1 setParticleRandom [0.1, [0,0,0], [0.1,0.1,0.1], 0, 0.1, [0,0,0,0], 0.1, 0.1];
_fire1 setDropInterval 0.01;

// Fire Effect 2
_fire2 = '#particlesource' createVehicleLocal [0,0,0];
_fire2 setParticleParams [
  ["\A3\data_f\ParticleEffects\Universal\Universal",16,7,48], // particleShape
  '', '', '', 1,
  [0, -0.5, -1.5],
  [0,0,0],
  0,
  0.5,
  0.2,
  0.1,
  [0.05, 0.8, 0.8],
  [[1,0.3,0,1],[0,0,0,0]],
  [0.5],
  1,
  0.1
];
_fire2 setParticleRandom [0.1, [0,0,0], [0.1,0.1,0.1], 0, 0.1, [0,0,0,0], 0.1, 0.1];
_fire2 setDropInterval 0.01;

// Fire Effect 3
_fire3 = '#particlesource' createVehicleLocal [0,0,0];
_fire3 setParticleParams [
  ["\A3\data_f\ParticleEffects\Universal\Universal",16,7,48], // particleShape
  '', '', '', 1,
  [0, 0, 0.75],
  [0,0,0],
  0,
  0.5,
  0.2,
  0.1,
  [0.05, 0.8, 0.8],
  [[1,0.3,0,1],[0,0,0,0]],
  [0.5],
  1,
  0.1
];
_fire3 setParticleRandom [0.1, [0,0,0], [0.1,0.1,0.1], 0, 0.1, [0,0,0,0], 0.1, 0.1];
_fire3 setDropInterval 0.01;

// Fire Effect 4
_fire4 = '#particlesource' createVehicleLocal [0,0,0];
_fire4 setParticleParams [
  ["\A3\data_f\ParticleEffects\Universal\Universal",16,7,48], // particleShape
  '', '', '', 1,
  [0, -0.5, -0.75],
  [0,0,0],
  0,
  0.5,
  0.2,
  0.1,
  [0.05, 0.8, 0.8],
  [[1,0.3,0,1],[0,0,0,0]],
  [0.5],
  1,
  0.1
];
_fire4 setParticleRandom [0.1, [0,0,0], [0.1,0.1,0.1], 0, 0.1, [0,0,0,0], 0.1, 0.1];
_fire4 setDropInterval 0.01;

// ======================================================

// fxp_VehTank Particle Effects Script - Convertido desde CfgCloudlets
// Uso: Llama a fxp_spawnTankDestructionEffects en el objeto destruido
// Autor: Vulpecula (Adaptado para uso directo en misiones)

fxp_spawnTankDestructionEffects = {
    params [["_target", objNull]];

    if (isNull _target) exitWith {};

    // Fuego mínimo
    {
        _x params ["_pos"];
        _effect = "#particlesource" createVehicleLocal (getPos _target vectorAdd _pos);
        _effect setParticleParams [
            ["\\A3\\data_f\\ParticleEffects\\Universal\\Universal", 16, 12, 8, 1],
            "", "Billboard", 1, 0.5,
            [0,0,0], [0,0,0], 0, 1.275, 1, 0, [0.05, 0.8, 0.8],
            [[1,1,1,1]], [1], 1, 0, "", "", _target
        ];
        _effect setDropInterval 0.01;
    } forEach [
        [[0,0,1.5]],
        [[0,-0.5,-1.5]],
        [[0,0,0.75]],
        [[0,-0.5,-0.75]]
    ];

    // Chispas pequeñas
    {
        _x params ["_pos"];
        _effect = "#particlesource" createVehicleLocal (getPos _target vectorAdd _pos);
        _effect setParticleParams [
            ["\\A3\\data_f\\cl_fire", 1, 0, 1, 1],
            "", "Billboard", 1, 6,
            [0,0,0], [0,0,0], 1, 1, 1, 0,
            [0.05, 0.03, 0.02],
            [
                [1,1,1,1],
                [0,0,0,0]
            ],
            [1000], 1, 0.3, "", "", _target
        ];
        _effect setParticleRandom [
            0.8, [1,0.1,1], [0,0,0], 0, 0.01, [0,0.15,0.15,0], 0.3, 0.15
        ];
        _effect setDropInterval 0.025;
    } forEach [
        [[0,-0.5,-0.75]],
        [[0,0,0.75]]
    ];

    // Chispas grandes
    _effect = "#particlesource" createVehicleLocal (getPos _target);
    _effect setParticleParams [
        ["\\A3\\data_f\\ParticleEffects\\Universal\\Universal", 1, 0, 1, 1],
        "", "Billboard", 1, 1,
        [0,0,0], [0,20,0], 1, 1, 1, 0,
        [0.4],
        [
            [1,1,0.6,-15],
            [1,1,0.6,0]
        ],
        [-2], 1, 0, "", "", _target
    ];
    _effect setParticleRandom [
        0.2, [30,15,30], [0,0,0], 0, 0.2, [0,0,0,0], 0, 0
    ];
    _effect setDropInterval 0.02;

    // Humo denso de destrucción
    _effect = "#particlesource" createVehicleLocal (getPos _target vectorAdd [0,0,0]);
    _effect setParticleParams [
        ["\\A3\\data_f\\ParticleEffects\\Universal\\Universal", 16, 12, 8, 1],
        "", "Billboard", 1, 75,
        [0,5,0], [0,5,0], 0.5, 1, 1, 0,
        [2.5,9,13,16,19,22,25,28,32,36,40,45,52.5,60,75,95],
        [
            [0.02,0.02,0.02,0.5],
            [0.02,0.02,0.02,0.8],
            [0.02,0.02,0.02,0.2],
            [0.02,0.02,0.02,0.14],
            [0.04,0.04,0.04,0.1],
            [0.04,0.04,0.04,0.07],
            [0.04,0.04,0.04,0.05],
            [0.04,0.04,0.04,0.03],
            [0.04,0.04,0.04,0.02],
            [0.04,0.04,0.04,0.015],
            [0.04,0.04,0.04,0.01],
            [0.05,0.05,0.05,0.005],
            [0.08,0.08,0.08,0.003],
            [0.08,0.08,0.08,0.002],
            [0.08,0.08,0.08,0]
        ],
        [1], 1, 1, "", "", _target
    ];
    _effect setParticleRandom [
        50, [0.3,0.2,0.3], [0,0,0], 12, 0.1, [0,0,0,0.01], 0.5, 0.05
    ];
    _effect setDropInterval 0.2;

    // Humo de destrucción breve
    _effect = "#particlesource" createVehicleLocal (getPos _target vectorAdd [0.5,0,0.5]);
    _effect setParticleParams [
        ["\\A3\\data_f\\ParticleEffects\\Universal\\Universal_02", 8, 40, 0, 1],
        "", "Billboard", 1, 3.2,
        [0,0,0], [0,0,0], 18, 1, 1, 0,
        [1.25,1.5,2.5],
        [
            [0.05,0.05,0.05,0.6],
            [0.05,0.05,0.05,0.9],
            [0.1,0.1,0.1,0.8],
            [0.1,0.1,0.1,0.65],
            [0.1,0.1,0.1,0.5],
            [0.1,0.1,0.1,0.35],
            [0.1,0.1,0.1,0.25],
            [0.1,0.1,0.1,0.15],
            [0.1,0.1,0.1,0]
        ],
        [1.1,0.9,0.6], 1, 0.3, "", "", _target
    ];
    _effect setParticleRandom [
        0.7, [1.5,0.1,1.5], [0,0,0], 0.5, 0.2, [0,0,0,0.1], 0, 0
    ];
    _effect setDropInterval 0.02;
};

// ======================================================
/*
    Script: fn_WarFXPE_ConvertedEffects.sqf
    Descripción:
        Este script replica los efectos visuales del mod WarFXPE, adaptándolos para ejecutarse desde una misión sin necesidad del addon original.
        Reemplaza rutas de modelos y texturas no vanilla por equivalentes vanilla del juego.

    Uso:
        Llamar desde init.sqf o initServer.sqf
        [] execVM "fn_WarFXPE_ConvertedEffects.sqf";
*/

// Función auxiliar para crear un efecto de partícula
private _spawnEffect = {
    params ["_type", "_position", ["_intensity", 1], ["_lifeTime", 5]];
    _position params ["_x", "_y", "_z"];

    private _particle = createVehicle ["#particlesource", [_x, _y, _z], [], 0, "CAN_COLLIDE"];

    switch (_type) do {
        case "explosion": {
            _particle setParticleParams [
                ["\A3\data_f\ParticleEffects\Universal\Universal.p3d", 16, 12, 8],
                "",
                "Billboard",
                1,
                0.5,
                [0,1,0],
                [0,5,0],
                0,
                10,
                7.9,
                0.1,
                [1,4,0],
                [[1,1,1,1], [1,1,1,0]],
                [1],
                1,
                0,
                "",
                "",
                _intensity
            ];
            _particle setDropInterval 0.01;
        };
        case "smoke": {
            _particle setParticleParams [
                ["\A3\data_f\ParticleEffects\Universal\Universal_02.p3d", 8, 0, 40],
                "",
                "Billboard",
                1,
                _lifeTime,
                [0,0,0],
                [0,1,0],
                0,
                1.275,
                1,
                0.22,
                [2, 4, 6, 8, 10],
                [[0.1,0.1,0.1,0.6],[0.2,0.2,0.2,0.4],[0.3,0.3,0.3,0.2],[0.4,0.4,0.4,0.1],[0.4,0.4,0.4,0]],
                [0.5],
                1,
                0,
                "",
                "",
                _intensity
            ];
            _particle setDropInterval 0.08;
        };
        case "spark": {
            _particle setParticleParams [
                ["\A3\data_f\ParticleEffects\Universal\Universal.p3d", 16, 12, 8],
                "",
                "SpaceObject",
                1,
                0.3,
                [0,0,0],
                [0,5,0],
                0,
                0.05,
                0.1,
                0.3,
                [0.1],
                [[1,1,0.8,1],[1,1,0.6,0]],
                [1],
                1,
                0,
                "",
                "",
                _intensity
            ];
            _particle setDropInterval 0.01;
        };
    };

    _particle
};

// DEMO de uso (remplazar por disparadores o eventos reales)
// Aquí se colocan 3 tipos de efectos en la posición del jugador

private _pos = getPosASL player;

[_spawnEffect, "explosion", _pos, 1, 2] call BIS_fnc_call;
[_spawnEffect, "smoke", _pos, 1, 10] call BIS_fnc_call;
[_spawnEffect, "spark", _pos, 1, 3] call BIS_fnc_call;

true;

// ======================================================
/*
    Script: fn_WarFXPE_AllEffects.sqf
    Descripción:
        Este script replica todos los efectos visuales de WarFXPE, integrándolos en tu misión sin necesidad de usar addons.
        Incluye todas las configuraciones de CfgCloudlets, CfgLights y EventHandlers convertidas para su uso desde carpeta de misión.

    Uso:
        Añadir a init.sqf:
            [] execVM "scripts/fn_WarFXPE_AllEffects.sqf";
*/

// --- Configuraciones globales ---

// Función para registrar un efecto de partícula desde parámetros personalizados
private _createEffect = {
    params [
        "_type", "_position", ["_intensity", 1], ["_lifeTime", 3]
    ];

    private _source = createVehicle ["#particlesource", _position, [], 0, "CAN_COLLIDE"];

    switch (_type) do {
        case "explosionSmall": {
            _source setParticleParams [
                ["\A3\data_f\ParticleEffects\Universal\Universal", 16, 12, 8],
                "",
                "Billboard",
                1, 1,
                [0, 2, 0],
                [0, 5, 0],
                0, 0.5,
                0.2, 0.1,
                [1.5, 2, 1],
                [[1,1,1,1], [1,1,1,0]],
                [1],
                1, 0, "", "",
                _intensity
            ];
            _source setDropInterval 0.01;
        };
        case "sparkBurst": {
            _source setParticleParams [
                ["\A3\data_f\ParticleEffects\Universal\Universal", 16, 12, 8],
                "",
                "Billboard",
                1, 0.5,
                [0, 5, 0],
                [0, 10, 0],
                0, 1,
                0.1, 0.2,
                [0.5, 0.3, 0.1],
                [[1,1,0.6,1], [1,1,0.6,0]],
                [0.1],
                1, 0, "", "",
                _intensity
            ];
            _source setDropInterval 0.02;
        };
        case "blackSmoke": {
            _source setParticleParams [
                ["\A3\data_f\ParticleEffects\Universal\Universal_02", 8, 0, 40],
                "",
                "Billboard",
                1, _lifeTime,
                [0, 1, 0],
                [0, 2, 0],
                0, 0.5,
                0.1, 0.1,
                [1.5, 3, 6],
                [[0.1,0.1,0.1,0.5],[0.1,0.1,0.1,0.4],[0.1,0.1,0.1,0]],
                [1],
                1, 0, "", "",
                _intensity
            ];
            _source setDropInterval 0.05;
        };
        case "impactSmoke": {
            _source setParticleParams [
                ["\A3\data_f\ParticleEffects\Universal\Universal_02", 8, 0, 32],
                "", "Billboard", 1,
                300, // <-- duración real del humo
                [0, 0, 0], [0, 1.5, 0],
                0, 0.5, 0.1, 0.1,
                [1, 5, 10], // Tamaño mayor
                [
                    [0, 0, 0, 0.8],
                    [0, 0, 0, 0.6],
                    [0, 0, 0, 0.3],
                    [0, 0, 0, 0]
                ],
                [1], 1, 0, "", "", _intensity
            ];
            _source setDropInterval 0.005; // Más humo
        };		
        case "vehicleExplosion": {
            _source setParticleParams [
                ["\A3\data_f\ParticleEffects\Universal\Universal", 16, 10, 32],
                "",
                "Billboard",
                1, 0.6,
                [0, 2, 0],
                [0, 15, 0],
                0, 1,
                0.3, 0.1,
                [2.5, 3.5, 1],
                [[1,0.6,0.2,1], [1,0.6,0.2,0]],
                [1],
                1, 0, "", "",
                _intensity
            ];
            _source setDropInterval 0.01;
        };
        case "burningDebris": {
            _source setParticleParams [
                ["\A3\data_f\ParticleEffects\Universal\Universal", 16, 8, 32],
                "",
                "Billboard",
                1, 1,
                [0, 2, 0],
                [0, 3, 0],
                0, 0.5,
                0.1, 0.1,
                [1, 1.5, 0.5],
                [[1,0.3,0.1,1], [1,0.3,0.1,0]],
                [0.5],
                1, 0, "", "",
                _intensity
            ];
            _source setDropInterval 0.015;
        };
    };

    _source
};

// --- DEMO de ejecución local para probar efectos en el jugador ---

private _pos = getPosASL player;

["explosionSmall", _pos, 1, 2] call _createEffect;
["sparkBurst", _pos, 1, 2] call _createEffect;
["blackSmoke", _pos, 1, 6] call _createEffect;
["vehicleExplosion", _pos, 1, 2] call _createEffect;
["burningDebris", _pos, 1, 2] call _createEffect;

true;

/*
    Script: fn_WarFXPE_AllEffects.sqf
    Descripción:
        Este script replica todos los efectos visuales de WarFXPE, integrándolos en tu misión sin necesidad de usar addons.
        Incluye todas las configuraciones de CfgCloudlets, CfgLights y EventHandlers convertidas para su uso desde carpeta de misión.

    Uso:
        Añadir a init.sqf:
            [] execVM "scripts/fn_WarFXPE_AllEffects.sqf";
*/

// --- Configuraciones globales ---

private _createEffect = {
    params ["_type", "_position", ["_intensity", 1], ["_lifeTime", 3]];

    private _source = createVehicle ["#particlesource", _position, [], 0, "CAN_COLLIDE"];

    switch (_type) do {
        case "explosionSmall": {
            _source setParticleParams [["\A3\data_f\ParticleEffects\Universal\Universal", 16, 12, 8], "", "Billboard", 1, 1, [0, 2, 0], [0, 5, 0], 0, 0.5, 0.2, 0.1, [1.5, 2, 1], [[1,1,1,1], [1,1,1,0]], [1], 1, 0, "", "", _intensity];
            _source setDropInterval 0.05;
        };
        case "sparkBurst": {
            _source setParticleParams [["\A3\data_f\ParticleEffects\Universal\Universal", 16, 12, 8], "", "Billboard", 1, 0.5, [0, 5, 0], [0, 10, 0], 0, 1, 0.1, 0.2, [0.5, 0.3, 0.1], [[1,1,0.6,1], [1,1,0.6,0]], [0.1], 1, 0, "", "", _intensity];
            _source setDropInterval 0.05;
        };
        case "blackSmoke": {
            _source setParticleParams [["\A3\data_f\ParticleEffects\Universal\Universal_02", 8, 0, 40], "", "Billboard", 1, _lifeTime, [0, 1, 0], [0, 2, 0], 0, 0.5, 0.1, 0.1, [1.5, 3, 6], [[0.1,0.1,0.1,0.5],[0.1,0.1,0.1,0.4],[0.1,0.1,0.1,0]], [1], 1, 0, "", "", _intensity];
            _source setDropInterval 0.09;
        };
        case "vehicleExplosion": {
            _source setParticleParams [["\A3\data_f\ParticleEffects\Universal\Universal", 16, 10, 32], "", "Billboard", 1, 0.6, [0, 2, 0], [0, 15, 0], 0, 1, 0.3, 0.1, [2.5, 3.5, 1], [[1,0.6,0.2,1], [1,0.6,0.2,0]], [1], 1, 0, "", "", _intensity];
            _source setDropInterval 0.05;
        };
        case "burningDebris": {
            _source setParticleParams [["\A3\data_f\ParticleEffects\Universal\Universal", 16, 8, 32], "", "Billboard", 1, 1, [0, 2, 0], [0, 3, 0], 0, 0.5, 0.1, 0.1, [1, 1.5, 0.5], [[1,0.3,0.1,1], [1,0.3,0.1,0]], [0.5], 1, 0, "", "", _intensity];
            _source setDropInterval 0.025;
        };
        case "firePillar": {
            _source setParticleParams [["\A3\data_f\ParticleEffects\Universal\Universal", 16, 2, 32], "", "Billboard", 1, 3, [0, 0, 0], [0, 6, 0], 0, 1, 0.2, 0.2, [1.2, 1.5, 0.8], [[1,0.5,0.2,1], [1,0.5,0.2,0.2], [1,0.5,0.2,0]], [1], 1, 0, "", "", _intensity];
            _source setDropInterval 0.04;
        };
        case "impactSmoke": {
            _source setParticleParams [["\A3\data_f\ParticleEffects\Universal\Universal_02", 8, 0, 32], "", "Billboard", 1, 2, [0, 0, 0], [0, 1.5, 0], 0, 0.5, 0.2, 0.2, [0.5, 2, 3], [[0.1,0.1,0.1,0.5],[0.1,0.1,0.1,0]], [1], 1, 0, "", "", _intensity];
            _source setDropInterval 0.08;
        };
    };

    _source
};

// --- DEMO de ejecución local para probar efectos en el jugador ---

private _pos = getPosASL player;

["explosionSmall", _pos, 1, 2] call _createEffect;
["sparkBurst", _pos, 1, 2] call _createEffect;
["blackSmoke", _pos, 1, 12] call _createEffect;
["vehicleExplosion", _pos, 1, 2] call _createEffect;
["burningDebris", _pos, 1, 4] call _createEffect;
["firePillar", _pos, 1, 9] call _createEffect;
["impactSmoke", _pos, 1, 300] call _createEffect;

true;


// ======================================================

// fx_init.sqf - WarFXPE convertido a scripts de misión (Parte 1)
// Nota: se reemplazaron rutas personalizadas por rutas vanilla cuando fue necesario.

private _createEffect = {
	params ["_type", "_position", "_intensity", "_lifeTime", "_interval"];

	private _particleParams = missionNamespace getVariable [_type, []];
	if (_particleParams isEqualTo []) exitWith {};

	private _effect = "#particlesource" createVehicleLocal _position;
	_effect setParticleParams _particleParams;
	_effect setParticleRandom [
		_particleParams select 21,
		_particleParams select 22,
		_particleParams select 23,
		_particleParams select 24,
		_particleParams select 25,
		_particleParams select 26,
		_particleParams select 27,
		_particleParams select 28,
		_particleParams select 29
	];
	_effect setDropInterval _interval;
	_effect
};

// ========= REGISTRO DE PARÁMETROS DE PARTÍCULAS =========
// gokoFX_Starter_SparksBurstLOW
missionNamespace setVariable ["gokoFX_Starter_SparksBurstLOW", [
	"\A3\data_f\ParticleEffects\Universal\Universal", 16, 13, 2, 0, 360, [], "Billboard",
	3, 0.015, [ "surfNormalX * inSpeed / 250 * 1.33", "surfNormalY * inSpeed / 250 * 1.33", "surfNormalZ * inSpeed / 250" ],
	1, 1000, 0.0099999998, 0.15000001, [0.1,0.035,0], [[1,0.8,0.8,-500],[1,0.3,0.1,-500]],
	[1], 1, 1, 1, [1,1,1,1], [250,180,10,0], 0,
	[0,0,0], [0.01,0.01,0.01], 0, 0.4, [0.05,0.05,0.05,5], 0.09, 2.3
]];

// gokoFX_Starter_SparksBurstMed
missionNamespace setVariable ["gokoFX_Starter_SparksBurstMed", [
	"\A3\data_f\ParticleEffects\Universal\Universal", 16, 13, 2, 0, 360, [], "Billboard",
	3, 0.015, [ "surfNormalX * inSpeed / 250 * 1.33", "surfNormalY * inSpeed / 250 * 1.33", "surfNormalZ * inSpeed / 250" ],
	1, 1000, 0.0099999998, 0.15000001, [0.1,0.035,0], [[1,0.3,0.1,-500],[1,0.3,0.1,-500]],
	[1], 1, 1, 1, [1,1,1,1], [235,235,250,0], 0,
	[0,0,0], [0.01,0.01,0.01], 0, 0.4, [0.05,0.05,0.05,5], 0.09, 2.3
]];

// gokoFX_Starter_SparksBurst
missionNamespace setVariable ["gokoFX_Starter_SparksBurst", [
	"\A3\data_f\ParticleEffects\Universal\Universal", 16, 13, 2, 0, 360, [], "Billboard",
	3, 0.015, [ "surfNormalX * inSpeed / 250 * 0.66", "surfNormalY * inSpeed / 250 * 0.66", "surfNormalZ * inSpeed / 250 * 0.66" ],
	1, 1000, 0.0099999998, 0.15000001, [0.075,0.015,0], [[1,0.3,0.1,-500],[1,0.3,0.1,-500]],
	[1], 1, 1, 1, [1,1,1,1], [250,80,25,0], 0,
	[0,0,0], [0.1,0.1,0.1], 0, 0.5, [0.05,0.05,0.05,5], 0.1, 0.2
]];

// gokoFX_Starter_SparksBurst1
missionNamespace setVariable ["gokoFX_Starter_SparksBurst1", [
	"\A3\data_f\ParticleEffects\Universal\Universal", 16, 13, 2, 0, 360, [], "Billboard",
	3, 0.015, [ "surfNormalX * inSpeed / 250 * 0.66", "surfNormalY * inSpeed / 250 * 0.66", "surfNormalZ * inSpeed / 250 * 0.66" ],
	1, 1000, 0.0099999998, 0.15000001, [0.075,0.015,0], [[1,0.3,0.1,-500],[1,0.3,0.1,-500]],
	[1], 1, 1, 1, [1,1,1,1], [250,225,160,0], 0,
	[0,0,0], [0.1,0.1,0.1], 0, 0.5, [0.05,0.05,0.05,5], 0.1, 0.2
]];

// gokoFX_Starter_SparksBurst2
missionNamespace setVariable ["gokoFX_Starter_SparksBurst2", [
	"\A3\data_f\ParticleEffects\Universal\Universal", 16, 13, 2, 0, 360, [], "Billboard",
	3, 0.015, [ "surfNormalX * inSpeed / 250", "surfNormalY * inSpeed / 250", "surfNormalZ * inSpeed / 250" ],
	1, 1000, 0.0099999998, 0.15000001, [0.175,0.015,0], [[1,1,0.9,-500],[1,0.3,0.1,-500]],
	[1], 1, 1, 1, [1,1,1,1], [252,255,128,0], 0,
	[0,0,0], [ "surfNormalX * inSpeed / 250", "surfNormalY * inSpeed / 250", "surfNormalZ * inSpeed / 250" ], 1, 0.5,
	[0.05,0.05,0.05,5], 0.5, 2
]];

// fx_init.sqf - Parte 2: continuación de parámetros para efectos WarFXPE

// gokoFX_Starter_SparksStream
missionNamespace setVariable ["gokoFX_Starter_SparksStream", [
	"\A3\data_f\ParticleEffects\Universal\Universal", 16, 13, 2, 0, 360, [], "Billboard",
	3, 0.15, [1,5,1],
	1, 1000, 0.0099999998, 0.15000001, [0.075,0.015,0], [[1,0.3,0.1,-500],[1,0.3,0.1,-500]],
	[1], 1, 1, 1, [1,1,1,1], [250,80,25,0], 0,
	[0,0,0], [ "surfNormalX * inSpeed / 250 * 0.66", "surfNormalY * inSpeed / 250 * 0.66", "surfNormalZ * inSpeed / 250 * 0.66" ],
	0.1, 0.1, [0.05,0.05,0.05,5], 0.1, 0.2
]];

// gokoFX_Starter_SparksOmni
missionNamespace setVariable ["gokoFX_Starter_SparksOmni", [
	"\A3\data_f\ParticleEffects\Universal\Universal", 16, 13, 2, 0, 360, [], "Billboard",
	3, 0.05, [ "surfNormalX * inSpeed / 200", "surfNormalY * inSpeed / 200", "surfNormalZ * inSpeed / 200" ],
	1, 1000, 0.0099999998, 0.15000001, [0.175,0.015,0], [[1,1,0.9,-500],[1,0.3,0.1,-500]],
	[1], 1, 1, 1, [1,1,1,1], [252,255,128,0], 0,
	[0,0,0], [ "surfNormalX * inSpeed / 200", "surfNormalY * inSpeed / 200", "surfNormalZ * inSpeed / 200" ],
	0.1, 0.1, [0.05,0.05,0.05,5], 0.5, 2
]];

// gokoFX_Starter_SparksOmniSparkle
missionNamespace setVariable ["gokoFX_Starter_SparksOmniSparkle", [
	"\A3\data_f\ParticleEffects\Universal\Universal", 16, 13, 2, 0, 360, [], "Billboard",
	3, 0.05, [1,1,1],
	1, 1000, 0.0099999998, 0.15000001, [0.15,0.05,0], [[1,1,0.9,-500],[1,0.3,0.1,-500]],
	[1], 1, 1, 1, [1,1,1,1], [252,255,128,0], 0,
	[0,0,0], [0.1,-1,0.1], 0.1, 0.5, [0.05,0.05,0.05,5], 0.5, 2
]];

// gokoFX_Starter_SparksOmniSparklings
missionNamespace setVariable ["gokoFX_Starter_SparksOmniSparklings", [
	"\A3\data_f\ParticleEffects\Universal\Universal", 16, 13, 2, 0, 360, [], "Billboard",
	3, 0.003, [0.7,0.7,0.1],
	1, 1000, 0.0099999998, 0.15000001, [0.075,0.015,0], [[1,0.3,0.1,-500],[1,0.3,0.1,-500]],
	[1], 1, 1, 1, [1,1,1,1], [250,225,160,0], 0,
	[0,0,0], [2,2,0.3], 0.2, 0.3, [0.05,0.05,0.05,5], 0.1, 0.2
]];

// gokoFX_Starter_SparksDrop2
missionNamespace setVariable ["gokoFX_Starter_SparksDrop2", [
	"\A3\data_f\ParticleEffects\Universal\Universal", 16, 13, 2, 0, 360, [], "Billboard",
	3, 0.5, [-0.1,-1,-0.1],
	1, 1000, 0.0099999998, 0.15000001, [0.075,0.015,0], [[1,0.3,0.1,-500],[1,0.3,0.1,-500]],
	[1], 1, 1, 1, [1,1,1,1], [250,80,25,0], 0,
	[0,0,0], [0.2,2,0.2], 0, 0, [0.05,0.05,0.05,5], 0.1, 0.2
]];

// gokoFX_Starter_SparksDrop
missionNamespace setVariable ["gokoFX_Starter_SparksDrop", [
	"\A3\data_f\ParticleEffects\Universal\Universal", 16, 13, 2, 0, 360, [], "Billboard",
	3, 0.05, [0.3,-2,0.3],
	1, 1000, 0.0099999998, 0.15000001, [0.075,0.015,0], [[1,0.3,0.1,-500],[1,0.3,0.1,-500]],
	[1], 1, 1, 1, [1,1,1,1], [250,80,25,0], 0,
	[0,0,0], [0.3,0,0.3], 0.1, 0.2, [0.05,0.05,0.05,5], 0.1, 0.2
]];

// gokoFX_Starter_SparksDropLightFire
missionNamespace setVariable ["gokoFX_Starter_SparksDropLightFire", [
	"\A3\data_f\ParticleEffects\Universal\Universal", 16, 13, 2, 0, 360, [], "Billboard",
	3, 0.1, [1,0,1],
	1, 1000, 0.0099999998, 0.15000001, [0.25,0.1,0], [[1,0.3,0.1,-500],[1,0.3,0.1,-500]],
	[1], 1, 1, 1, [1,1,1,1], [250,80,25,0], 0,
	[0,0,0], [1,0,1], -1, 0, [0.05,0.05,0.05,5], 0.1, 0.2
]];

// fx_init.sqf - Parte 3: efectos de humo, impactos y cráteres de WarFXPE

// 30mmSmoke
missionNamespace setVariable ["30mmSmoke", [
	"\A3\data_f\ParticleEffects\Universal\smoke_2", 1, 0, 1, 0, 360, [], "Billboard",
	1, 8, [0,0,0],
	0, 10.1, 7.7, 8, [2,4],
	[
		[0.6,0.5,0.4,0.5],
		[0.6,0.5,0.4,0.4],
		[0.6,0.5,0.4,0.3],
		[0.6,0.5,0.4,0.2],
		[0.6,0.5,0.4,0]
	],
	[1], 1, 1, 1, [1,1,1,1], [], 0,
	[0,0,0], [100,200,100], 5, 0.25, [0.05,0.05,0.05,0.1], 0.01, 0.01
]];

// 30mmSmokeCrater
missionNamespace setVariable ["30mmSmokeCrater", [
	"\A3\data_f\ParticleEffects\Universal\smoke", 1, 0, 1, 0, 1, [], "Billboard",
	1, 4, [0,1,0],
	1, 0.052999999, 0.039999999, 0.2,
	["3 * intensity + 3.5", "2 * intensity + 4.5", "1 * intensity + 3", "2 * intensity + 6"],
	[
		[0.6,0.6,0.6,0.2],
		[0.7,0.7,0.7,0.3],
		[0.8,0.8,0.8,0.15],
		[0.9,0.9,0.9,0.1],
		[1,1,1,0]
	],
	[1.7,0.6,0.4,0.3,0.3], 1, 1, 1, [1,1,1,1], [], 0,
	[0,0,0], [1.5,2,1.5], 5, 0.5, [0,0,0,0], 0, 0
]];

// ImpactConcrete
missionNamespace setVariable ["ImpactConcrete", [
	"\A3\data_f\ParticleEffects\pstone\pstone.p3d", 1, 0, 1, 0, 0, [], "spaceobject",
	0.1, 1, [
		"(surfNormalX / 2) * inSpeed / 150 * 0.66",
		"(surfNormalY / 2) * inSpeed / 150 * 0.66",
		"(surfNormalZ / 2) * inSpeed / 150 * 0.66"
	],
	1, 5, 2, 0.03, [0.05],
	[
		[1,1,1,1],
		[1,1,1,1],
		[1,1,1,1]
	],
	[1], 1, 1, 1, [1,1,1,1], [], 0,
	[0,0,0], [0.5,4,0.5], 1, 0.5, [0,0,0,0], 0, 0
]];

// ImpactSmokeSmall
missionNamespace setVariable ["ImpactSmokeSmall", [
	"\A3\data_f\ParticleEffects\Universal\smoke", 1, 0, 1, 0, 360, [], "Billboard",
	1, 1, [0,4,0],
	1, 0.056, 0.04, 0.45, [0.2,1,2],
	[
		[0.08,0.067,0.052,0.4],
		[0.6,0.5,0.4,0.3],
		[0.6,0.5,0.4,0.2],
		[0.6,0.5,0.4,0.1],
		[0.6,0.5,0.4,0.05],
		[0.6,0.5,0.4,0]
	],
	[1], 1, 1, 1, [1,1,1,1], [], 0,
	[0,0,0], [0.1,0.5,0.1], 1, 0.5, [0,0,0,0], 0, 0
]];

// ImpactConcreteSmall01
missionNamespace setVariable ["ImpactConcreteSmall01", [
	"\A3\data_f\ParticleEffects\Universal\smoke_1", 1, 0, 1, 0, 360, [], "Billboard",
	5, 0.15, [
		"(surfNormalX / 2) * inSpeed / 350 * 5",
		"(surfNormalY / 2) * inSpeed / 350 * 5",
		"(surfNormalZ / 2) * inSpeed / 350 * 5"
	],
	0, 10.1, 7.9, 2, [0.25,2],
	[
		[0.8,0.8,0.8,0.05],
		[0.8,0.8,0.8,0]
	],
	[1], 1, 1, 1, [1,1,1,1], [], 0,
	[0,0,0], [
		"(surfNormalX / 2) * inSpeed / 350 * 2.5",
		"(surfNormalY / 2) * inSpeed / 350 * 2.5",
		"(surfNormalZ / 2) * inSpeed / 350 * 2.5"
	], 10, 0.2, [0.01,0.01,0.01,0.2], 0, 0
]];

// fx_init.sqf - Parte 4: efectos de impactos medianos WarFXPE

// ImpactConcreteSmall02
missionNamespace setVariable ["ImpactConcreteSmall02", [
	"\A3\data_f\ParticleEffects\Universal\smoke_2", 1, 0, 1, 0, 360, [], "Billboard",
	3, 1, [
		"(surfNormalX / 2) * inSpeed / 350 * 1",
		"(surfNormalY / 2) * inSpeed / 350 * 1",
		"(surfNormalZ / 2) * inSpeed / 350 * 1"
	],
	0, 10.1, 7.9, 0.6, [0.2,1],
	[
		[0.8,0.8,0.8,0.1],
		[0.8,0.8,0.8,0]
	],
	[1], 1, 1, 1, [1,1,1,1], [], 0,
	[0,0,0], [
		"(surfNormalX / 2) * inSpeed / 350 * 2",
		"(surfNormalY / 2) * inSpeed / 350 * 2",
		"(surfNormalZ / 2) * inSpeed / 350 * 2"
	], 10, 0.25, [0.02,0.02,0.02,0.02], 0, 0
]];

// ImpactConcreteSmall03
missionNamespace setVariable ["ImpactConcreteSmall03", [
	"\A3\data_f\ParticleEffects\Universal\smoke_2", 1, 0, 1, 0, 360, [], "Billboard",
	3, 2.8, [0,0,0],
	0, 10.1, 7.9, 0.6, [0.2,2],
	[
		[0.8,0.8,0.8,0.06],
		[0.8,0.8,0.8,0]
	],
	[1], 1, 1, 1, [1,1,1,1], [], 0,
	[0.25,0.25,0.25], [0.25,0.25,0.25], 10, 0.25, [0.02,0.02,0.02,0.02], 0, 0
]];

// ImpactBulletSmall04
missionNamespace setVariable ["ImpactBulletSmall04", [
	"\A3\data_f\ParticleEffects\Universal\smoke_2", 1, 0, 1, 0, 360, [], "Billboard",
	3, 0.3, [0,0,0],
	0, 10.1, 7.9, 0.6, [0.04,0.8],
	[
		[0.7,0.6,0.5,0.2],
		[0.7,0.6,0.5,0]
	],
	[1], 1, 1, 1, [1,1,1,1], [], 0,
	[0.25,0.25,0.25], [0.25,0.25,0.25], 10, 0.25, [0.02,0.02,0.02,0.02], 0, 0
]];

// ImpactBulletSmall05
missionNamespace setVariable ["ImpactBulletSmall05", [
	"\A3\data_f\ParticleEffects\Universal\smoke_1", 1, 0, 1, 0, 360, [], "Billboard",
	5, 0.15, [
		"(surfNormalX / 2) * inSpeed / 350 * 5",
		"(surfNormalY / 2) * inSpeed / 350 * 5",
		"(surfNormalZ / 2) * inSpeed / 350 * 5"
	],
	0, 10.1, 7.9, 2, [0.05,2],
	[
		[0.7,0.6,0.5,0.2],
		[0.7,0.6,0.5,0]
	],
	[1], 1, 1, 1, [1,1,1,1], [], 0,
	[0,0,0], [
		"(surfNormalX / 2) * inSpeed / 350 * 2.5",
		"(surfNormalY / 2) * inSpeed / 350 * 2.5",
		"(surfNormalZ / 2) * inSpeed / 350 * 2.5"
	], 10, 0.2, [0.01,0.01,0.01,0.2], 0, 0
]];

// ImpactBulletSmall06
missionNamespace setVariable ["ImpactBulletSmall06", [
	"\A3\data_f\ParticleEffects\Universal\smoke_2", 1, 0, 1, 0, 360, [], "Billboard",
	3, 0.7, [
		"(surfNormalX / 2) * inSpeed / 350 * 1",
		"(surfNormalY / 2) * inSpeed / 350 * 1",
		"(surfNormalZ / 2) * inSpeed / 350 * 1"
	],
	0, 10.1, 7.9, 0.6, [0.05,1],
	[
		[0.7,0.6,0.5,0.2],
		[0.7,0.6,0.5,0]
	],
	[1], 1, 1, 1, [1,1,1,1], [], 0,
	[0,0,0], [
		"(surfNormalX / 2) * inSpeed / 350 * 2",
		"(surfNormalY / 2) * inSpeed / 350 * 2",
		"(surfNormalZ / 2) * inSpeed / 350 * 2"
	], 10, 0.25, [0.02,0.02,0.02,0.02], 0, 0
]];

// fx_init.sqf - Parte 5: efectos grandes de impacto y humo persistente

// ImpactBulletBig01
missionNamespace setVariable ["ImpactBulletBig01", [
	"\A3\data_f\ParticleEffects\Universal\smoke_1", 1, 0, 1, 0, 360, [], "Billboard",
	5, 0.15, [0,0,0],
	0, 10.1, 7.9, 2, [0.5,2],
	[
		[0.7,0.6,0.5,0.05],
		[0.7,0.6,0.5,0]
	],
	[1], 1, 1, 1, [1,1,1,1], [], 0,
	[0,0,0], [1,1,1], 10, 0.2, [0.01,0.01,0.01,0.2], 0, 0
]];

// ImpactBulletBig02
missionNamespace setVariable ["ImpactBulletBig02", [
	"\A3\data_f\ParticleEffects\Universal\smoke_2", 1, 0, 1, 0, 360, [], "Billboard",
	5, 3, [0,0,0],
	0, 10.1, 7.9, 2, [0.25,4],
	[
		[0.7,0.6,0.5,0.05],
		[0.7,0.6,0.5,0]
	],
	[1], 1, 1, 1, [1,1,1,1], [], 0,
	[0,0,0], [0.5,0.5,0.5], 10, 0.2, [0.01,0.01,0.01,0.2], 0, 0
]];

// ImpactConcrete2
missionNamespace setVariable ["ImpactConcrete2", [
	"\A3\data_f\ParticleEffects\pstone\pstone.p3d", 1, 0, 1, 0, 0, [], "spaceobject",
	0.1, 1, [
		"(outDirX / 1) * outSpeed / 10 * 0.06",
		"(outDirY / 5) * outSpeed / 150 * 0.66",
		"(outDirZ / 1) * outSpeed / 10 * 0.06"
	],
	1, 5, 2, 0.03, [0.06,0.12],
	[
		[1,1,1,1],
		[1,1,1,1],
		[1,1,1,1]
	],
	[1], 1, 1, 1, [1,1,1,1], [], 0,
	[0.05,0.05,0.05], [1,4,1], 1, 0.4, [0,0,0,0], 0, 0
]];

// 25mm_Smoke_01
missionNamespace setVariable ["25mm_Smoke_01", [
	"\A3\data_f\ParticleEffects\Universal\smoke_1", 1, 0, 1, 0, 360, [], "Billboard",
	1, 5, [0,0,0],
	0, 10, 7.9, 5, [1,5],
	[
		[0.1,0.1,0.1,0.5],
		[0.1,0.1,0.1,0]
	],
	[1], 1, 1, 1, [1,1,1,1], [], 0,
	[0,0,0], [2.5,2.5,2.5], 5, 0, [0,0,0,0], 0, 0
]];

// 25mm_Smoke_02
missionNamespace setVariable ["25mm_Smoke_02", [
	"\A3\data_f\ParticleEffects\Universal\smoke_2", 1, 0, 1, 0, 360, [], "Billboard",
	1, 5, [0,0,0],
	0, 10.1, 7.9, 4, [1,10],
	[
		[0.6,0.5,0.4,0.4],
		[0.6,0.5,0.4,0]
	],
	[1], 1, 1, 1, [1,1,1,1], [], 0,
	[0.1,0.1,0.1], [5,5,5], 10, 0, [0,0,0,0], 0, 0
]];

// fx_init.sqf - Parte 6: eventos de impacto compuestos

// Función para aplicar múltiples efectos en un impacto
private _applyImpactEffects = {
	params ["_effectList", "_position"];
	{
		_x params ["_type", "_intensity", "_interval", "_lifeTime"];
		[_type, _position, _intensity, _lifeTime, _interval] call _createEffect;
	} forEach _effectList;
};

// Definiciones de conjuntos de impacto

missionNamespace setVariable ["Impact_30mmSmoke", [
	["25mm_Smoke_01", 0.1, 1, 0.2],
	["25mm_Smoke_02", 0.1, 1, 0.2]
]];

missionNamespace setVariable ["Impact_30mm_AP", [
	["ImpactBulletBig01", 0.1, 1, 0.25],
	["ImpactBulletBig02", 0.1, 1, 0.25]
]];

missionNamespace setVariable ["Impact_Small", [
	["ImpactBulletSmall04", 0.1, 1, 0.4],
	["ImpactBulletSmall05", 0.1, 1, 0.4],
	["ImpactBulletSmall06", 0.1, 1, 0.4]
]];

missionNamespace setVariable ["Impact_Plaster", [
	["ImpactDustPlaster", 0.1, 1, 1],
	["ImpactConcreteSmall01", 0.1, 1, 1],
	["ImpactConcreteSmall02", 0.1, 1, 1],
	["ImpactSmokeSmall", 0.1, 1, 1],
	["ImpactConcrete", 0.1, 1, 1]
]];

missionNamespace setVariable ["Impact_Concrete", [
	["ImpactConcreteSmall01", 0.1, 1, 0.4],
	["ImpactConcreteSmall02", 0.1, 1, 0.4],
	["ImpactConcreteSmall03", 0.1, 1, 0.4],
	["ImpactConcrete", 0.1, 1, 0],
	["ImpactConcrete2", 0.1, 1, 0]
]];

missionNamespace setVariable ["Impact_HardGround", [
	["ImpactSmokeSmall", 1, 1, 1],
	["ImpactConcrete", 1, 1, 1],
	["ImpactConcrete", 1, 1, 1]  // "Med" version duplicada
]];

// fx_init.sqf - Parte 7: efectos de impactos metálicos y compuestos

// ImpactMetal (efectos combinados para impactos en superficies metálicas)
missionNamespace setVariable ["Impact_Metal", [
	["ImpactSmokeSmall", 0.08, 1, 0.3],
	["gokoFX_Starter_SparksBurstLOW", 1, 0.1, 0.4],
	["gokoFX_Starter_SparksBurstMed", 1, 0.1, 0.6],
	["gokoFX_Starter_SparksOmni", 1, 10, 1],
	["gokoFX_Starter_SparksDrop2", 1, 1, 1],
	["gokoFX_Starter_SparksDrop", 1, 11, 1.5]
]];

// ⚠️ Luz para el impacto metálico no es partícula, se crea con light source:
private _createLight = {
	params ["_lightType", "_position", "_intensity", "_lifeTime"];
	private _light = "#lightpoint" createVehicleLocal _position;
	_light setLightColor [1, 0.6, 0.4];
	_light setLightBrightness _intensity;
	_light setLightAmbient [0, 0, 0];
	_light setLightAttenuation [0, 0, 0, 2.2, 500, 1000];
	_light setLightUseFlare true;
	_light setLightFlareSize 1;
	_light setLightFlareMaxDistance 500;
	_light setLightDayLight true;
	sleep _lifeTime;
	deleteVehicle _light;
};

// gokoFX_SparksSparkleEffect (efecto compuesto)
missionNamespace setVariable ["gokoFX_SparksSparkleEffect", [
	["gokoFX_Starter_SparksOmniSparklings", 1, 1, 0.03]
]];

// Información del autor del mod (solo documental)
missionNamespace setVariable ["WarFXPE_ModInfo", [
	["author", "NicolasZhaosi"],
	["timepacked", 1605220596]
]];

// ======================================================

// fx_effects.sqf – Efectos visuales y sonoros completamente vanilla para impactos en cabeza y HUD

// ========== FUNCIONES DE EFECTOS ========== //

fx_hmdSparks7 = {
	if (!hasInterface) exitWith {};
	private _object = _this;
	private _bArray = [];

	private _ps = "#particlesource" createVehicleLocal (getPosATL _object);
	_ps setParticleParams [
		["\A3\data_f\ParticleEffects\Universal\Universal_02", 8, 4, 1, 0],
		"", "Billboard", 0, 0, [0, 0, 0],
		[1 + random -2, 1 + random -2, 2 + random 1],
		1, 22, 1, 0.2,
		[0.01,0.01],
		[[1,0.5,0.1,0.08]],
		[1], 2, 0, "", "", ""
	];
	_ps setDropInterval 0.1;
	_ps attachTo [_object, [0,0.08,0.2], "head"];
	_bArray pushBack _ps;

	_bArray spawn {
		sleep 0.1;
		{ deleteVehicle _x } forEach _this;
	};
};

fx_hmdSparks8 = {
	if (!hasInterface) exitWith {};
	private _object = _this;
	private _bArray = [];

	private _ps = "#particlesource" createVehicleLocal (getPosATL _object);
	_ps setParticleParams [
		["\a3\Data_f\ParticleEffects\Universal\universal", 16, 5, 15, 16],
		"", "Billboard", 0.5, 6, [0, 0, 0],
		[0,1 + random -2,1],
		3,1.275,0.93,0.2,
		[0.01,0.05,0],
		[[1,1,1,0.5],[1,1,1,0.3],[1,1,1,0]],
		[6000], 0.1, 0.2, "", "", "", 0, false, 0.0
	];
	_ps setParticleRandom [0.5, [0, 0, 0], [0.25, 0.25, 0.25], 0, 0.5, [0, 0, 0, 0.1], 0, 0, 10];
	_ps setDropInterval 0.01;
	_ps attachTo [_object,[0,0.11,0.2], "head"];
	_bArray pushBack _ps;

	_bArray spawn {
		sleep random 0.5;
		{ deleteVehicle _x } forEach _this;
	};
};

fx_hmdGlassShatter = {
	if (!hasInterface) exitWith {};
	private _object = _this;
	private _pArray = [];
	for "_i" from 0 to (4 + floor random 6) do {
		private _ps = "#particlesource" createVehicleLocal (getPosATL _object);
		_ps setParticleParams [
			["\A3\data_f\ParticleEffects\Universal\GlassParts_03", 1, 0, 1],
			"", "SpaceObject", 1, 7, [0, 0, 0],
			[1+random -2, 0, random 2],
			2, 1, 0.1, 0.2,
			[0.05], [[1,1,1,1]],
			[0.1], 0.0, 0.0, "", "", "", 0, false, 0
		];
		_ps setParticleRandom [0, [0.1, 0.1, 0.0], [1.35, 1.35, 1.0], 0, 0.1, [0, 0, 0, 0], 0, 0];
		_ps setDropInterval 6000;
		_ps attachTo [_object,[0,0.08,0.17],"head"];
		_pArray pushBack _ps;
	};
};

fx_blackSmokeHelmet = {
	if (!hasInterface) exitWith {};
	private _object = _this;
	private _bArray = [];
	private _ps = "#particlesource" createVehicleLocal (getPosATL _object);
	_ps setParticleParams [
		["\a3\Data_f\ParticleEffects\Universal\universal", 16, 12, 12, 0],
		"", "Billboard", 0.5, 2.2, [0, 0, 0],
		[0, 0.0, 0.5 + random -0.8],
		1, 1.275, 1, 0.2,
		[0, 0.35, 0],
		[[0.01, 0.01, 0.01, 0.12], [0, 0, 0, 0.09], [0.10, 0.10, 0.10, 0]],
		[1000], 1, 0.04, "", "", "", 0, false, 0.0
	];
	_ps setParticleRandom [0.5, [0, 0, 0], [0.25, 0.25, 0.25], 0, 0.5, [0, 0, 0, 0.1], 0, 0, 10];
	_ps setDropInterval 0.01;
	_ps attachTo [_object, [0,0.11,0.2], "head"];
	_bArray pushBack _ps;
	_bArray spawn {
		sleep (1 + random 2);
		{ deleteVehicle _x } forEach _this;
	};
};

fx_smallHelmetParts = {
	if (!hasInterface) exitWith {};
	private _object = _this;
	private _pArray = [];
	for "_i" from 0 to random 10 do {
		private _ps = "#particlesource" createVehicleLocal (getPosATL _object);
		_ps setParticleParams [
			["\A3\data_f\ParticleEffects\shard\shard", 1, 0, 1],
			"", "SpaceObject", 1, 2, [0, 0, 0],
			[6 - random 12, 0, random 6],
			1, 1, 0.1, 1,
			[0.08, 0], [[1,1,1,1]],
			[0.1], 0, 0, "", "", "", 360, false, 0
		];
		_ps setParticleRandom [0, [0.1, 0.1, 0.1], [1, 1, 1], 0, 0.1, [0, 0, 0, 0], 0, 0];
		_ps setDropInterval 1000;
		_ps attachTo [_object,[0,0,0.18],"head"];
		_pArray pushBack _ps;
	};
};


/// getters and local variables setup
_getGlasses = goggles _unit;
_getHeadMountedDisplay = hmd _unit;
_getHeadgear = headgear _unit;
_headgearProtection = getNumber (configFile >> "CfgWeapons" >> _getHeadgear >> "ItemInfo" >> "HitpointsProtectionInfo" >> "Head" >> "armor");

_getInstigatorDirection = _instigator weaponDirection (currentWeapon _instigator) vectorMultiply 2 + random 3;
_velocityVector = _getInstigatorDirection vectorAdd [-1 + random 2, -1 + random 2, random 5];
_projectileCaliber = getNumber (configFile >> "CfgAmmo" >> _projectile >> "caliber");

/// Fórmulas según datos de weaponsCfg y ammoCfg para calcular potencia del proyectil
_caliberLowest = 0.869565;  // 5.56
_caliberHighest = 2.4;      // .408 cheetah m320
_minProtectionLevel = 4;    // nivel 1
_maxProtectionLevel = 12;   // nivel 5

_projectileForce = linearConversion [
	_caliberLowest,
	_caliberHighest,
	_projectileCaliber,
	_minProtectionLevel,
	_maxProtectionLevel
];

/// efectos de chispas para destrucción de visores
_hmdParticleEffects = selectRandom [
	"fx_hmdSparks7", "fx_hmdSparks8"
];

/// sonido vanilla (simulado) para visor destruido
_hmdSoundEffects = selectRandom [
	"A3\Sounds_F\weapons\Other\spark1.wss", 
	"A3\Sounds_F\weapons\Other\spark2.wss"
];

/// efectos al penetrar casco
_helmetParticleEffects = selectRandom [
	"fx_smallHelmetParts", "fx_blackSmokeHelmet"
];

/// efectos de sonido vanilla simulados para casco golpeado
_helmetPenetrateSoundEffects = selectRandom [
	"A3\Sounds_F\characters\hit_helmet_01.wss", 
	"A3\Sounds_F\characters\hit_helmet_02.wss"
];

_helmetHitSoundEffects = selectRandom [
	"A3\Sounds_F\characters\hit_helmet_03.wss", 
	"A3\Sounds_F\characters\hit_helmet_04.wss"
];

_headshotFleshEffects = selectRandom [
	"A3\Sounds_F\characters\hit_01.wss", 
	"A3\Sounds_F\characters\hit_02.wss"
];

/// efectos visuales de sangre simulados (vanilla)
_bloodParticleEffects = selectRandom [
	"BloodSplat", "BloodMist"
];

/// Efecto artístico si casco se destruye completamente
_artisticRemoval = selectRandom [
	"fx_hmdGlassShatter"
];

// Función principal para impactos en cabeza
fx_onHeadImpact = {
	params ["_unit", "_instigator", "_projectile"];

	private _headgear = headgear _unit;
	private _headgearProtection = getNumber (configFile >> "CfgWeapons" >> _headgear >> "ItemInfo" >> "HitpointsProtectionInfo" >> "Head" >> "armor");
	private _projectileCaliber = getNumber (configFile >> "CfgAmmo" >> _projectile >> "caliber");

	// Conversión lineal para calcular fuerza relativa del impacto
	private _force = linearConversion [
		0.869565, // Calibre mínimo: 5.56mm
		2.4,      // Calibre máximo: .408 cheetah
		_projectileCaliber,
		4,        // Protección mínima
		12        // Protección máxima
	];

	// ¿El casco protegió?
	private _penetrated = _headgearProtection < _force;

	if (_penetrated) then {
		private _effect = selectRandom ["fx_blackSmokeHelmet", "fx_smallHelmetParts"];
		[_unit] call (missionNamespace getVariable _effect);

		private _sound = selectRandom [
			"A3\\Sounds_F\\characters\\hit_helmet_01.wss",
			"A3\\Sounds_F\\characters\\hit_helmet_02.wss",
			"A3\\Sounds_F\\characters\\hit_helmet_03.wss"
		];
		_unit say3D _sound;

		private _bloodEffect = selectRandom ["BloodMist", "BloodSplat"];
		drop [
			_bloodEffect,
			"",
			"Billboard",
			0.1, 1.5,
			getPos _unit,
			[0,0,0.5],
			0,1,1,0.1,
			[0.3],
			[[1,0,0,1]],
			[1],
			0,
			0,
			"",
			"",
			""
		];
	} else {
		private _sparkEffect = selectRandom ["fx_hmdSparks7", "fx_hmdSparks8"];
		[_unit] call (missionNamespace getVariable _sparkEffect);

		private _soundRicochet = selectRandom [
			"A3\\Sounds_F\\arsenal\\weapons\\Shells\\Shell_ricochet_01.wss",
			"A3\\Sounds_F\\arsenal\\weapons\\Shells\\Shell_ricochet_02.wss"
		];
		_unit say3D _soundRicochet;
	};
};

// ======================================================

fn_goko_ballistic_impact_main =
{
	params [
		"_unit",
		"_selection",
		"_damage",
		"_source", 
		"_projectile",
		"_hitIndex", 
		"_instigator", 
		"_hitPoint"
	];

	if (!gokobi_var_onoffswitch || _hitIndex != 2 || _damage < 0.9) exitWith {};
	if(_getGlasses != "") then
	{
		removeGoggles _unit;
		_unit remoteExecCall ["gokoBI_particleFX_brokenGlassParticles"];
		_unit remoteExecCall ["gokoBI_particleFX_smallHelmetParts"];
	};
	if (_getHeadMountedDisplay != "") then
	{
		_unit unassignItem _getHeadMountedDisplay;
		_unit removeItem _getHeadMountedDisplay;
		playsound3d [format ["%1",_hmdSoundEffects], _unit, false, getPosASL _unit, 0.8, 1, 70];
		[_unit, _velocityVector] remoteExecCall ["gokoBI_particleFX_cheesyDestruct"];
		_unit remoteExecCall [_hmdParticleEffects];
		_unit remoteExecCall ["gokoBI_particleFX_blackSmoke"];
	};
	if (_headgearProtection != 0) then 
	{
		if (gokobi_var_debug) then { systemChat format ["Protection: %1  Caliber penetration capacity: %2", _headgearProtection, floor _projectileForce] };
		if ( floor _projectileForce > _headgearProtection && _projectileCaliber >= gokobi_var_AllowedCaliber) then 
		{
			[_unit, _velocityVector] remoteExecCall [_helmetParticleEffects];
			_unit remoteExecCall [_bloodParticleEffects];
			playsound3d [format ["%1",_helmetPenetrateSoundEffects], _unit, false, getPosASL _unit, 2, 1, 80];
			
			if (_projectileCaliber >= _caliberHighest) then 
			{
				_unit remoteExecCall [_goreParticleEffects];
				_unit remoteExecCall ["gokoBI_particleFX_helmetTrashed"];
				removeHeadgear _unit;
			} 
			else 
			{ 
				_unit remoteExecCall [_goreParticleEffects];
				[_unit, _velocityVector] remoteExecCall [_artisticRemoval]; 
				removeHeadgear _unit 
			};
		} 
		else 
		{
			_unit remoteExecCall ["gokoBI_particleFX_smallHelmetParts"];
			playsound3d [format ["%1",_helmetHitSoundEffects], _unit, false, getPosASL _unit, 3, 1, 50];			
		};
	} 
	else 
	{
		if (!alive _unit) exitWith{};
		[_unit, _velocityVector] remoteExecCall ["gokoBI_particleFX_FlyOff"];
		playsound3d [format ["%1",_headshotFleshEffects], _unit, false, getPosASL _unit, 1, 1, 70];
		_unit remoteExecCall [_bloodParticleEffects];
		removeHeadgear _unit;	
	};
};


gokoBI_particleFX_bloodSpit =   
{         
	if (!hasInterface) exitWith {};     
	_object = _this;                 
	_bArray = [];                 
	_blood = "#particlesource" createVehicleLocal (getposATL _object);                  
	_blood setParticleClass "gokoFX_Starter_SparksBurstLOW";          

	_blood setParticleParams [
		["\a3\Data_f\ParticleEffects\Universal\Universal", 16, 13, 1, 16],   //model name            
		"",   //animation            
		"billboard", //type            
		0.1, 0.05, //period and lifecycle            
		[0, 0, 0], //position            

		[0.5 + random -1, 0.5 + random -1, 1], //movement vector            
		1, 1, 0.3, 0, //rotation, weight, volume , rubbing            
		[0.25, 0.45], //size transform            
		[[0.1,0,0,0.001], [0.04,0,0,0.05], [1,1,1,0]],    
		[0.00001],    
		0.4,    
		0.4,    
		"",    
		"",    
		"",   
		360, //angle             
		false, //on surface             
		0 //bounce on surface     
	];     
	_blood setdropinterval 0.001;            
	_blood attachTo [_object,[0,0,-0.1],"neck"];                  

	_bArray pushback _blood;                 

	_bArray spawn                  
	{
		_bArray = _this;                 
		sleep 0.2;                 
		{ deleteVehicle _x } foreach _bArray;                 
	};              
};   

gokoBI_particleFX_bloodSpray1 = 
{       
	if (!hasInterface) exitWith {};   
	_object = _this;               
	_bArray = [];               
	_blood = "#particlesource" createVehicleLocal (getposATL _object);                
	_blood setParticleClass "goko_helmetparts";        

	_blood setParticleParams [
		["\a3\Data_f\ParticleEffects\Universal\Universal", 16, 13, 1, 32],   //model name          
		"",   //animation          
		"billboard", //type          
		0.2, 2, //period and lifecycle          
		[0, 0, 0], //position          

		[4 + random -8, 2 + random -4, random 8], //movement vector          
		5, 1, 0.4, 0.4, //rotation, weight, volume , rubbing          
		[0.1, 1.6], //size transform          
		[[0.1,0,0,0.6], [0.04,0,0,-0.9], [0.1,0,0,-0.03]],  
		[0.00001],  
		0.4,  
		0.4,  
		"",  
		"",  
		"", 
		360, //angle           
		false, //on surface           
		0 //bounce on surface   
	];   
	_blood setdropinterval 0.01;          
	_blood attachTo [_object,[0,0,0],"neck"];                

	_bArray pushback _blood;               

	_bArray spawn                
	{               
		_bArray = _this;               
		sleep random 0.5;               
		{ deleteVehicle _x } foreach _bArray;               
	};            
};   

gokoBI_particleFX_bloodSpray2 =  
{      
	if (!hasInterface) exitWith {};       
	_object = _this;                 
	_bArray = [];                 
	_blood = "#particlesource" createVehicleLocal (getposATL _object);                  
	_blood setParticleClass "goko_helmetparts";          
	_blood setParticleParams [ 
		["\a3\Data_f\ParticleEffects\Universal\Universal", 16, 13, 1, 32],   //model name            
		"",   //animation            
		"billboard", //type            
		0.2, 2, //period and lifecycle            
		[0, 0, 0], //position            

		[3 + random -6, 3 + random -6, random 8], //movement vector            
		5, 1, 0.4, 0.4, //rotation, weight, volume , rubbing            
		[0.05, 1.4], //size transform            
		[[0.5,0,0,0.6], [0.8,0,0,0.1], [0.1,0,0,0.03]],    
		[0.00001],    
		0.4,    
		0.4,    
		"",    
		"",    
		"",   
		360, //angle             
		false, //on surface             
		0 //bounce on surface     
	];     
	_blood setdropinterval 0.01;            
	_blood attachTo [_object,[0,0,0],"neck"];                  
	_bArray pushback _blood;                 
	_bArray spawn                  
	{                 
		_bArray = _this;                 
		sleep random 0.5;                 
		{ deleteVehicle _x } foreach _bArray;                 
	};              
};   

gokoBI_particleFX_bloodSpray3 = 
{     
	if (!hasInterface) exitWith {};    
	_object = _this;              
	_bArray = [];              
	_blood = "#particlesource" createVehicleLocal (getposATL _object);               
	_blood setParticleClass "goko_helmetparts";       
	_blood setParticleParams [
		["\a3\Data_f\ParticleEffects\Universal\Universal_02", 8, 4, 1, 0],   //model name         
		"",   //animation         
		"billboard", //type         
		0, 1, //period and lifecycle         
		[0, 0, 0], //position         

		[1.2 +random -2.4, 1.2 +random -2.4, 2 + random 1], //movement vector         
		1, 22, 1, 0.2, //rotation, weight, volume , rubbing         
		[0.01,0.18], //size transform         
		[[1,0.05,0.05,0.08],[0.25,0.05,0.05,0.07],[1,0.05,0.05,0.01],[0.9,0.05,0.05,0.04],[0.8,0.05,0.05,0.03],[0.95,0.05,0.05,0.02],[0.25,0.05,0.05,0.01]], //colours and transperancy    
		[1], //animation speed 
		0.1,0.4,   //random period - intensity 
		"", //ontimer 
		"", //with destroy 
		"" 
	];       //follow 
	_blood setdropinterval 0.00001;         
	_blood attachTo [_object,[0,-0.06,-0.05],"head"];               
	_bArray pushback _blood;              
	_bArray spawn               
	{              
		_bArray = _this;              
		sleep 0.3;              
		{ deleteVehicle _x } foreach _bArray;              
	};           
};    

gokoBI_particleFX_brainsBlow = 
{      
	if (!hasInterface) exitWith {};       
	_object = _this;            
	_bArray = [];            
	_breath = "#particlesource" createVehicleLocal (getposATL _object);             
	_breath setParticleClass "goko_helmetparts";             
	_breath setParticleParams            
	[            
		["\a3\Data_f\ParticleEffects\Universal\meat_ca", 1, 0, 1], //shape name            
		"", //anim name            
		"spaceObject",        
		0.5, 6, //timer period & life time            
		[0, 0, 0], //pos         
		[5 + random -10, 6 + random -12, random 5], //moveVel       
		1,1.275,0.2,0, //rotation vel, weight, volume, rubbing            
		[1.6,0], //size transform           
		[[0.005,0,0,0.05], [0.006,0,0,0.06], [0.2,0,0,0]],      
		[1000], //animationPhase (speed in config)            
		1, //randomdirection period            
		0.1, //random direction intensity            
		"", //onTimer            
		"", //before destroy            
		"", //object            
		0, //angle            
		false, //on surface            
		0.0 //bounce on surface            
	];            
	_breath setParticleRandom [0.5, [0, 0, 0], [3.25, 0.25, 2.25], 1, 0.5, [0, 0, 0, 0.1], 0, 0, 10];      
	_breath setDropInterval 0.01;            
	_breath attachTo [_object,[0,0,0.2], "head"];             
	_bArray pushback _breath;            
	_bArray spawn             
	{            
		_bArray = _this;            
		sleep random 0.2;            
		{ deleteVehicle _x } foreach _bArray;            
	};         
};

gokoBI_particleFX_bloodCough = 
{
	if (!hasInterface) exitWith {};      
	_object = _this;           
	_bArray = [];           
	_breath = "#particlesource" createVehicleLocal (getposATL _object);            
	_breath setParticleClass "goko_helmetparts";            
	_breath setParticleParams [
		["\a3\Data_f\ParticleEffects\Universal\Universal", 16, 12, 13,0], //shape name           
		"", //anim name           
		"Billboard",       
		0.5, 0.5, //timer period & life time           
		[0, 0, 0], //pos        
		[0,0.0, 1 + random -2], //moveVel      
		1,1.275,1,0.2, //rotation vel, weight, volume, rubbing           
		[0,0.5,0], //size transform          
		[[0.005,0,0,0.05], [0.006,0,0,0.06], [0.2,0,0,0]],     
		[1000], //animationPhase (speed in config)           
		1, //randomdirection period           
		0.04, //random direction intensity           
		"", //onTimer           
		"", //before destroy           
		"", //object           
		0, //angle           
		false, //on surface           
		0.0 //bounce on surface           
	];           
	_breath setParticleRandom [0.5, [0, 0, 0], [0.25, 0.25, 0.25], 0, 0.5, [0, 0, 0, 0.1], 0, 0, 10];     
	_breath setDropInterval 0.01;           
	_breath attachTo [_object,[0,0.1,0.04], "neck"];            
	_bArray pushback _breath;           
	_bArray spawn            
	{           
		_bArray = _this;           
		sleep random 0.5;           
		{ deleteVehicle _x } foreach _bArray;
	};        
};

gokoBI_particleFX_bloodUpNdown =    
{          
 if (!hasInterface) exitWith {};      
 _object = _this;                  
 _bArray = [];                  
 _blood = "#particlesource" createVehicleLocal (getposATL _object);                   
 _blood setParticleClass "ATMineExplosionParticles";           
 
 _blood setParticleParams [ 
  ["\a3\Data_f\ParticleEffects\Universal\Universal", 16, 13, 1, 16],   //model name             
  "",   //animation             
  "billboard", //type             
  0.1, 5, //period and lifecycle             
  [0, 0, 0], //position             
 
  [0.5 + random -1, 0.5 + random -1, 1], //movement vector             
  1, 1, 0.3, 1, //rotation, weight, volume , rubbing             
  [0.2, 4], //size transform             
  [[1,1,1,0.12], [0.01,0.01,0.01,0.0]],     
  [0.00001],     
  0.4,     
  0.4,     
  "",     
  "",     
  "",    
  360, //angle              
  false, //on surface              
  0 //bounce on surface      
 ];      
 _blood setdropinterval 0.003;             
 _blood attachTo [_object,[0,0,-0.1],"neck"];                   
 
 _bArray pushback _blood;                  
 
 _bArray spawn                   
 { 
  _bArray = _this;                  
  sleep 0.2;                  
  { deleteVehicle _x } foreach _bArray;                  
 };               
};   

gokoBI_particleFX_helmetTrashed = 
{
	if (!hasInterface) exitWith {};       
	_object = _this;             
	_pArray = [];             
	for "_i" from 0 to random 3 do             
	{             
		_parca = "#particlesource" createVehicleLocal (getposATL _object);              
		_parca setParticleClass "goko_goggleparts";              
		_parca setParticleParams             
		[             
			["\A3\data_f\ParticleEffects\Shard\shard3", 1, 0, 1], //shape name             
			"", //animation name             
			"SpaceObject", //type             
			1, 2 + random 5, //timer period & life time             
			[0, 0, 0], //position             
			[3 + random -6, 3 + random -6,1 + random 6], //moveVeocity             
			1 + random 4, 1, 0.1, 0, //rotation velocity, weight, volume, rubbing             
			[0.4 + random 0.3], //size             
			[[1,1,1,1]], //color             
			[0.1], //animationPhase (animation speed in config)             
			0.1, //randomdirection period             
			0.05, //random direction intensity             
			"", //onTimer             
			"", //before destroy             
			"", //object             
			0, //angle             
			false, //on surface             
			0 //bounce on surface             
		];             
		_parca setParticleRandom [0, [0, 0, 0], [0, 0, 1], 0, 0.1, [0, 0, 0, 0], 0, 0];             
		_parca setDropInterval 1000;             
		_parca attachTo [_object,[0,-0.05,0.18],"head"];              
		_pArray pushBack _parca;             
	};             
};

gokoBI_particleFX_helmetDestroyed = 
{
	if (!hasInterface) exitWith {};
	_object = _this select 0;
	_velocity = _this select 1;
	_pArray = [];
	for "_i" from 0 to random 3 do
	{            
		_parca = "#particlesource" createVehicleLocal (getposATL _object);
		_parca setParticleClass "goko_goggleparts";
		_parca setParticleParams
		[
			["\A3\data_f\ParticleEffects\Shard\shard3", 1, 0, 1], //shape name
			"", //animation name
			"SpaceObject", //type
			1, 5, //timer period & life time
			[0, 0, 0], //position
			_velocity, //moveVeocity
			1 + random 4, 1, 0.1, 0, //rotation velocity, weight, volume, rubbing
			[0.4 + random 0.3], //size
			[[1,1,1,1]], //color            
			[0.1], //animationPhase (animation speed in config)
			0.1, //randomdirection period
			0.05, //random direction intensity
			"", //onTimer
			"", //before destroy
			"", //object
			0, //angle
			false, //on surface
			0 //bounce on surface
		];
		_parca setParticleRandom [0, [0, 0, 0], [0, 0, 1], 0, 0.1, [0, 0, 0, 0], 0, 0];
		_parca setDropInterval 1000;
		_parca attachTo [_object,[0,-0.05,0.18],"head"];
		_pArray pushBack _parca;
	};
};

gokoBI_particleFX_FlyOff = 
{      
	if (!hasInterface) exitWith {};                   
	_object = _this select 0;
	_velocity = _this select 1;                       
	_helmet = headgear _object;          
	_modelname = getText (configfile >> "CfgWeapons" >> _helmet >> "model");             
	_parca = "#particlesource" createVehicleLocal (getposATL _object);                         
	_parca setparticleclass "goko_helmetflyoff";
	_parca setParticleParams                        
	[                        
		[_modelname, 1, 0, 1], //shape name                        
		"", //animation name                        
		"SpaceObject", //type                        
		0, 3, //timer period & life time                        
		[0, 0, 0], //position                        
		_velocity, //moveVeocity                        
		0.2, 1, 0.1, 1, //rotation velocity, weight, volume, rubbing                        
		[0.9], //size                        
		[[1,1,1,1], [0,0,0,0]], //color                        
		[10], //animationPhase (animation speed in config)                        
		0, //randomdirection period                        
		0, //random direction intensity                        
		"", //onTimer                        
		"", //before destroy                        
		"", //object                        
		0, //angle                        
		false, //on surface                        
		0, //bounce on surface              
		[[1,0,0,0]]           
	];                        
	_parca setDropInterval 8000;                        
	_parca attachTo [_object,[0,0,0],"head"];                         
};

gokoBI_particleFX_helmetSparks1 = 
{
	if (!hasInterface) exitWith {};             
	_object = _this select 0;
	_velocity = _this select 1;                
	_bArray = [];                 
	_blood = "#particlesource" createVehicleLocal (getposATL _object);                  
	_blood setParticleClass "goko_goggleparts";                  
	_blood setParticleParams         
	[        
		["\A3\data_f\ParticleEffects\Universal\Universal", 16, 3, 12, 4],  //sprite name        
		"", //animation name        
		"Billboard", //type        
		0.5, 1.4, //timer period and fadeout timer        
		[0, 0, 0], //position        
		_velocity, //move velocity        
		1, 1, 0.35,  0.80, //rot vel, weight, volume, rubbing        
		[0.08,0.01], //size transform        
		[[1,1,1,0], [0.1,0.1,0.1,-4], [0,0,0,-4],[1,1,1,1]],  //color and transperency        
		[1000], //animation phase speed        
		0.2,   //randomdirection period        
		0.7,  //randomization intensity        
		"", //onTimer        
		"",  //beforeDestroy        
		"",  //object        
		360,  //angle        
		false,  //on the surface        
		0  //bounce         
	];          
	_blood setdropinterval 0.001;         
	_blood attachTo [_object,[0,0,0.04],"neck"];                  
	_bArray pushback _blood;                 
	_bArray spawn                  
	{                 
		_bArray = _this;                 
		sleep 0.08;                 
		{ deleteVehicle _x } foreach _bArray;                 
	};               
};

gokoBI_particleFX_helmetSparks2 = 
{    
	if (!hasInterface) exitWith {};              
	_object = _this select 0;
	_velocity = _this select 1;             
	_bArray = [];                 
	_blood = "#particlesource" createVehicleLocal (getposATL _object);                  
	_blood setParticleClass "goko_goggleparts";                  
	_blood setParticleParams         
	[     
		["\A3\data_f\ParticleEffects\Universal\Universal", 16, 4, 11, 4],  //sprite name        
		"", //animation name        
		"Billboard", //type        
		0.5, 1.4, //timer period and fadeout timer        
		[0, 0, 0], //position        
		_velocity, //move velocity        
		1, 1, 0.35,  0.80, //rot vel, weight, volume, rubbing        
		[0.08,0.01], //size transform        
		[[1,1,1,0], [0.1,0.1,0.1,-4], [0,0,0,-4],[1,1,1,1]],  //color and transperency        
		[1000], //animation phase speed        
		0.2,   //randomdirection period        
		0.7,  //randomization intensity        
		"", //onTimer        
		"",  //beforeDestroy        
		"",  //object        
		360,  //angle        
		false,  //on the surface        
		0  //bounce         
	];          
	_blood setdropinterval 0.001;         
	_blood attachTo [_object,[0,0,0.04],"neck"];                  
	_bArray pushback _blood;                 
	_bArray spawn                  
	{                 
		_bArray = _this;                 
		sleep 0.1;                 
		{ deleteVehicle _x } foreach _bArray;                 
	};               
};   

gokoBI_particleFX_helmetSparks3 = 
{
	if (!hasInterface) exitWith {};           
	_object = _this select 0;
	_velocity = _this select 1;              
	_bArray = [];                  
	_blood = "#particlesource" createVehicleLocal (getposATL _object);                   
	_blood setParticleClass "goko_goggleparts";                   
	_blood setParticleParams          
	[         
		["\A3\data_f\ParticleEffects\Universal\Universal", 16, 6, 0, 4],  //sprite name         
		"", //animation name         
		"Billboard", //type         
		0.5, 1.4, //timer period and fadeout timer         
		[0, 0, 0], //position         
		_velocity, //move velocity         
		1, 1, 0.35,  0.80, //rot vel, weight, volume, rubbing         
		[0.08,0.01], //size transform         
		[[1,1,1,0], [0.1,0.1,0.1,-4], [0,0,0,-4],[1,1,1,1]],  //color and transperency         
		[1000], //animation phase speed         
		0.2,   //randomdirection period         
		0.7,  //randomization intensity         
		"", //onTimer         
		"",  //beforeDestroy         
		"",  //object         
		360,  //angle         
		false,  //on the surface         
		0  //bounce          
	];           
	_blood setdropinterval 0.001;          
	_blood attachTo [_object,[0,0,0.04],"neck"];                   
	_bArray pushback _blood;                  
	_bArray spawn                   
	{                  
		_bArray = _this;                  
		sleep 0.1;                  
		{ deleteVehicle _x } foreach _bArray;                  
	};                
};     

gokoBI_particleFX_helmetSparks4 = 
{    
	if (!hasInterface) exitWith {};   
	_object = _this select 0;
	_velocity = _this select 1;                
	_bArray = [];                  
	_blood = "#particlesource" createVehicleLocal (getposATL _object);                   
	_blood setParticleClass "goko_goggleparts";                   
	_blood setParticleParams          
	[         
		["\A3\data_f\ParticleEffects\Universal\Universal", 16, 1, 0, 4],  //sprite name         
		"", //animation name         
		"Billboard", //type         
		0.5, 1.4, //timer period and fadeout timer         
		[0, 0, 0], //position         
		_velocity, //move velocity         
		1, 1, 0.35,  0.80, //rot vel, weight, volume, rubbing         
		[0.08,0.01], //size transform         
		[[1,1,1,0], [0.1,0.1,0.1,-4], [0,0,0,-4],[1,1,1,1]],  //color and transperency         
		[1000], //animation phase speed         
		0.2,   //randomdirection period         
		0.7,  //randomization intensity         
		"", //onTimer         
		"",  //beforeDestroy         
		"",  //object         
		360,  //angle         
		false,  //on the surface         
		0  //bounce          
	];           
	_blood setdropinterval 0.001;          
	_blood attachTo [_object,[0,0,0.04],"neck"];                   
	_bArray pushback _blood;                  
	_bArray spawn                   
	{                  
		_bArray = _this;                  
		sleep 0.1;                  
		{ deleteVehicle _x } foreach _bArray;                  
	};                
};

gokoBI_particleFX_cheesyDestruct = 
{      
	if (!hasInterface) exitWith {};   
	_object = _this select 0;        
	_velocity = _this select 1;
	_pArray = [];        
	for "_i" from 0 to (1 + random 1) do        
	{       
		_parca = "#particlesource" createVehicleLocal (getposATL _object);         
		_parca setParticleClass "goko_goggleparts";         
		_parca setParticleParams        
		[       
			["\A3\data_f\ParticleEffects\Universal\AmmoBelt_Links", 1, 0, 1], //shape name        
			"", //animation name        
			"SpaceObject", //type        
			1, 3, //timer period & life time        
			[0, 0, 0], //position        
			_velocity, //moveVeocity        
			random 6, 3 + random 6, 0.78, 1, //rotation velocity, weight, volume, rubbing        
			[5], //size        
			[[1,1,1,1]], //color        
			[0.1], //animationPhase (animation speed in config)        
			0.5, //randomdirection period        
			0.8, //random direction intensity        
			"", //onTimer        
			"", //before destroy        
			"", //object        
			0, //angle        
			false, //on surface        
			0.16 //bounce on surface        
		];        
		_parca setParticleRandom [0, [0.1, 0.1, 0.1], [0, 0, 0], 0, 0.1, [0, 0, 0, 0], 0, 0];        
		_parca setDropInterval 1000;        
		_parca attachTo [_object,[0,0.12,0.3],"head"];         
		_pArray pushBack _parca;        
	};        
}; 

gokoBI_particleFX_hmdSparks1 = 
{
	if (!hasInterface) exitWith {};               
	_object = _this;                   
	_bArray = [];                   
	_blood = "#particlesource" createVehicleLocal (getposATL _object);                    
	_blood setParticleClass "goko_goggleparts";                    
	_blood setParticleParams           
	[
		["\A3\data_f\ParticleEffects\Universal\Universal", 16, 15, 10],  //sprite name          
		"", //animation name          
		"Billboard", //type          
		0.5, 2, //timer period and fadeout timer          
		[0, 0, 0], //position          
		[1+random -2, 1+random-2, 1+random 1], //move velocity          
		1, 1, 0.35,  0.80, //rot vel, weight, volume, rubbing          
		[0.015,0.008], //size transform          
		[[1,1,1,-500], [0.1,0.1,0.1,-500], [0,0,0,-500],[1,1,1,-500]],  //color and transperency          
		[1000], //animation phase speed          
		0.1,   //randomdirection period          
		1,  //randomization intensity          
		"", //onTimer          
		"",  //beforeDestroy          
		"",  //object          
		360,  //angle          
		false,  //on the surface          
		0  //bounce           
	];            
	_blood  setParticleRandom [0.5, [0, 0, 0], [0.25, 0.25, 0.25], 0, 0.5, [0, 0, 0, 0.1], 0, 0, 10];   
	_blood setdropinterval 0.001;           
	_blood attachTo [_object,[0,0.18,0.22],"head"];                    
	_bArray pushback _blood;                   
	_bArray spawn                    
	{                   
		_bArray = _this;                   
		sleep random 0.03;                   
		{ deleteVehicle _x } foreach _bArray;                   
	};
};

gokoBI_particleFX_hmdSparks2 = 
{     
	if (!hasInterface) exitWith {};               
	_object = _this;                   
	_bArray = [];                   
	_blood = "#particlesource" createVehicleLocal (getposATL _object);                    
	_blood setParticleClass "goko_goggleparts";                    
	_blood setParticleParams           
	[
		["\A3\data_f\ParticleEffects\Universal\Universal", 16, 5, 0, 16],  //sprite name          
		"", //animation name          
		"Billboard", //type          
		0.5, 1.4, //timer period and fadeout timer          
		[0, 0, 0], //position          
		[1+random -2, 1+random-2, 1+random 1], //move velocity          
		1, 1, 0.35,  0.80, //rot vel, weight, volume, rubbing          
		[0.08,0.01], //size transform          
		[[1,1,1,-500], [0.1,0.1,0.1,-500], [0,0,0,-500],[1,1,1,-500]],  //color and transperency          
		[0.1], //animation phase speed          
		0.1,   //randomdirection period          
		1,  //randomization intensity          
		"", //onTimer          
		"",  //beforeDestroy          
		"",  //object          
		360,  //angle          
		false,  //on the surface          
		0  //bounce           
	];            
	_blood  setParticleRandom [0.5, [0, 0, 0], [0.25, 0.25, 0.25], 0, 0.5, [0, 0, 0, 0.1], 0, 0, 10];   
	_blood setdropinterval 0.001;           
	_blood attachTo [_object,[0,0.1,0.22],"head"];                    
	_bArray pushback _blood;                   
	_bArray spawn                    
	{                   
		_bArray = _this;                   
		sleep random 0.2;                   
		{ deleteVehicle _x } foreach _bArray;                   
	};                 
};    

gokoBI_particleFX_hmdSparks3 = 
{     
	if (!hasInterface) exitWith {};               
	_object = _this;                   
	_bArray = [];                   
	_blood = "#particlesource" createVehicleLocal (getposATL _object);                    
	_blood setParticleClass "goko_goggleparts";                    
	_blood setParticleParams           
	[          
		["\A3\data_f\ParticleEffects\Universal\Universal", 16, 2, 0, 16],  //sprite name          
		"", //animation name          
		"Billboard", //type          
		0.5, 1.4, //timer period and fadeout timer          
		[0, 0, 0], //position          
		[1+random -2, 1+random-2, 1+random 1], //move velocity          
		1, 1, 0.35,  0.80, //rot vel, weight, volume, rubbing          
		[0.02,0.001], //size transform          
		[[1,1,1,-500], [0.1,0.1,0.1,-500], [0,0,0,-500],[1,1,1,-500]],  //color and transperency          
		[0.1], //animation phase speed          
		0.1,   //randomdirection period          
		0.9,  //randomization intensity          
		"", //onTimer          
		"",  //beforeDestroy          
		"",  //object          
		360,  //angle          
		false,  //on the surface          
		0  //bounce           
	];            
	_blood  setParticleRandom [0.5, [0, 0, 0], [0.25, 0.25, 0.25], 0, 0.5, [0, 0, 0, 0.1], 0, 0, 10];   
	_blood setdropinterval 0.001;           
	_blood attachTo [_object,[0,0.1,0.22],"head"];                    
	_bArray pushback _blood;                   
	_bArray spawn                    
	{                   
		_bArray = _this;                   
		sleep random 0.07;                   
		{ deleteVehicle _x } foreach _bArray;                   
	};                 
};    

gokoBI_particleFX_hmdSparks4 = 
{       
	if (!hasInterface) exitWith {};              
	_object = _this;                    
	_bArray = [];                    
	_blood = "#particlesource" createVehicleLocal (getposATL _object);                     
	_blood setParticleClass "goko_goggleparts";                     
	_blood setParticleParams            
	[           
		["\A3\data_f\ParticleEffects\Universal\Universal", 16, 5, 0, 16],  //sprite name           
		"", //animation name           
		"Billboard", //type           
		0.5, 4, //timer period and fadeout timer           
		[0, 0, 0], //position           
		[0, random 1, 1+random 1], //move velocity           
		1, 0.8, 0.1,  0, //rot vel, weight, volume, rubbing           
		[0.03,0.01], //size transform           
		[[1,1,1,-500], [0.1,0.1,0.1,-500], [0,0,0,-500],[1,1,1,-500]],  //color and transperency           
		[0.1], //animation phase speed           
		0.01,   //randomdirection period           
		0.7,  //randomization intensity           
		"", //onTimer           
		"",  //beforeDestroy           
		"",  //object           
		360,  //angle           
		false,  //on the surface           
		0  //bounce            
	];             
	_blood  setParticleRandom [0.5, [0, 0, 0], [0.25, 0.25, 0.25], 0, 0.5, [0, 0, 0, 0.1], 0, 0, 10];    
	_blood setdropinterval 0.001;            
	_blood attachTo [_object,[0,0.1,0.22],"head"];                     
	_bArray pushback _blood;                    
	_bArray spawn                     
	{                  
		_bArray = _this;                    
		sleep random 0.07;                    
		{ deleteVehicle _x } foreach _bArray;                    
	};                  
};  

gokoBI_particleFX_hmdSparks5 = 
{         
	if (!hasInterface) exitWith {};            
	_object = _this;                    
	_bArray = [];                    
	_blood = "#particlesource" createVehicleLocal (getposATL _object);                     
	_blood setParticleClass "goko_goggleparts";                     
	_blood setParticleParams            
	[           
		["\A3\data_f\ParticleEffects\Universal\Universal", 16, 7, 0, 16],  //sprite name           
		"", //animation name           
		"Billboard", //type           
		0.5, 1, //timer period and fadeout timer           
		[0, 0, 0], //position           
		[0, random 1, 1+random 1], //move velocity           
		1, 1, 0.1,  0, //rot vel, weight, volume, rubbing           
		[0.005,0.01], //size transform           
		[[1,1,1,-500], [0.1,0.1,0.1,-500], [0,0,0,-500],[1,1,1,-500]],  //color and transperency           
		[0.1], //animation phase speed           
		0.1,   //randomdirection period           
		0.9,  //randomization intensity           
		"", //onTimer           
		"",  //beforeDestroy           
		"",  //object           
		360,  //angle           
		false,  //on the surface           
		0  //bounce            
	];             
	_blood  setParticleRandom [0.5, [0, 0, 0], [0.25, 0.25, 0.25], 0, 0.5, [0, 0, 0, 0.1], 0, 0, 10];    
	_blood setdropinterval 0.001;            
	_blood attachTo [_object,[0,0.1,0.22],"head"];                     
	_bArray pushback _blood;                    

	_bArray spawn                     
	{                  
		_bArray = _this;                    
		sleep random 0.1;                    
		{ deleteVehicle _x } foreach _bArray;                    
	};                  
};  

gokoBI_particleFX_hmdSparks6 = 
{
	if (!hasInterface) exitWith {};                  
	_object = _this;                     
	_bArray = [];                     
	_blood = "#particlesource" createVehicleLocal (getposATL _object);                      
	_blood setParticleClass "goko_goggleparts";                      
	_blood setParticleParams             
	[            
		["\A3\data_f\ParticleEffects\Universal\Universal", 16, 1, 7, 16],  //sprite name            
		"", //animation name            
		"Billboard", //type            
		0.5, 1.4, //timer period and fadeout timer            
		[0, 0, 0], //position            
		[0, random 1, 1+random 3], //move velocity            
		1, 1, 0.1,  0, //rot vel, weight, volume, rubbing            
		[0.005,0], //size transform            
		[[1,1,1,-500], [0.1,0.1,0.1,-400], [0,0,0,-400],[1,1,1,-500]],  //color and transperency            
		[0.1], //animation phase speed            
		0.1,   //randomdirection period            
		0.8,  //randomization intensity            
		"", //onTimer            
		"",  //beforeDestroy            
		"",  //object            
		360,  //angle            
		false,  //on the surface            
		0  //bounce             
	];              
	_blood  setParticleRandom [0.5, [0, 0, 0], [0.25, 0.25, 0.25], 0, 0.5, [0, 0, 0, 0.1], 0, 0, 10];     
	_blood setdropinterval 0.001;             
	_blood attachTo [_object,[0,0.1,0.22],"head"];                      
	_bArray pushback _blood;                     
	_bArray spawn                      
	{                     
		_bArray = _this;                     
		sleep 0.1;                     
		{ deleteVehicle _x } foreach _bArray;                     
	};                   
};  

gokoBI_particleFX_hmdSparks7 =  
{       
	if (!hasInterface) exitWith {};      
	_object = _this;                
	_bArray = [];                
	_blood = "#particlesource" createVehicleLocal (getposATL _object);                 
	_blood setParticleClass "gokoFX_Starter_SparksOmniSparkle";         
	_blood setParticleParams [  
		["\a3\Data_f\ParticleEffects\Universal\Universal_02", 8, 4, 1, 0],   //model name           
		"",   //animation           
		"billboard", //type           
		0, 0, //period and lifecycle           
		[0, 0, 0], //position           

		[1.2 +random -2.4, 1.2 +random -2.4, 2 + random 1], //movement vector           
		1, 22, 1, 0.2, //rotation, weight, volume , rubbing           
		[0.01,0.01], //size transform           
		[[1,0.05,0.05,0.08]], //colours and transperancy      
		[1], //animation speed   
		2,0,   //random period - intensity   
		"", //ontimer   
		"", //with destroy   
		""   
	];       //follow   
	_blood setdropinterval 0.1;           
	_blood attachTo [_object,[0,0.08,0.2],"head"];                 
	_bArray pushback _blood;                
	_bArray spawn                 
	{                
		_bArray = _this;                
		sleep 0.1;                
		{ deleteVehicle _x } foreach _bArray;                
	};             
};    

gokoBI_particleFX_hmdSparks8 = 
{    
	if (!hasInterface) exitWith {};             
	_object = _this;                
	_bArray = [];                
	_breath = "#particlesource" createVehicleLocal (getposATL _object);                 
	_breath setParticleClass "goko_helmetparts";                 

	_breath setParticleParams                
	[                
		["\a3\Data_f\ParticleEffects\Universal\universal", 16, 5, 15, 16], //shape name                
		"", //anim name                
		"billboard",            
		0.5, 6, //timer period & life time                
		[0, 0, 0], //pos             
		[0,1 + random -2,1], //moveVel           
		3,1.275,0.93,0.2, //rotation vel, weight, volume, rubbing                
		[0.01,0.05,0], //size transform               
		[[1,1,1,-500], [1,1,1,-500], [1,1,1,-500]],    
			 
		[6000], //animationPhase (speed in config)                
		0.1, //randomdirection period                
		0.2, //random direction intensity                
		"", //onTimer                
		"", //before destroy                
		"", //object                
		0, //angle                
		false, //on surface                
		0.0 //bounce on surface                
	];                
	_breath setParticleRandom [0.5, [0, 0, 0], [0.25, 0.25, 0.25], 0, 0.5, [0, 0, 0, 0.1], 0, 0, 10];          
	_breath setDropInterval 0.01;    
	emitter = _breath;              
	_breath attachTo [_object,[0,0.11,0.2], "head"];                 
	_bArray pushback _breath;                
	_bArray spawn                 
	{                
		_bArray = _this;                
		sleep random 0.5;                
		{ deleteVehicle _x } foreach _bArray;                
	};             
};   

gokoBI_particleFX_hmdSparks9 = 
{      
	if (!hasInterface) exitWith {};           
	_object = _this;                
	_bArray = [];                
	_breath = "#particlesource" createVehicleLocal (getposATL _object);                 
	_breath setParticleClass "goko_helmetparts";                 
	_breath setParticleParams                
	[                
		["\a3\Data_f\ParticleEffects\Universal\universal", 16, 3, 15, 16], //shape name                
		"", //anim name                
		"billboard",            
		0.5, 6, //timer period & life time                
		[0, 0, 0], //pos             
		[0,1 + random -2,1], //moveVel           
		3,1.275,0.93,0.2, //rotation vel, weight, volume, rubbing                
		[0.01,0.02,0], //size transform               
		[[1,1,1,-500], [1,1,1,-500], [1,1,1,-500]],    
		[6000], //animationPhase (speed in config)                
		0.01, //randomdirection period                
		0.2, //random direction intensity                
		"", //onTimer                
		"", //before destroy                
		"", //object                
		0, //angle                
		false, //on surface                
		0.0 //bounce on surface                
	];                
	_breath setParticleRandom [0.5, [0, 0, 0], [0.25, 0.25, 0.25], 0, 0.5, [0, 0, 0, 0.1], 0, 0, 10];          
	_breath setDropInterval 0.01;    
	emitter = _breath;              
	_breath attachTo [_object,[0,0.11,0.2], "head"];                 
	_bArray pushback _breath;                
	_bArray spawn                 
	{                
		_bArray = _this;                
		sleep random 0.5;                
		{ deleteVehicle _x } foreach _bArray;                
	};             
};  

gokoBI_particleFX_brokenGlassParticles = 
{       
	if (!hasInterface) exitWith {};  
	_object = _this;        
	_pArray = [];        
	for "_i" from 0 to random 12 do        
	{
		_parca = "#particlesource" createVehicleLocal (getposATL _object);         
		_parca setParticleClass "goko_goggleparts";         
		_parca setParticleParams        
		[
			["\A3\data_f\ParticleEffects\Universal\GlassParts_03", 1, 0, 1], //shape name        
			"", //animation name        
			"SpaceObject", //type        
			1, 7, //timer period & life time        
			[0, 0, 0], //position        
			[1+random -2, 0, random 2], //moveVeocity        
			2, 1, 0.1, 0.2, //rotation velocity, weight, volume, rubbing        
			[0.05], //size        
			[[1,1,1,1]], //color        
			[0.1], //animationPhase (animation speed in config)        
			0.00, //randomdirection period        
			0.0, //random direction intensity        
			"", //onTimer        
			"", //before destroy        
			"", //object        
			0, //angle        
			false, //on surface        
			0 //bounce on surface        
		];
		_parca setParticleRandom [0, [0.1, 0.1, 0.0], [1.35, 1.35, 1.0], 0, 0.1, [0, 0, 0, 0], 0, 0];        
		_parca setDropInterval 6000;        
		_parca attachTo [_object,[0,0.08,0.17],"head"];         
		_pArray pushBack _parca;
	};        
};   

gokoBI_particleFX_blackSmoke = 
{         
	if (!hasInterface) exitWith {};   
	_object = _this;           
	_bArray = [];           
	_breath = "#particlesource" createVehicleLocal (getposATL _object);            
	_breath setParticleClass "goko_helmetparts";            
	_breath setParticleParams           
	[
		["\a3\Data_f\ParticleEffects\Universal\universal", 16, 12, 12,0], //shape name           
		"", //anim name           
		"Billboard",       
		0.5, 2.2, //timer period & life time           
		[0, 0, 0], //pos        
		[0,0.0,0.5+ random -0.8], //moveVel      
		1,1.275,1,0.2, //rotation vel, weight, volume, rubbing           
		[0,0.35,0], //size transform          
		[[0.01,0.01,0.01,0.12], [0.000,0,0,0.09], [0.10,0.10,0.10,0]],     
		[1000], //animationPhase (speed in config)           
		1, //randomdirection period           
		0.04, //random direction intensity           
		"", //onTimer           
		"", //before destroy           
		"", //object           
		0, //angle           
		false, //on surface           
		0.0 //bounce on surface           
	];           
	_breath setParticleRandom [0.5, [0, 0, 0], [0.25, 0.25, 0.25], 0, 0.5, [0, 0, 0, 0.1], 0, 0, 10];     
	_breath setDropInterval 0.01;           
	_breath attachTo [_object,[0,0.11,0.2], "head"];            
	_bArray pushback _breath;           
	_bArray spawn            
	{
		_bArray = _this;           
		sleep (1 + random 2);           
		{ deleteVehicle _x } foreach _bArray;           
	};        
}; 

gokoBI_particleFX_smallHelmetParts = 
{      
	if (!hasInterface) exitWith {};  
	_object = _this;       
	_pArray = [];       
	for "_i" from 0 to random 10 do       
	{
		_parca = "#particlesource" createVehicleLocal (getposATL _object);        
		_parca setParticleClass "goko_goggleparts";        
		_parca setParticleParams       
		[
			["\A3\data_f\ParticleEffects\shard\shard", 1, 0, 1], //shape name       
			"", //animation name       
			"SpaceObject", //type       
			1, 2, //timer period & life time       
			[0, 0, 0], //position       
			[6 - random 12, 0, random 6], //moveVeocity       
			1, 1, 0.1, 1, //rotation velocity, weight, volume, rubbing       
			[0.08, 0], //size       
			[[1,1,1,1]], //color       
			[0.1], //animationPhase (animation speed in config)       
			0, //randomdirection period       
			0, //random direction intensity       
			"", //onTimer       
			"", //before destroy       
			"", //object       
			360, //angle       
			false, //on surface       
			0 //bounce on surface       
		];       
		_parca setParticleRandom [0, [0.1, 0.1, 0.1], [1, 1, 1], 0, 0.1, [0, 0, 0, 0], 0, 0];       
		_parca setDropInterval 1000;       
		_parca attachTo [_object,[0,0,0.18],"head"];        
		_pArray pushBack _parca;
	};       
};   

// fx_effects.sqf – Efectos visuales y sonoros completamente vanilla para impactos en cabeza y HUD

// ========== FUNCIONES DE EFECTOS ========== //

// ... (efectos existentes) ...

// ========== SONIDOS VANILLA ========== //

helmetPenetrateSound = selectRandom [
	"A3\Sounds_F\characters\hit_helmet_01.wss",
	"A3\Sounds_F\characters\hit_helmet_02.wss"
];

helmetHitSound = selectRandom [
	"A3\Sounds_F\characters\impact_body_1.wss",
	"A3\Sounds_F\characters\impact_body_2.wss"
];

hmdBreakSound = selectRandom [
	"A3\Sounds_F\weapons\ricochets\ricochet_01.wss",
	"A3\Sounds_F\weapons\ricochets\ricochet_03.wss"
];

fleshImpactSound = selectRandom [
	"A3\Sounds_F\characters\injury_01.wss",
	"A3\Sounds_F\characters\injury_02.wss"
];

helmetPopSound = selectRandom [
	"A3\Sounds_F_Enoch\assets\impact\soft_impact_04.wss",
	"A3\Sounds_F_Enoch\assets\impact\soft_impact_03.wss"
];

// ========== SISTEMA DE IMPACTO EN CABEZA ========== //

fx_onHeadImpact = {
	params ["_unit", "_instigator", "_projectile"];

	private _getHeadgear = headgear _unit;
	private _headgearProtection = getNumber (configFile >> "CfgWeapons" >> _getHeadgear >> "ItemInfo" >> "HitpointsProtectionInfo" >> "Head" >> "armor");

	private _weapon = currentWeapon _instigator;
	private _getInstigatorDirection = if (_weapon != "") then {
		_instigator weaponDirection _weapon
	} else {
		[0, 0, 1]
	};

	private _velocityVector = _getInstigatorDirection vectorAdd [-1 + random 2, -1 + random 2, random 5];
	private _projectileCaliber = getNumber (configFile >> "CfgAmmo" >> _projectile >> "caliber");

	private _caliberLowest = 0.869565;
	private _caliberHighest = 2.4;
	private _minProtectionLevel = 4;
	private _maxProtectionLevel = 12;

	private _projectileForce = linearConversion [
		_caliberLowest, _caliberHighest,
		_projectileCaliber, _minProtectionLevel, _maxProtectionLevel
	];

	// Condición: ¿la protección del casco resiste?
	if (_headgearProtection >= _projectileForce) then {
		// Rebote visual sin sangre
		[_unit] call fx_hmdSparks7;
		playSound3D [helmetHitSound, _unit];
	} else {
		// Sangre en HUD (solo si jugador local)
		if (_unit isEqualTo player) then {
			"dynamicBlur" ppEffectEnable true;
			"dynamicBlur" ppEffectAdjust [2];
			"dynamicBlur" ppEffectCommit 0;
			"dynamicBlur" ppEffectAdjust [0];
			"dynamicBlur" ppEffectCommit 0.5;

			"colorCorrections" ppEffectEnable true;
			"colorCorrections" ppEffectAdjust [1, 1, -0.01, [1, 0, 0, 0.25], [1, 1, 1, 1], [0.5, 0.5, 0.5, 0]];
			"colorCorrections" ppEffectCommit 0;
			"colorCorrections" ppEffectAdjust [1, 1, 0, [1, 0, 0, 0], [1, 1, 1, 1], [1, 1, 1, 1]];
			"colorCorrections" ppEffectCommit 1;
		};

		// Efectos visuales y sonoros agresivos
		[_unit] call fx_hmdSparks7;
		[_unit] call fx_hmdGlassShatter;
		[_unit] call fx_blackSmokeHelmet;

		playSound3D [helmetPenetrateSound, _unit];
		playSound3D [fleshImpactSound, _unit];
		playSound3D [helmetPopSound, _unit];
	};
};

// ========== EVENTO AUTOMÁTICO HITPART ========== //

[] spawn {
	sleep 1;
	{
		_x addEventHandler ["HitPart", {
			params ["_unit", "_source", "_projectile", "_hitPartIndex", "_instigator", "_damage", "_dir", "_radius", "_surfaceNormal", "_isDirect"];
			private _selection = (_unit selectionNames _hitPartIndex) param [0, ""];
			if (_selection isEqualTo "head") then {
				[_unit, _instigator, _projectile] call fx_onHeadImpact;
			};
		}];
	} forEach allUnits;
};
 
// ======================================================

// fx_blood_effects_part1.sqf – efectos convertidos desde config.cpp (vanilla)

fx_gorebits_blood = {
    params ["_object"];
    private _ps = "#particlesource" createVehicleLocal getPosATL _object;
    _ps setParticleParams [
        ["\a3\characters_f\blood_splash.p3d", 1, 0, 1],
        "", "SpaceObject", 1, 3,
        [0, 0, 0], [0, 1.5, 0],
        0, 999, 1, 0.0,
        [1], [[1, 1, 1, 1]], [0.1],
        0, 0, "", "", "", 0, false, 0
    ];
    _ps setDropInterval 0.02;
    _ps attachTo [_object, [0,0,0]];
    _ps
};

fx_gorebits_big = {
    params ["_object"];
    private _ps = "#particlesource" createVehicleLocal getPosATL _object;
    _ps setParticleParams [
        ["\A3\data_f\ParticleEffects\Universal\Meat_ca", 1, 0, 1],
        "", "SpaceObject", 1, 3,
        [0, 0, 0], [0, 1.5, 0],
        1, 22, 1, 0.2,
        [1], [[0.45, 0, 0, 1]], [0.1],
        0, 0, "", "", "", 0, false, 0
    ];
    _ps setDropInterval 0.02;
    _ps attachTo [_object, [0,0,0]];
    _ps
};

fx_gorebits_small = {
    params ["_object"];
    private _ps = "#particlesource" createVehicleLocal getPosATL _object;
    _ps setParticleParams [
        ["\A3\data_f\ParticleEffects\Universal\Meat_ca", 1, 0, 1],
        "", "SpaceObject", 1, 3,
        [0, 0, 0], [0, 1.5, 0],
        1, 22, 1, 0.2,
        [1], [[1, 1, 1, 1]], [0.1],
        0, 0, "", "", "", 0, false, 0
    ];
    _ps setDropInterval 0.01;
    _ps attachTo [_object, [0,0,0]];
    _ps
};

fx_blood_fountain = {
    params ["_object"];
    private _ps = "#particlesource" createVehicleLocal getPosATL _object;
    _ps setParticleParams [
        ["\A3\data_f\ParticleEffects\Universal\Universal_01", 16, 12, 8, 1],
        "", "Billboard", 0.1, 1.5,
        [0, 0, 0], [0, 0.5, 1],
        0, 1, 1, 0.2,
        [0.05, 0.2, 0.1],
        [[0.6, 0, 0, 1], [0.4, 0, 0, 0.6], [0.2, 0, 0, 0]],
        [1], 0, 0, "", "", "", 0, false, 0
    ];
    _ps setDropInterval 0.02;
    _ps attachTo [_object, [0,0,0.3]];
    _ps
};

fx_brain_fleck = {
    params ["_object"];
    private _ps = "#particlesource" createVehicleLocal getPosATL _object;
    _ps setParticleParams [
        ["\A3\data_f\ParticleEffects\Universal\Meat_ca", 1, 0, 1],
        "", "SpaceObject", 1, 2,
        [0, 0, 0], [random 0.2, 0.5, random 0.2],
        1, 1, 1, 0.05,
        [0.08, 0.01], [[0.5, 0.2, 0.2, 1]],
        [1], 0, 0, "", "", "", 0, false, 0
    ];
    _ps setDropInterval 0.05;
    _ps attachTo [_object, [0,0,0.25]];
    _ps
};


// ======================================================

addMissionEventHandler ["ProjectileHit", {
    params ["_projectile", "_position", "_shooter", "_target", "_surfaceType"];

    // Verificación mejorada de superficie
    private _surfaceCheck = lineIntersectsSurfaces [
        getPosASL _projectile, 
        getPosASL _projectile vectorAdd (vectorDir _projectile vectorMultiply 0.5),
        _projectile, objNull, true, 1, "GEOM", "NONE"
    ];

    if (_surfaceCheck isNotEqualTo []) then {
        // Aumentar probabilidad para testing (0.8 = 80%)
        if (random 1 <= 0.8) then {
            private _sparkPos = ASLToAGL (_surfaceCheck select 0 select 0);
            
            // Efecto de chispas optimizado
            [_sparkPos, vectorDir _projectile] spawn {
                params ["_pos", "_dir"];
                
                // Partículas
                private _ps = "#particlesource" createVehicleLocal _pos;
                _ps setParticleCircle [0, [0, 0, 0]];
                _ps setParticleParams [
                    ["\A3\Data_F\ParticleEffects\Universal\Universal", 16, 12, 8, 0], 
                    "", 
                    "Billboard", 
                    1, 
                    0.5, 
                    [0, 0, 0], 
                    _dir vectorMultiply -1, 
                    0, 
                    0.05, 
                    0.04, 
                    0.05, 
                    [0.03, 0.1], 
                    [[1, 1, 1, 1], [1, 0.5, 0, 0.8], [1, 0, 0, 0]], 
                    [0.08], 
                    1, 
                    0, 
                    "", 
                    "", 
                    _pos
                ];
                _ps setParticleRandom [0.5, [0.1, 0.1, 0.1], [1, 1, 2], 0, 0.1, [0, 0, 0, 0], 0, 0];
                _ps setDropInterval 0.01;
                
                // Sonido mejorado
                private _sound = selectRandom [
					"A3\Sounds_F\weapons\ricochets\ricochet_01.wss", 1,
					"A3\Sounds_F\weapons\ricochets\ricochet_02.wss", 1,
					"A3\Sounds_F\weapons\ricochets\ricochet_03.wss", 1,
					"A3\Sounds_F\weapons\bullet_flyby_01.wss", 0.5,
					"A3\Sounds_F\weapons\bullet_flyby_02.wss", 0.6,
					"A3\Sounds_F\weapons\missiles\rocket_flyby_01.wss", 0.3,
					"A3\Sounds_F\weapons\missiles\rocket_flyby_02.wss", 0.3,
					"A3\Sounds_F\weapons\missiles\missile_flyby_03.wss", 0.2
                ];
                
                playSound3D [
                    _sound,
                    _ps, // Usar el objeto de partículas como fuente
                    false, 
                    _pos, 
                    2, // Volumen aumentado
                    1 + random 0.5, // Pitch aleatorio
                    50 // Distancia
                ];
                
                // Tiempo de vida de las partículas
                sleep 0.15;
                deleteVehicle _ps;
            };
        };
    };
}];

// ======================================================

// flare_script.sqf

// Posición inicial de la bengala
private _flarePosition = [player, 0, 50, 0] call BIS_fnc_relPos;

// Crear una bengala (chemlight) en la posición especificada
private _flare = "Chemlight_white" createVehicle _flarePosition;

// Crear una fuente de luz asociada a la bengala
private _light = "#lightpoint" createVehicleLocal _flarePosition;

// Configurar propiedades de la luz
_light setLightColor [1, 1, 1]; // Color blanco
_light setLightAmbient [1, 1, 1];
_light setLightBrightness 8;
_light setLightIntensity 1000000;
_light setLightUseFlare true;
_light setLightFlareSize 1;
_light setLightFlareMaxDistance 100;
_light setLightDayLight true;

// Adjuntar la luz a la bengala
_light attachTo [_flare, [0, 0, 0]];

// Establecer la duración de la bengala (en segundos)
sleep 40;

// Eliminar la luz y la bengala después de la duración
deleteVehicle _light;
deleteVehicle _flare;

/*
    Script: optics_adjustment.sqf
    Purpose: Simula el ajuste de distancias para visores vanilla en una misión, sin modificar CfgWeapons.
    Autor: Conversión por ChatGPT desde config.cpp proporcionado.
*/

// ==== CONFIGURACIÓN DE VISOR SIMULADA ====

// Tabla de visores y distancias disponibles (solo vanilla)
private _opticConfig = [
    ["optic_Holosight",              [100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600], 0],
    ["optic_Holosight_smg",          [100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600], 0],
    ["optic_aco",                    [100], 0],
    ["optic_aco_grn",                [100], 0],
    ["optic_aco_smg",                [100], 0],
    ["optic_aco_grn_smg",            [100], 0],
    ["optic_arco",                   [100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600], 2],
    ["optic_Hamr",                   [100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600], 2],
    ["optic_Hamr_F",                 [100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600], 2],
    ["optic_DMS",                    [100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600], 2],
    ["optic_SOS",                    [100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600], 2],
    ["optic_MRCO",                   [100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600], 2],
    ["optic_NVS",                    [100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600], 2],
    ["optic_tws",                    [100,200,300,400,500,600,700,800,900,1000], 2],
    ["optic_tws_mg",                 [100,200,300,400,500,600,700,800,900,1000], 2],
    ["optic_KHS_blk",                [100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600], 2],
    ["optic_KHS_hex",                [100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600], 2],
    ["optic_KHS_old",                [100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600], 2],
    ["optic_KHS_tan",                [100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600], 2],
    ["optic_AMS",                    [100,200,300,400,500,600,700,800,900,1000,1100,1200], 2],
    ["optic_AMS_khk",                [100,200,300,400,500,600,700,800,900,1000,1100,1200], 2],
    ["optic_AMS_snd",                [100,200,300,400,500,600,700,800,900,1000,1100,1200], 2],
    ["optic_ERCO_blk_F",             [100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600], 2],
    ["optic_ERCO_khk_F",             [100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600], 2],
    ["optic_ERCO_snd_F",             [100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600], 2],

    // Binoculares vanilla
    ["Binocular",                    [100,200,300,400,500,600,700,800,900,1000], 5],
    ["Rangefinder",                  [100,200,300,400,500,600,700,800,900,1000], 5],
    ["Laserdesignator",              [100,200,300,400,500,600,700,800,900,1000], 5],
    ["Laserdesignator_01_khk_F",     [100,200,300,400,500,600,700,800,900,1000], 5],
    ["Laserdesignator_02",           [100,200,300,400,500,600,700,800,900,1000], 5],
    ["Laserdesignator_03",           [100,200,300,400,500,600,700,800,900,1000], 5]
];

// ==== FUNCIÓN PARA AJUSTAR DISTANCIA DE DISPARO SIMULADA ====

params ["_unit"];

private _optic = primaryWeaponItems _unit select 2;

if (_optic != "") then {
    private _entry = _opticConfig select {_x select 0 == _optic};
    if !(_entry isEqualTo []) then {
        private _distances = _entry select 0 select 1;
        private _defaultIndex = _entry select 0 select 2;

        hint format ["%1 configurado con distancias: %2", _optic, _distances];

        // Simulación de configuración: puedes modificar valores según gameplay
        _unit setVariable ["optic_distances", _distances];
        _unit setVariable ["optic_defaultIndex", _defaultIndex];
    } else {
        hint format ["%1 no tiene configuración personalizada. Se omite.", _optic];
    };
};


/*
    Script: real_sfx_sparks.sqf
    Uso: Genera efectos de chispas vanilla adaptados desde un config.cpp
    Autor original: amartyn, Gokmen / Adaptado por ChatGPT
*/

// USO: [posición, "tipo"] call real_sfx_spawnSparks;
// tipos disponibles: "burst", "drop", "omni"

real_sfx_spawnSparks = {
    params ["_pos", "_type"];

    private _src = "#particlesource" createVehicleLocal _pos;
    _src setParticleCircle [0, [0, 0, 0]];
    _src setParticleRandom [0, [0, 0, 0], [0.1, 0.1, 0.1], 0, 0.05, [0, 0, 0, 0], 0, 0];

    switch (_type) do {
        case "burst": {
            _src setParticleParams [
                ["\A3\data_f\ParticleEffects\Universal\Universal", 16, 13, 2, 0],
                "", "Billboard",
                0.05, 0.15,
                [0, 0, 0],
                [0.3 + random 0.5, 0.2 + random 0.5, 0.1 + random 0.5],
                1, 1, 0.002, 0.15,
                [0.03, 0.01],
                [[1, 0.5, 0.2, 1], [0.5, 0.2, 0.1, 0]],
                [1000],
                1, 1, "", "", ""
            ];
        };
        case "drop": {
            _src setParticleParams [
                ["\A3\data_f\ParticleEffects\Universal\Universal", 16, 13, 2, 0],
                "", "Billboard",
                0.1, 0.5,
                [0, 0, 0],
                [0.2 + random 0.3, -2, 0.2 + random 0.3],
                1, 1, 0.002, 0.15,
                [0.02, 0.005],
                [[1, 0.5, 0.3, 1], [0.2, 0.1, 0.05, 0]],
                [1000],
                1, 1, "", "", ""
            ];
        };
        case "omni": {
            _src setParticleParams [
                ["\A3\data_f\ParticleEffects\Universal\Universal", 16, 13, 2, 0],
                "", "Billboard",
                0.05, 0.3,
                [0, 0, 0],
                [random 0.3, random 0.3, random 0.3],
                1, 1, 0.002, 0.15,
                [0.05, 0.005],
                [[1, 0.5, 0.3, 1], [0.2, 0.1, 0.05, 0]],
                [1000],
                1, 1, "", "", ""
            ];
        };
        default {
            deleteVehicle _src;
        };
    };

    _src setDropInterval 0.01;
};


/*
    Script: real_fix_grenade_deflection.sqf
    Descripción: Simula ajustes de rebote y desaceleración para granadas vanilla.
    Autor original: amartyn, Freghar | Conversión: ChatGPT
*/

// Este script debe ejecutarse en el init.sqf así:
// [] execVM "scripts/real_fix_grenade_deflection.sqf";

[] spawn {
    waitUntil { time > 0 };

    {
        private _ammo = _x;

        if (isClass (configFile >> "CfgAmmo" >> _ammo)) then {
            missionNamespace setVariable [format ["%1_deflection", _ammo], getNumber (configFile >> "CfgAmmo" >> _ammo >> "deflecting")];
            missionNamespace setVariable [format ["%1_slowdown", _ammo], getNumber (configFile >> "CfgAmmo" >> _ammo >> "deflectionSlowDown")];
        };
    } forEach [
        "Grenade",
        "GrenadeHand",
        "mini_Grenade",
        "SmokeShell",
        "G_40mm_Smoke"
    ];

    // Log de verificación
    diag_log "[real_fix_grenade_deflection] Deflexión de granadas cargada.";
};

//Functions
real_fnc_sfx_bodyfall = {

	private ["_unit","_eyePosZ","_surfaceType","_obj","_time","_sound"];
	_unit = _this;

	if (player distance _unit > 150) exitWith {};
	if (stance _unit == "PRONE") exitWith {};
	if ((vehicle _unit != _unit )) exitWith {};

	_eyePosZ = ((ASLToATL(eyePos _unit)) select 2);
	_surfaceType = surfaceType (getPosWorld _unit);
	_obj = "Land_HelipadEmpty_F" createVehicleLocal [0,0,0];
	_obj attachTo [_unit,[0,0,1]];
	_time = time;

	if ((surfaceIsWater getPosWorld _unit) && (_eyePosZ >= 0.5)) exitWith {
	waitUntil {((ASLToATL(eyePos _unit)) select 2) <= 0.7 || (time > (_time + 2))};
	_obj say3D (real_sfx_unit_bodyfall_water select floor random real_sfx_unit_bodyfall_water_size);
	sleep 2;
	deleteVehicle _obj;
	};

	_sound = switch (_surfaceType) do {
		case "#GdtVRsurface01": {real_sfx_unit_bodyfall_virtual select floor random real_sfx_unit_bodyfall_virtual_size};
		case "#BCGrass1";
		case "#BCGrass2";
		case "#BCGrass3";
		case "#BCGrassW1";
		case "#BCGrassW2";
		case "#CRGrass1";
		case "#CRGrass2";
		case "#CRGrassW1";
		case "#CRGrassW2";
		case "#CRSGrass1";
		case "#CRSGrass2";
		case "#CRSGrassW1";
		case "#CRSGrassW2";
		case "#GdtGrassLong";
		case "#GdtGrassShort";
		case "#GdtGrassTall";
		case "#GdtKlField";
		case "#GdtKLGrass1";
		case "#GdtKlStubble";
		case "#GdtStratisGreenGrass";
		case "#Grass";
		case "#GrassSouth";
		case "#GZTrava";
		case "#TKPole";
		case "#UTGrass";
		case "#WLGrass1";
		case "#WLGrass2";
		case "#WLGrassW1";
		case "#WLGrassW2";
		case "#ZRPole";
		case "#GdtGrassGreen": {real_sfx_unit_bodyfall_grass select floor random real_sfx_unit_bodyfall_grass_size};
		case "#BCForest1";
		case "#BCForest2";
		case "#BCHeather";
		case "#CRForest1";
		case "#CRForest2";
		case "#CRHeather";
		case "#CRSForest1";
		case "#CRSForest2";
		case "#CRSHeather";
		case "#D2Grass";
		case "#DBTrava";
		case "#DETrava";
		case "#ForestLeaves";
		case "#ForestNeedles";
		case "#GdtForestMalden";
		case "#GdtForestPine";
		case "#GdtGrassWild";
		case "#GdtKLGrass2";
		case "#GdtStratisDryGrass";
		case "#GdtStratisForestPine";
		case "#GdtWeed";
		case "#GdtWildField";
		case "#TKPlevel";
		case "#TKTrava";
		case "#UTForest";
		case "#UTHeather";
		case "#UTWeeds";
		case "#WCHeather";
		case "#WLForest1";
		case "#WLForest2";
		case "#WLHeather";
		case "#ZRPlevel";
		case "#ZRTrava";
		case "#GdtGrassDry": {real_sfx_unit_bodyfall_drygrass select floor random real_sfx_unit_bodyfall_drygrass_size};
		case "#AiA_Mud";
		case "#Asfalt";
		case "#BCField1";
		case "#BCGrit1";
		case "#BCMudGround";
		case "#BCTarmac";
		case "#CityGround";
		case "#CRField1";
		case "#CRField2";
		case "#CRGrit1";
		case "#CRHlina";
		case "#CRMudGround";
		case "#CRTarmac";
		case "#CRSField1";
		case "#CRSField2";
		case "#CRSHlina";
		case "#CRSMudGround";
		case "#CRSSterk";
		case "#CRSTarmac";
		case "#CRSterk";
		case "#D2City";
		case "#DBPolopoust";
		case "#DEPolopoust";
		case "#dirtrunway";
		case "#DryGround";
		case "#Field1";
		case "#GdtDirt";
		case "#GdtField";
		case "#GdtForest";
		case "#GdtKLDirt";
		case "#GdtKLForestCon";
		case "#GdtKLForestDec";
		case "#GdtKlSoil";
		case "#GdtMarsh";
		case "#GdtMud";
		case "#GdtRedDirt";
		case "#GdtSeabed";
		case "#GdtStratisDirt";
		case "#GdtStratisRocky";
		case "#GdtStratisSeabed";
		case "#GdtStratisThistles";
		case "#GdtVolcano";
		case "#grav_dirt";
		case "#GZforest";
		case "#GZHlina";
		case "#GZkameny";
		case "#Hlina";
		case "#mud";
		case "#mud_gravel";
		case "#MudBuilding";
		case "#path_dirt";
		case "#Pesina";
		case "#TKDirtRoad";
		case "#TKForest";
		case "#TKHlina";
		case "#TKMoutain";
		case "#TKPolopoust";
		case "#UTGravel";
		case "#UTGround";
		case "#WCField1";
		case "#WCField2";
		case "#WCForest1";
		case "#WCForest2";
		case "#WCGrass1";
		case "#WCGrass2";
		case "#WCGrassW1";
		case "#WCGrassW2";
		case "#WCHlina";
		case "#WCSterk";
		case "#WCTarmac";
		case "#WLField1";
		case "#WLGrit1";
		case "#WLMudGround";
		case "#WLTarmac";
		case "#ZRHlina";
		case "#ZRPolopoust";
		case "#GdtSoil": {real_sfx_unit_bodyfall_gravel select floor random real_sfx_unit_bodyfall_gravel_size};
		case "#D2Sand";
		case "#GdtDead";
		case "#GdtDesert";
		case "#GdtStratisBeach";
		case "#GdtVolcanoBeach";
		case "#sand";
		case "#sand_exp";
		case "#SandBeach";
		case "#SandBuilding";
		case "#SandDesert";
		case "#SandGeneral";
		case "#GdtBeach": {real_sfx_unit_bodyfall_sand select floor random real_sfx_unit_bodyfall_sand_size};
		case "#SurfWater";
		case "#Water";
		case "#Freshwater": {real_sfx_unit_bodyfall_water select floor random real_sfx_unit_bodyfall_water_size};
		case default {real_sfx_unit_bodyfall_concrete select floor random real_sfx_unit_bodyfall_concrete_size};
	};

	if ((_eyePosZ > 0) && (_eyePosZ <= 1.8)) exitWith {
		waitUntil {((ASLToATL(eyePos _unit)) select 2) <= 0.7 || (time > (_time + 2))};
		_obj say3D _sound;
		sleep 2;
		deleteVehicle _obj;
	};

	if (_eyePosZ >= 2) exitWith {
		waitUntil {((ASLToATL(eyePos _unit)) select 2) <= (_eyePosZ-0.9) || (time > (_time + 2))};
		_obj say3D _sound;
		sleep 2;
		deleteVehicle _obj;
	};
};

{
	_x addEventHandler ["Killed", {(_this select 0) spawn real_fnc_sfx_bodyfall;}];
} forEach allUnits

