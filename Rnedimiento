/*
    üöÄ OPTIMIZACI√ìN DE RENDIMIENTO AVANZADA PARA ARMA 3 üöÄ
    Versi√≥n: 3.3 - L√≠mite Estricto + Optimizaci√≥n Completa (Simplificado)

    üåü Script: Mejoras VFX 
    üë®‚Äçüíª Autor: Vianna & Enkeli
    üìÖ Creaci√≥n: 2025-05-20
*/

// ===== DEFINICI√ìN DE PAR√ÅMETROS Y VARIABLES GLOBALES =====
if (isNil "_this") then {_this = [300, 2000, true, true, true, true]};
params [
    ["_radioSimulacionParam", 50, [0]],         // Radio de simulaci√≥n completa
    ["_distanciaMaximaParam", 1000, [0]],        // Distancia m√°xima para optimizaci√≥n
    ["_optimizarIAParam", true, [true]],         // Activar optimizaci√≥n de IA
    ["_optimizarVehiculosParam", true, [true]],  // Activar optimizaci√≥n de veh√≠culos
    ["_optimizarObjetosParam", true, [true]],    // Activar optimizaci√≥n de objetos
    ["_optimizarDecoracionesParam", true, [true]] // Activar optimizaci√≥n de decoraciones
];

// üîç Comprobaci√≥n de CBA y ACE
OPT_tieneCBA = isClass (configFile >> "CfgPatches" >> "cba_main");
OPT_tieneACE = isClass (configFile >> "CfgPatches" >> "ace_main");

// üõ†Ô∏è Funci√≥n auxiliar para compatibilidad
OPT_fnc_pushBackUnique = {
    params ["_array", "_elemento"];
    if !(_elemento in _array) then {
        _array pushBack _elemento;
    };
    _array
};

// üìù Variables globales para mantener los par√°metros accesibles
OPT_radioSimulacion = _radioSimulacionParam;
OPT_distanciaMaxima = _distanciaMaximaParam;
OPT_optimizarIA = _optimizarIAParam;
OPT_optimizarVehiculos = _optimizarVehiculosParam;
OPT_optimizarObjetos = _optimizarObjetosParam;
OPT_optimizarDecoraciones = _optimizarDecoracionesParam;

// üìå Otras variables globales necesarias
OPT_activo = true;
OPT_entidadesGestionadas = [];
OPT_cacheTiempo = time;
OPT_intervaloCacheado = 5;
OPT_ultimaPosJugador = [0,0,0];
OPT_distanciaMovimiento = 50;
OPT_sectores = [];
OPT_sectorActual = "";
OPT_marcoSectores = 1000;
OPT_nivelLog = 0;
OPT_vehiculoActual = objNull;
OPT_radioSimulacionOriginal = OPT_radioSimulacion;
OPT_cadaveresPendientes = [];
OPT_tiempoRagdoll = 5; // Tiempo para permitir la f√≠sica ragdoll (segundos)
OPT_enHeadless = !hasInterface && !isDedicated;
OPT_esSingleplayer = !isMultiplayer;
OPT_esMultiplayer = isMultiplayer;
OPT_esServidor = isServer;
OPT_esCliente = hasInterface;
OPT_eventosImportantes = [];
OPT_ultimoEvento = time;
OPT_objetosPequenos = [];
OPT_clasesDecorativas = ["Furniture_base_F", "Items_base_F", "House_Small_F", "HouseDecorations_base_F", "Tableware_base_F"];
OPT_ultimaLimpieza = time;
OPT_radioDecoraciones = 50; // Radio para optimizaci√≥n de decoraciones (m√°s agresivo)
OPT_version = "3.3";
OPT_radioJugadores = 50; // Radio para detectar jugadores cercanos
OPT_todosJugadores = []; // Array para almacenar todos los jugadores
OPT_zeusActivo = false; // Variable para controlar si el Zeus est√° activo
OPT_ultimaComprobacionZeus = time; // √öltima comprobaci√≥n de Zeus
OPT_intervaloComprobacionZeus = 1; // Comprobar Zeus cada segundo

// === VARIABLES PARA L√çMITE DE VISIBILIDAD ===
OPT_limiteVisibilidad = 1010; // L√≠mite en metros para hacer objetos invisibles
OPT_distanciaVisionForzada = 999; // Distancia de visi√≥n forzada
OPT_altitudVuelo = 30; // Metros sobre el terreno para considerar que est√° volando
OPT_estaVolando = false; // Estado actual de vuelo del jugador
OPT_viewDistanciaOriginal = viewDistance; // Guardar vista original
OPT_objectViewDistanciaOriginal = []; // Guardaremos el array completo aqu√≠
OPT_ultimaComprobacionVuelo = time; // √öltima vez que comprobamos si est√° volando
OPT_intervaloComprobacionVuelo = 1; // Comprobar cada segundo si est√° volando
OPT_procesarLimiteVisibilidad = true; // Si se debe procesar el l√≠mite de visibilidad
OPT_ultimaForzadoVista = time; // √öltimo tiempo que se forz√≥ la vista
OPT_intervaloForzadoVista = 1; // Intervalo para forzar la vista (cada segundo)
OPT_objetosLejanos = []; // Objetos fuera del l√≠mite de visibilidad
OPT_ultimoEscaneoObjetos = time; // √öltimo escaneo de objetos lejanos
OPT_intervaloEscaneoObjetos = 5; // Intervalo para escanear objetos lejanos
OPT_clasesTerrenoExcluidas = ["Land_VR_Shape_01_cube_1m_F"]; // Objetos que no se deben ocultar
OPT_displayListo = false; // Indica si el display ya est√° listo

// ===== SISTEMA DE LOG VAC√çO =====
OPT_fnc_log = {
    // Funci√≥n vac√≠a para eliminar todos los mensajes de debug
};

// ===== FUNCI√ìN PARA COMPROBAR SI HAY ZEUS ACTIVO =====
OPT_fnc_esZeusActivo = {
    if (isNull player) then {
        false
    } else {
        // Verificar si el jugador actual es Zeus
        private _esZeus = !isNull (getAssignedCuratorLogic player);
        
        // Si no es Zeus, comprobar si est√° visible el interfaz de Zeus
        if (!_esZeus) then {
            private _zeusDisplay = findDisplay 312; // ID del display de Zeus
            (!isNull _zeusDisplay)
        } else {
            true
        };
    };
};

// ===== FUNCI√ìN PARA COMPROBAR SI EL JUGADOR EST√Å VOLANDO =====
OPT_fnc_estaVolando = {
    if (isNull player) then {
        false
    } else {
        // Si est√° en un veh√≠culo a√©reo
        if (vehicle player != player) then {
            private _veh = vehicle player;
            // Usar varias comprobaciones para mayor compatibilidad
            if (_veh isKindOf "Air" || _veh isKindOf "Helicopter" || _veh isKindOf "Plane") then {
                true
            } else {
                // O si est√° muy por encima del terreno
                private _altitud = (getPosASL player) select 2;
                private _altitudTerreno = getTerrainHeightASL (getPos player);
                private _diferencia = _altitud - _altitudTerreno;
                (_diferencia > OPT_altitudVuelo)
            };
        } else {
            // O si est√° muy por encima del terreno
            private _altitud = (getPosASL player) select 2;
            private _altitudTerreno = getTerrainHeightASL (getPos player);
            private _diferencia = _altitud - _altitudTerreno;
            (_diferencia > OPT_altitudVuelo)
        };
    };
};

// ===== FUNCI√ìN PARA FORZAR DISTANCIA DE VISI√ìN (SIMPLIFICADA) =====
OPT_fnc_forzarDistanciaVision = {
    // Versi√≥n super simplificada para evitar errores
    setViewDistance OPT_distanciaVisionForzada;
    setObjectViewDistance OPT_distanciaVisionForzada;
    
    // Intentar establecer la configuraci√≥n de terreno si est√° disponible
    if (!isNil "setTerrainGrid") then {
        setTerrainGrid 25;
    };
};

// ===== FUNCI√ìN PARA OCULTAR OBJETOS FUERA DEL L√çMITE (SIMPLIFICADA) =====
OPT_fnc_ocultarObjetosLejanos = {
    // Solo ejecutar si tenemos interfaz y el jugador existe
    if (!hasInterface) then {
        // Nada que hacer en servidor sin interfaz
    } else {
        if (isNull player) then {
            // Nada que hacer si el jugador no existe
        } else {
            private _posJugador = getPosATL player;
            
            // Restaurar visibilidad si est√° volando
            if (OPT_estaVolando || OPT_zeusActivo) then {
                {
                    if (!isNull _x) then {
                        _x hideObjectGlobal false;
                        _x enableSimulationGlobal true;
                    };
                } forEach OPT_objetosLejanos;
                
                // Limpiar la lista
                OPT_objetosLejanos = [];
            } else {
                // No est√° volando, procesar ocultar objetos
                if (time > OPT_ultimoEscaneoObjetos + OPT_intervaloEscaneoObjetos) then {
                    OPT_ultimoEscaneoObjetos = time;
                    
                    // Categor√≠as a escanear
                    private _categorias = ["Building", "House", "Static"];
                    private _objetosEncontrados = [];
                    
                    // Escanear objetos
                    {
                        private _categoria = _x;
                        private _objetos = nearestObjects [_posJugador, [_categoria], OPT_limiteVisibilidad * 2];
                        
                        {
                            if (!isNull _x && {!(_x isKindOf "Logic")} && {_x != player}) then {
                                _objetosEncontrados pushBack _x;
                            };
                        } forEach _objetos;
                    } forEach _categorias;
                    
                    // Restaurar visibilidad de objetos anteriores
                    {
                        if (!isNull _x) then {
                            _x hideObjectGlobal false;
                            _x enableSimulationGlobal true;
                        };
                    } forEach OPT_objetosLejanos;
                    
                    // Reiniciar lista
                    OPT_objetosLejanos = [];
                    
                    // Procesar nuevos objetos encontrados
                    {
                        private _distancia = _x distance _posJugador;
                        
                        // Si est√° fuera del l√≠mite, ocultar
                        if (_distancia > OPT_limiteVisibilidad) then {
                            OPT_objetosLejanos pushBack _x;
                            _x hideObjectGlobal true;
                            _x enableSimulationGlobal false;
                        };
                    } forEach _objetosEncontrados;
                } else {
                    // Si no es tiempo de escanear, solo reforzar ocultaci√≥n
                    {
                        if (!isNull _x) then {
                            _x hideObjectGlobal true;
                            _x enableSimulationGlobal false;
                        };
                    } forEach OPT_objetosLejanos;
                };
            };
        };
    };
};

// üó∫Ô∏è Generar sectores del mapa
OPT_fnc_generarSectores = {
    private _mapSize = worldSize;
    private _numSectores = ceil (_mapSize / OPT_marcoSectores);
    
    for "_x" from 0 to (_numSectores - 1) do {
        for "_y" from 0 to (_numSectores - 1) do {
            private _sectorID = format ["sector_%1_%2", _x, _y];
            private _centro = [
                (_x * OPT_marcoSectores) + (OPT_marcoSectores / 2),
                (_y * OPT_marcoSectores) + (OPT_marcoSectores / 2),
                0
            ];
            OPT_sectores pushBack [_sectorID, _centro];
        };
    };
};

// üìç Obtener sector actual del jugador
OPT_fnc_obtenerSectorJugador = {
    private _posJugador = if (OPT_enHeadless) then {
        missionNamespace getVariable ["OPT_posicionJugadorGlobal", [0,0,0]]
    } else {
        if (!isNull player) then {
            getPosATL player
        } else {
            [0,0,0]
        };
    };
    
    private _x = floor ((_posJugador select 0) / OPT_marcoSectores);
    private _y = floor ((_posJugador select 1) / OPT_marcoSectores);
    private _sectorID = format ["sector_%1_%2", _x, _y];
    
    if (_sectorID != OPT_sectorActual) then {
        OPT_sectorActual = _sectorID;
    };
    
    _sectorID
};

// üë• Verificar si hay jugadores cercanos a la entidad
OPT_fnc_hayJugadoresCercanos = {
    params ["_entidad"];
    
    private _result = false;
    
    {
        if (_x distance _entidad < OPT_radioJugadores) exitWith {
            _result = true;
        };
    } forEach OPT_todosJugadores;
    
    _result
};

// üìä Calcular prioridad basada en distancia, jugadores cercanos y sector
OPT_fnc_calcularPrioridad = {
    params ["_entidad"];
    
    // Comprobar si hay jugadores cercanos (dentro de 1000m)
    private _hayJugadoresCercanos = [_entidad] call OPT_fnc_hayJugadoresCercanos;
    
    // Si no hay jugadores cercanos, poner prioridad m√°s baja (para ocultar)
    if (!_hayJugadoresCercanos) then {
        99 // Sin prioridad - ser√° ocultado
    } else {
        // Obtener posici√≥n del jugador local para c√°lculos
        private _posJugador = if (OPT_enHeadless) then {
            missionNamespace getVariable ["OPT_posicionJugadorGlobal", [0,0,0]]
        } else {
            if (!isNull player) then {
                getPosATL player
            } else {
                [0,0,0]
            };
        };
        
        private _distancia = _posJugador distance _entidad;
        
        // Si Zeus est√° activo, no ocultamos objetos m√°s all√° de cierta distancia
        if (OPT_zeusActivo && _distancia > 80) then {
            // En modo Zeus, todos los objetos mantienen simulaci√≥n reducida pero visible
            2 // Prioridad media para objetos en rango Zeus
        } else {
            // Si se aplica l√≠mite de visibilidad y el jugador no est√° volando ni Zeus activo
            if (!OPT_estaVolando && !OPT_zeusActivo && hasInterface && OPT_procesarLimiteVisibilidad) then {
                if (_distancia > OPT_limiteVisibilidad) then {
                    99 // Fuera del l√≠mite, ocultar
                } else {
                    // Dentro del l√≠mite, calcular prioridad normal
                    private _prioridad = 3; // Por defecto: baja prioridad
                    
                    // Verificar si es un objeto decorativo
                    private _esDecoracion = false;
                    if (OPT_optimizarDecoraciones) then {
                        {
                            if (_entidad isKindOf _x) exitWith {
                                _esDecoracion = true;
                            };
                        } forEach OPT_clasesDecorativas;
                        
                        // Si es decoraci√≥n, usar un radio m√°s peque√±o
                        if (_esDecoracion) then {
                            if (_distancia < OPT_radioDecoraciones) then {
                                _prioridad = 1;
                            } else {
                                _prioridad = 3; // Baja prioridad para decoraciones
                            };
                        };
                    };
                    
                    // Si no es decoraci√≥n, usar l√≥gica normal
                    if (!_esDecoracion) then {
                        // Prioridad basada en distancia al jugador
                        if (_distancia < OPT_radioSimulacion) then {
                            _prioridad = 1; // Alta prioridad: simulaci√≥n completa
                        } else {
                            if (_distancia < OPT_radioSimulacion * 2) then {
                                _prioridad = 2; // Media prioridad
                            };
                        };
                    };
                    
                    // Comprobar si est√° cerca de un evento importante
                    {
                        _x params ["_pos", "_radio", "_tiempoFin"];
                        
                        if (time <= _tiempoFin) then {
                            private _distEvento = _pos distance _entidad;
                            if (_distEvento < _radio) then {
                                // Cerca de un evento importante, aumentar prioridad
                                _prioridad = _prioridad - 1;
                                _prioridad = _prioridad max 1;
                            };
                        };
                    } forEach OPT_eventosImportantes;
                    
                    // Ajustes por tipo de entidad
                    if (_entidad isKindOf "CAManBase") then {
                        // Prioridad adicional para unidades en combate
                        if (behaviour _entidad == "COMBAT") then {
                            _prioridad = _prioridad max 2;
                        };
                        
                        // Prioridad adicional para l√≠deres de grupo
                        if (leader group _entidad == _entidad) then {
                            _prioridad = _prioridad max 2;
                        };
                    } else {
                        if (_entidad isKindOf "AllVehicles") then {
                            // Veh√≠culos con tripulaci√≥n siempre tienen mayor prioridad
                            if (count crew _entidad > 0) then {
                                _prioridad = _prioridad max 2;
                            };
                        };
                    };
                    
                    _prioridad
                };
            } else {
                // No aplicamos l√≠mite de visibilidad, calcular prioridad normal
                private _prioridad = 3; // Por defecto: baja prioridad
                
                if (_distancia < OPT_radioSimulacion) then {
                    _prioridad = 1; // Alta prioridad: simulaci√≥n completa
                } else {
                    if (_distancia < OPT_radioSimulacion * 2) then {
                        _prioridad = 2; // Media prioridad
                    };
                };
                
                _prioridad
            };
        };
    };
};

// üéÆ Aplicar optimizaci√≥n basada en prioridad
OPT_fnc_aplicarOptimizacion = {
    params ["_entidad", "_prioridad"];
    
    // Si ya est√° muerto, aplicar otra l√≥gica
    if (!alive _entidad && _entidad isKindOf "CAManBase") then {
        // Verificar si a√∫n est√° en periodo de ragdoll
        private _tiempoMuerte = _entidad getVariable ["OPT_tiempoMuerte", 0];
        private _hayJugadoresCercanos = [_entidad] call OPT_fnc_hayJugadoresCercanos;
        
        if (_tiempoMuerte > 0 && (time - _tiempoMuerte < OPT_tiempoRagdoll)) then {
            // A√∫n en periodo de ragdoll, dejar la simulaci√≥n activa
            _entidad enableSimulationGlobal true;
            _entidad hideObjectGlobal false;
        } else {
            // Si no hay jugadores cercanos, ocultar cad√°veres
            if (!_hayJugadoresCercanos) then {
                _entidad enableSimulationGlobal false;
                _entidad hideObjectGlobal true;
            } else {
                // Para cad√°veres, simplificamos la simulaci√≥n pero no los ocultamos
                _entidad enableSimulationGlobal false;
                _entidad hideObjectGlobal false;
            };
        };
    } else {
        // Para objetos normales
        switch (_prioridad) do {
            // ‚≠ê Alta prioridad: simulaci√≥n completa
            case 1: {
                _entidad enableSimulationGlobal true;
                _entidad hideObjectGlobal false;
                
				// Funci√≥n auxiliar para ejecutar comandos globales desde el servidor
OPT_fnc_setSimulationState = {
    params ["_objeto", "_simular", "_ocultar"];
    
    if (!isServer) exitWith {};
    
    _objeto enableSimulationGlobal _simular;
    _objeto hideObjectGlobal _ocultar;
};
				
                // Para IA, restauramos comportamiento completo
                if (_entidad isKindOf "CAManBase" && {!isPlayer _entidad}) then {
                    // Restaurar FSM de IA si fue simplificado
                    if (_entidad getVariable ["OPT_IASimplificada", false]) then {
                        _entidad setVariable ["OPT_IASimplificada", false];
                        // Restaurar comportamiento normal
                        _entidad allowFleeing 0.1;
                        _entidad enableAI "PATH";
                        _entidad enableAI "FSM";
                        _entidad enableAI "TARGET";
                    };
                };
                
                // Para efectos, restaurar si estaban desactivados
                if (_entidad isKindOf "WeaponHolder") then {
                    _entidad enableSimulationGlobal true;
                };
            };
            
            // ‚úÖ Media prioridad: simulaci√≥n reducida, visible
            case 2: {
                _entidad enableSimulationGlobal true;
                _entidad hideObjectGlobal false;
                
                // Para IA, simplificamos comportamiento
                if (_entidad isKindOf "CAManBase" && {!isPlayer _entidad}) then {
                    if !(_entidad getVariable ["OPT_IASimplificada", false]) then {
                        _entidad setVariable ["OPT_IASimplificada", true];
                        // Simplificar comportamiento
                        _entidad allowFleeing 1;
                        
                        // Si no est√° en combate, reducir a√∫n m√°s
                        if (behaviour _entidad != "COMBAT") then {
                            _entidad disableAI "FSM";
                        };
                    };
                };
            };
            
            // üü° Baja prioridad: simulaci√≥n m√≠nima, visible a distancia
            case 3: {
                _entidad enableSimulationGlobal false;
                _entidad hideObjectGlobal false;
                
                // Para IA, guardar estado si hace falta
                if (_entidad isKindOf "CAManBase" && {!isPlayer _entidad}) then {
                    if !(_entidad getVariable ["OPT_IASimplificada", true]) then {
                        _entidad setVariable ["OPT_IASimplificada", true];
                    };
                    
                    // Desactivar IA compleja
                    _entidad disableAI "FSM";
                    _entidad disableAI "TARGET";
                };
            };
            
            // Sin prioridad: desactivar y ocultar (solo cuando NO hay jugadores cerca o fuera de l√≠mite de visibilidad)
            default {
                _entidad enableSimulationGlobal false;
                _entidad hideObjectGlobal true;
            };
        };
    };
};

// üîç Funci√≥n para procesar entidad individual
OPT_fnc_procesarEntidad = {
    params ["_entidad"];
    
    // Ignorar jugadores y objetos no gestionables
    if (isPlayer _entidad) exitWith {};
    if !(_entidad in OPT_entidadesGestionadas) exitWith {};
    
    // Verificar si la entidad est√° asignada a este cliente
    if (OPT_enHeadless) then {
        private _asignadoA = _entidad getVariable ["OPT_asignadoA", 0];
        if (_asignadoA > 0 && _asignadoA != clientOwner) exitWith {};
    };
    
    // Calcular prioridad
    private _prioridad = [_entidad] call OPT_fnc_calcularPrioridad;
    
    // Aplicar optimizaci√≥n
    [_entidad, _prioridad] call OPT_fnc_aplicarOptimizacion;
};

// üíÄ Funci√≥n para procesar ragdoll de cad√°veres
OPT_fnc_procesarCadaveres = {
    // Procesar cada cad√°ver pendiente
    {
        private _cadaver = _x;
        private _tiempoMuerte = _cadaver getVariable ["OPT_tiempoMuerte", 0];
        
        // Si ya pas√≥ el tiempo de ragdoll
        if (time - _tiempoMuerte >= OPT_tiempoRagdoll) then {
            // Procesar el cad√°ver normalmente
            [_cadaver] call OPT_fnc_procesarEntidad;
            OPT_cadaveresPendientes = OPT_cadaveresPendientes - [_cadaver];
        };
    } forEach OPT_cadaveresPendientes;
    
    // Limpiar cad√°veres nulos
    OPT_cadaveresPendientes = OPT_cadaveresPendientes select {!isNull _x};
};

// ‚ûï Registrar entidad para gesti√≥n
OPT_fnc_registrarEntidad = {
    params ["_entidad"];
    
    // No registrar jugadores, entidades nulas o ya registradas
    if (isNull _entidad) then {
        // No hacer nada con entidades nulas
    } else {
        if (isPlayer _entidad) then {
            // No hacer nada con jugadores
        } else {
            if (_entidad in OPT_entidadesGestionadas) then {
                // Ya est√° registrada
            } else {
                // Para decoraciones, filtrar y registrar si corresponde
                if (OPT_optimizarDecoraciones) then {
                    {
                        if (_entidad isKindOf _x) exitWith {
                            if (OPT_tieneCBA) then {
                                OPT_objetosPequenos pushBackUnique _entidad;
                                OPT_entidadesGestionadas pushBackUnique _entidad;
                            } else {
                                [OPT_objetosPequenos, _entidad] call OPT_fnc_pushBackUnique;
                                [OPT_entidadesGestionadas, _entidad] call OPT_fnc_pushBackUnique;
                            };
                            _entidad setVariable ["OPT_EsDecoracion", true];
                        };
                    } forEach OPT_clasesDecorativas;
                };
                
                // Si no era decoraci√≥n o ya fue registrada como tal
                if !(_entidad in OPT_entidadesGestionadas) then {
                    // Registrar y guardar estado original
                    OPT_entidadesGestionadas pushBack _entidad;
                };
                
                // Variables iniciales para seguimiento
                _entidad setVariable ["OPT_IASimplificada", false];
                _entidad setVariable ["OPT_ultimoProcesado", time];
                _entidad setVariable ["OPT_Muerto", false];
                _entidad setVariable ["OPT_tiempoMuerte", 0];
                
                // Procesar inicialmente
                [_entidad] call OPT_fnc_procesarEntidad;
                
                // Agregar controlador para muerte
                if (_entidad isKindOf "CAManBase") then {
                    _entidad addEventHandler ["Killed", {
                        params ["_unit"];
                        _unit setVariable ["OPT_Muerto", true];
                        _unit setVariable ["OPT_tiempoMuerte", time];
                        
                        // A√±adir a la lista de cad√°veres pendientes para permitir ragdoll
                        if (OPT_tieneCBA) then {
                            OPT_cadaveresPendientes pushBackUnique _unit;
                        } else {
                            [OPT_cadaveresPendientes, _unit] call OPT_fnc_pushBackUnique;
                        };
                        
                        // Asegurarse que la simulaci√≥n est√° activada durante el tiempo de ragdoll
                        _unit enableSimulationGlobal true;
                        
                        // Registrar como evento importante
                        [getPosATL _unit, 30, 15] call OPT_fnc_registrarEvento;
                    }];
                };
            };
        };
    };
};

// üéØ Sistema de eventos importantes
OPT_fnc_registrarEvento = {
    params ["_posicion", "_radio", "_duracion"];
    
    OPT_eventosImportantes pushBack [_posicion, _radio, time + _duracion];
    OPT_ultimoEvento = time;
    
    // Forzar actualizaci√≥n de entidades cercanas
    {
        if (_x distance _posicion < _radio * 1.5) then {
            [_x] call OPT_fnc_procesarEntidad;
        };
    } forEach OPT_entidadesGestionadas;
};

// üîÑ Actualizar cach√©s
OPT_fnc_actualizarCache = {
    if (time < OPT_cacheTiempo + OPT_intervaloCacheado) then {
        // Nada que hacer todav√≠a
    } else {
        OPT_cacheTiempo = time;
        
        // Compartir posici√≥n del jugador con headless clients
        if (!OPT_enHeadless && hasInterface && !isNull player) then {
            missionNamespace setVariable ["OPT_posicionJugadorGlobal", getPosATL player, true];
        };
		
		// Sincronizar otras variables importantes
        if (isServer) then {
           missionNamespace setVariable ["OPT_eventosImportantes", OPT_eventosImportantes, true];
           missionNamespace setVariable ["OPT_ultimoEvento", OPT_ultimoEvento, true];
           missionNamespace setVariable ["OPT_estaVolando", OPT_estaVolando, true];
           missionNamespace setVariable ["OPT_zeusActivo", OPT_zeusActivo, true];
        };
        
        // Forzar distancia de visi√≥n si tiene interfaz
        if (hasInterface && !isNull player) then {
            if (time > OPT_ultimaForzadoVista + OPT_intervaloForzadoVista) then {
                OPT_ultimaForzadoVista = time;
                call OPT_fnc_forzarDistanciaVision;
            };
            
            // Actualizar estado de vuelo cada cierto tiempo
            if (time > OPT_ultimaComprobacionVuelo + OPT_intervaloComprobacionVuelo) then {
                OPT_ultimaComprobacionVuelo = time;
                private _nuevoEstadoVuelo = call OPT_fnc_estaVolando;
                
                // Si el estado cambi√≥, procesar todas las entidades
                if (_nuevoEstadoVuelo != OPT_estaVolando) then {
                    OPT_estaVolando = _nuevoEstadoVuelo;
                    
                    // Reprocesar todas las entidades para actualizar visibilidad
                    {
                        if (!isNull _x && !isPlayer _x) then {
                            [_x] call OPT_fnc_procesarEntidad;
                        };
                    } forEach OPT_entidadesGestionadas;
                };
            };
            
            // Ocultar objetos lejanos
            call OPT_fnc_ocultarObjetosLejanos;
        };
        
        // Actualizar sector
        call OPT_fnc_obtenerSectorJugador;
        
        // Actualizar lista de jugadores (para comprobaciones de proximidad)
        OPT_todosJugadores = allPlayers - entities "HeadlessClient_F";
        
        // Gestionar nuevas entidades
        {
            if !(_x in OPT_entidadesGestionadas) then {
                if (!isPlayer _x) then {
                    [_x] call OPT_fnc_registrarEntidad;
                };
            };
        } forEach (allUnits + vehicles);
        
        // Eliminar entidades eliminadas de la lista
        OPT_entidadesGestionadas = OPT_entidadesGestionadas select {!isNull _x};
        
        // Limpiar eventos caducados
        if (time - OPT_ultimoEvento > 10) then {
            OPT_eventosImportantes = OPT_eventosImportantes select {(_x select 2) > time};
        };
        
        // Verificar si es momento de limpieza profunda
        if (time - OPT_ultimaLimpieza > 900) then { // Cada 15 minutos
            [] spawn OPT_fnc_limpiezaProfunda;
            OPT_ultimaLimpieza = time;
        };
    };
};

// Comprobar Zeus cada cierto tiempo
if (time > OPT_ultimaComprobacionZeus + OPT_intervaloComprobacionZeus) then {
    OPT_ultimaComprobacionZeus = time;
    private _nuevoEstadoZeus = call OPT_fnc_esZeusActivo;
    
    // Si el estado de Zeus cambi√≥, procesar todas las entidades
    if (_nuevoEstadoZeus != OPT_zeusActivo) then {
        OPT_zeusActivo = _nuevoEstadoZeus;
        
        if (OPT_zeusActivo) then {
            // Notificar activaci√≥n de Zeus
            systemChat "Zeus activado: Sistema de ocultamiento desactivado";
        } else {
            // Notificar desactivaci√≥n de Zeus
            systemChat "Zeus desactivado: Sistema de ocultamiento reactivado";
        };
        
        // Reprocesar todas las entidades para actualizar visibilidad
        {
            if (!isNull _x && !isPlayer _x) then {
                [_x] call OPT_fnc_procesarEntidad;
            };
        } forEach OPT_entidadesGestionadas;
    };
};

// üîÑ Bucle principal de optimizaci√≥n
OPT_fnc_bucleOptimizacion = {
    while {OPT_activo} do {
        // Comprobamos si hay que actualizar cach√©s
        call OPT_fnc_actualizarCache;
        
        // Procesar cad√°veres pendientes
        call OPT_fnc_procesarCadaveres;
        
        // Comprobar si el jugador se ha movido lo suficiente
        private _posJugador = if (OPT_enHeadless) then {
            missionNamespace getVariable ["OPT_posicionJugadorGlobal", [0,0,0]]
        } else {
            if (!isNull player) then {
                getPosATL player
            } else {
                [0,0,0]
            };
        };
        
        if (OPT_ultimaPosJugador distance _posJugador > OPT_distanciaMovimiento) then {
            OPT_ultimaPosJugador = _posJugador;
            
            // Forzar distancia de visi√≥n al moverse
            if (hasInterface && !isNull player) then {
                call OPT_fnc_forzarDistanciaVision;
            };
            
            // Procesar entidades prioritarias
            {
                if (_x distance _posJugador < OPT_radioSimulacion * 2) then {
                    [_x] call OPT_fnc_procesarEntidad;
                };
            } forEach OPT_entidadesGestionadas;
            
            // Procesar objetos decorativos cercanos con m√°s frecuencia
            if (OPT_optimizarDecoraciones) then {
                {
                    if (_x distance _posJugador < OPT_radioDecoraciones * 2) then {
                        [_x] call OPT_fnc_procesarEntidad;
                    };
                } forEach OPT_objetosPequenos;
            };
        };
        
        // Procesar un lote de entidades cada iteraci√≥n
        private _lote = floor(5 + (count OPT_entidadesGestionadas / 20)); // Cantidad adaptativa
        _lote = _lote min 25 max 5; // Entre 5 y 25 por ciclo
        
        private _procesados = 0;
        {
            // Entidades que han sido procesadas hace m√°s de 5 segundos
            if (time > (_x getVariable ["OPT_ultimoProcesado", 0]) + 5) then {
                // No procesar cad√°veres en periodo de ragdoll
                if !(_x in OPT_cadaveresPendientes) then {
                    [_x] call OPT_fnc_procesarEntidad;
                    _x setVariable ["OPT_ultimoProcesado", time];
                    _procesados = _procesados + 1;
                };
                
                // Limitar la cantidad por ciclo
                if (_procesados >= _lote) then {
                    // Salir del bucle
                };
            };
        } forEach OPT_entidadesGestionadas;
        
        sleep 0.1; // Ejecutar 10 veces por segundo es suficiente y menos costoso
    };
};

// üöó Funci√≥n para agregar evento de entrada/salida de veh√≠culo
OPT_fnc_agregarEventosVehiculo = {
    if (!hasInterface || isNull player) then {
        // Nada que hacer sin interfaz o jugador
    } else {
        player addEventHandler ["GetInMan", {
            params ["_unit", "_position", "_vehicle"];
            OPT_vehiculoActual = _vehicle;
            
            // Al entrar en veh√≠culo, aumentamos radio de simulaci√≥n
            OPT_radioSimulacion = OPT_radioSimulacionOriginal * 1.5;
        }];
        
        player addEventHandler ["GetOutMan", {
            params ["_unit", "_position", "_vehicle"];
            OPT_vehiculoActual = objNull;
            
            // Al salir del veh√≠culo, restauramos radio de simulaci√≥n original
            OPT_radioSimulacion = OPT_radioSimulacionOriginal;
        }];
        
        // Evento para armas, registra el evento importante
        player addEventHandler ["Fired", {
            params ["_unit", "_weapon", "_muzzle", "_mode", "_ammo", "_magazine", "_projectile", "_gunner"];
            
            // Solo para armas significativas
            if (_weapon != "Throw" && _weapon != "Put") then {
                // Radio y duraci√≥n proporcionales al calibre
                private _calibre = getNumber (configFile >> "CfgAmmo" >> _ammo >> "caliber");
                private _radio = 50 + (_calibre * 5);
                private _duracion = 5 + (_calibre * 0.5);
                
                // Registrar el evento
                [getPosATL _unit, _radio, _duracion] call OPT_fnc_registrarEvento;
            } else {
                // Para granadas y explosivos
                if (_ammo isKindOf "GrenadeBase" || _ammo isKindOf "TimeBombCore") then {
                    // Registrar evento con un retardo para la detonaci√≥n
                    [_projectile, _unit] spawn {
                        params ["_proyectil", "_unidad"];
                        private _posInicial = getPosATL _proyectil;
                        sleep 3; // Tiempo aproximado para detonaci√≥n
                        if (!isNull _proyectil) then {
                            [getPosATL _proyectil, 75, 15] call OPT_fnc_registrarEvento;
                        } else {
                            [_posInicial, 75, 15] call OPT_fnc_registrarEvento;
                        };
                    };
                };
            };
        }];
        
        // Registrar eventos de explosiones mediante el sistema de armas
        if (OPT_tieneACE) then {
            // Si usa ACE
            ["ace_explosives_detonated", {
                params ["_explosive"];
                private _position = getPosATL _explosive;
                [_position, 100, 20] call OPT_fnc_registrarEvento;
            }] call CBA_fnc_addEventHandler;
        };
        
        // A√±adir manejador de eventos para resistir intentos del jugador de cambiar la distancia
        (findDisplay 46) displayAddEventHandler ["KeyDown", {
            // Forzar vista cada vez que se presiona una tecla
            call OPT_fnc_forzarDistanciaVision;
            false
        }];
    };
};

// üîç Funci√≥n para detectar y registrar objetos decorativos
OPT_fnc_detectarDecoraciones = {
    if (!OPT_optimizarDecoraciones) then {
        // No hacer nada si no est√° activada la optimizaci√≥n
    } else {
        // Buscar decoraciones en el radio relevante
        private _posJugador = if (OPT_enHeadless) then {
            missionNamespace getVariable ["OPT_posicionJugadorGlobal", [0,0,0]]
        } else {
            if (!isNull player) then {
                getPosATL player
            } else {
                [0,0,0]
            };
        };
        
        private _objetosEncontrados = 0;
        {
            private _clase = _x;
            private _objetos = nearestObjects [_posJugador, [_clase], OPT_distanciaMaxima];
            
            {
                if !(_x in OPT_entidadesGestionadas) then {
                    if (!isPlayer _x) then {
                        [_x] call OPT_fnc_registrarEntidad;
                        _objetosEncontrados = _objetosEncontrados + 1;
                    };
                };
            } forEach _objetos;
        } forEach OPT_clasesDecorativas;
        
        // Programar pr√≥xima b√∫squeda
        if (OPT_tieneCBA) then {
            [OPT_fnc_detectarDecoraciones, [], 60] call CBA_fnc_waitAndExecute;
        } else {
            [] spawn {
                sleep 60;
                call OPT_fnc_detectarDecoraciones;
            };
        };
    };
};

// ===== INICIALIZACI√ìN AUTOM√ÅTICA =====
OPT_fnc_inicializar = {
    // Guardar valor original del radio de simulaci√≥n
    OPT_radioSimulacionOriginal = OPT_radioSimulacion;
    
// Configuraci√≥n espec√≠fica por tipo de cliente
if (OPT_enHeadless) then {
    // Para HC, priorizar gesti√≥n de unidades IA
    OPT_radioSimulacion = OPT_radioSimulacion * 0.8;
    OPT_intervaloCacheado = 8;
    OPT_optimizarIA = true;
    OPT_optimizarVehiculos = true;
    OPT_optimizarObjetos = false; // Los objetos est√°ticos se gestionan mejor en el servidor
    OPT_ultimaPosJugador = [0,0,0];
    
} else {
    if (hasInterface && !isServer) then {
        // Para clientes puros, priorizar decoraciones y efectos visuales
        OPT_optimizarDecoraciones = true;
        OPT_optimizarIA = false; // La IA se gestiona desde el servidor o HC
        OPT_procesarLimiteVisibilidad = true;
        
    } else {
        if (isServer && !hasInterface) then {
            // Para servidores dedicados sin HC
            OPT_optimizarIA = true;
            OPT_optimizarVehiculos = true;
            OPT_optimizarObjetos = true;
            OPT_procesarLimiteVisibilidad = false; // No hay interfaz
            
        };
        // Si es servidor+cliente (no dedicado) o singleplayer, mantener configuraci√≥n original
    };
};
    
    // Guardar configuraci√≥n original de vista
    if (hasInterface) then {
        // Guardar valores originales
        OPT_viewDistanciaOriginal = viewDistance;
        OPT_objectViewDistanciaOriginal = getObjectViewDistance;
    };
    
    // Forzar configuraci√≥n de visi√≥n de inmediato si es posible
    if (hasInterface && !isNull player) then {
        // Forzar la distancia inmediatamente
        setViewDistance OPT_distanciaVisionForzada;
        setObjectViewDistance OPT_distanciaVisionForzada;
        
        // Notificar al jugador
        systemChat "";
        
        // Iniciar bucle para garantizar que se mantiene
        [] spawn {
            while {OPT_activo} do {
                setViewDistance OPT_distanciaVisionForzada;
                setObjectViewDistance OPT_distanciaVisionForzada;
                sleep 1;
            };
        };
    };
	
	
// Sistema para distribuir carga entre m√∫ltiples HC
OPT_fnc_distribuirCarga = {
    if (!isServer) exitWith {};
    
    private _HCs = entities "HeadlessClient_F";
    if (count _HCs == 0) exitWith {};
    
    private _unidades = allUnits - allPlayers;
    private _unidadesPorHC = floor (count _unidades / count _HCs);
    private _indiceHC = 0;
    
    {
        if (!isPlayer _x) then {
            private _HC = _HCs select (_indiceHC % count _HCs);
            private _idHC = owner _HC;
            
            // Asignar unidad al HC
            _x setVariable ["OPT_asignadoA", _idHC, true];
            _indiceHC = _indiceHC + 1;
        };
    } forEach _unidades;
    
    // Llamar a esta funci√≥n cada 5 minutos
    [OPT_fnc_distribuirCarga, [], 300] call CBA_fnc_waitAndExecute;
};

// Llamar a esta funci√≥n al inicio si es el servidor
if (isServer) then {
    [] spawn {
        sleep 10; // Esperar a que se conecten los HC
        call OPT_fnc_distribuirCarga;
    };
};	
    
    // Activar el procesamiento del l√≠mite de visibilidad
    OPT_procesarLimiteVisibilidad = true;
    
    // Generar sectores del mapa
    call OPT_fnc_generarSectores;
    
    // Inicializar variables
    OPT_ultimaPosJugador = if (OPT_enHeadless) then {
        [0,0,0]
    } else {
        if (!isNull player) then {
            getPosATL player
        } else {
            [0,0,0]
        };
    };
    
    // Inicializar estado de vuelo
    if (hasInterface && !isNull player) then {
    OPT_estaVolando = call OPT_fnc_estaVolando;
    OPT_zeusActivo = call OPT_fnc_esZeusActivo;
    };
    
    // Inicializar lista de jugadores
    OPT_todosJugadores = allPlayers - entities "HeadlessClient_F";
    
    // Inicializar otras variables
    OPT_vehiculoActual = objNull;
    OPT_cadaveresPendientes = [];
    OPT_objetosPequenos = [];
    OPT_objetosLejanos = [];
    
    // Registrar eventos de veh√≠culo y otros eventos
    call OPT_fnc_agregarEventosVehiculo;
    
    // Registrar unidades iniciales
    {
        if (OPT_optimizarIA && {_x isKindOf "CAManBase"} && {!isPlayer _x}) then {
            [_x] call OPT_fnc_registrarEntidad;
        };
    } forEach allUnits;
    
    // Registrar veh√≠culos iniciales
    if (OPT_optimizarVehiculos) then {
        {
            if (_x isKindOf "AllVehicles" && {!(_x isKindOf "CAManBase")}) then {
                [_x] call OPT_fnc_registrarEntidad;
            };
        } forEach vehicles;
    };
    
    // Registrar objetos est√°ticos si est√° activado
    if (OPT_optimizarObjetos) then {
        {
            if (_x isKindOf "Static" && {!(_x in OPT_entidadesGestionadas)}) then {
                [_x] call OPT_fnc_registrarEntidad;
            };
        } forEach (allMissionObjects "Static");
    };
    
    // Registrar objetos decorativos
    if (OPT_optimizarDecoraciones) then {
        call OPT_fnc_detectarDecoraciones;
    };
    
    // Iniciar bucle de optimizaci√≥n
    [] spawn OPT_fnc_bucleOptimizacion;
};

// ===== EVENTO TERMINAR MISION =====
addMissionEventHandler ["Ended", {
    if (OPT_activo) then {
        // Restaurar todas las entidades
        {
            if (!isNull _x) then {
                _x enableSimulationGlobal true;
                _x hideObjectGlobal false;
                
                if (_x isKindOf "CAManBase" && {!isPlayer _x}) then {
                    _x enableAI "PATH";
                    _x enableAI "FSM";
                    _x enableAI "TARGET";
                };
            };
        } forEach OPT_entidadesGestionadas;
        
        // Restaurar vista original si es necesario
        if (hasInterface && !isNull player) then {
            // Restaurar vista completa correctamente
            setViewDistance OPT_viewDistanciaOriginal;
            // Restaurar el array completo correctamente
            setObjectViewDistance (OPT_objectViewDistanciaOriginal select 0);
        };
        
        // Limpiar arrays
        OPT_entidadesGestionadas = [];
        OPT_cadaveresPendientes = [];
        OPT_objetosPequenos = [];
        OPT_eventosImportantes = [];
        OPT_objetosLejanos = [];
        
        // Desactivar script
        OPT_activo = false;
    };
}];

// ===== INICIALIZACI√ìN AUTOM√ÅTICA =====
[] spawn {
    waitUntil {!isNil "bis_fnc_init"};
    call OPT_fnc_inicializar;
};

// ===== üò∫ SISTEMA GATITO DE OPTIMIZACI√ìN DE RENDIMIENTO üò∫ =====

// üêæ Funci√≥n auxiliar para solucionar el error "this select 0) call this select 1"
Gatito_fnc_hideObjects = {
    params ["_objArray", "_hide"];
    {
        _x hideObject _hide;
    } forEach _objArray;
};

// üê± === Definici√≥n de funciones principales === üê±
Gatito_fnc_loop = {
    params ["_unitarray","_player"];
    private ["_onoff", "_ViewDistance", "_ZeusCam", "_IsInUAV", "_ShownUAV", "_UAV", "_ForceRenderDistance", "_ForceRenderDistanceZeus"];
    
    // üîç Procesamiento prioritario para unidades enemigas cercanas
    {
        if (!isPlayer _x && {side _x != side _player} && {_player distance _x < 300}) then {
            // Siempre mostrar unidades enemigas cercanas
            [[_x], false] remoteExecCall ["Gatito_fnc_hideObjects", _player];
        };
    } forEach _unitarray;
    
    // üìä Obtenemos par√°metros o usamos valores predeterminados
    _onoff = missionNamespace getVariable ["Gatito_onoff", true];
    _ViewDistance = missionNamespace getVariable ["Gatito_ViewDistance", viewDistance];
    _ZeusCam = missionNamespace getVariable ["Gatito_ZeusCam", [0,0,0]];
    _IsInUAV = missionNamespace getVariable ["Gatito_IsInUAV", [0,""]];
    _ShownUAV = missionNamespace getVariable ["Gatito_ShownUAV", false];
    _UAV = getConnectedUAV _player;
    _ForceRenderDistance = missionNamespace getVariable ["Gatito_ForceRenderDistance", 40]; 
    _ForceRenderDistanceZeus = missionNamespace getVariable ["Gatito_ForceRenderDistanceZeus", 350];

    _allObjsHide = [];
    _allObjsShow = [];
    
    // üëÅÔ∏è Determinar qu√© unidades son visibles basado en l√≠nea de visi√≥n
    {
        if (!isPlayer _x) then {
            if (_ViewDistance > _player distance2D _x) then {
                if (_player distance2D _x > _ForceRenderDistance) then {
                    _obj = _x;
                    _vis = 0;
                    _selections = ["rightleg","leftleg","rightarm","leftarm","head"];
                    {
                        if (_vis == 0) then {
                            _pos = _obj selectionPosition _x;
                            _pos2 = _obj modelToWorld _pos;
                            if (isNull objectParent _player) then {
                                _visnum = [_player, "VIEW", _obj] checkVisibility [eyePos _player, AGLToASL _pos2];
                                _vis = _vis + _visnum;
                            } else {
                                _visnum = [(vehicle _player), "VIEW", _obj] checkVisibility [eyePos _player, AGLToASL _pos2];
                                _vis = _vis + _visnum;
                            };
                        };
                    } forEach _selections;

                    if (_vis == 0) then {
                        _allObjsHide pushBack _obj;
                    } else {
                        _allObjsShow pushBack _obj;
                    };
                } else {_allObjsShow pushBack _x;};
            } else {_allObjsHide pushBack _x;};
        };
    } forEach _unitarray;

    // üé≠ Aplicar visibilidad a los objetos
    if (count _allObjsHide > 0) then {
        [_allObjsHide, true] remoteExecCall ["Gatito_fnc_hideObjects", _player];
    };
    if (count _allObjsShow > 0) then {
        [_allObjsShow, false] remoteExecCall ["Gatito_fnc_hideObjects", _player];
    };
};

// üöÄ Funci√≥n optimizada para objetos gen√©ricos usando LineIntersects (m√°s eficiente)
Gatito_fnc_loopObjectsFast = {
    params ["_objarray", "_player", "_forceRenderDist"];
    private ["_ViewDistance"];
    
    _ViewDistance = missionNamespace getVariable ["Gatito_ViewDistance", viewDistance];
    _allObjsHide = [];
    _allObjsShow = [];
    
    _startPos = eyePos _player;
    
    {
        // Todo dentro del radio de fuerza es siempre visible
        if (_player distance2D _x <= _forceRenderDist) then {
            _allObjsShow pushBack _x;
        } else {
            if (_ViewDistance > _player distance2D _x) then {
                _obj = _x;
                // Usar lineIntersects que es m√°s r√°pido que checkVisibility
                _endPos = _obj modelToWorldWorld [0,0,0];
                _endPosASL = AGLToASL _endPos;
                
                // Si est√° dentro del alcance pero fuera de la distancia de fuerza
                if (terrainIntersect [ASLToAGL _startPos, _endPos] || lineIntersects [_startPos, _endPosASL, _player, _obj]) then {
                    _allObjsHide pushBack _obj;
                } else {
                    _allObjsShow pushBack _obj;
                };
            } else {
                _allObjsHide pushBack _x;
            };
        };
    } forEach _objarray;

    // Aplicar visibilidad
    if (count _allObjsHide > 0) then {
        [_allObjsHide, true] remoteExecCall ["Gatito_fnc_hideObjects", _player];
    };
    if (count _allObjsShow > 0) then {
        [_allObjsShow, false] remoteExecCall ["Gatito_fnc_hideObjects", _player];
    };
};

// üì¶ Sistema de cach√© para reducir llamadas costosas
Gatito_missionObjectsCache = createHashMap;
Gatito_lastCacheTime = time;

// üß† Funci√≥n inteligente para obtener objetos con cach√©
Gatito_fnc_getCachedMissionObjects = {
    params ["_class"];
    private _cache = Gatito_missionObjectsCache getOrDefault [_class, []];
    
    // Si han pasado m√°s de 10 segundos, actualizar cach√©
    if ((time - Gatito_lastCacheTime) > 10 || (count _cache == 0)) then {
        _cache = allMissionObjects _class;
        Gatito_missionObjectsCache set [_class, _cache];
        
        // Si estamos actualizando la primera clase, resetear el tiempo de cach√©
        if (_class == "Animal_Base_F") then {
            Gatito_lastCacheTime = time;
        };
    };
    
    _cache
};

// üîÑ Funci√≥n principal para ocultar objetos inteligentemente
Gatito_fnc_hide = {
    params ["_player"];
    
    // Verificar si Gatito est√° activo
    private _Gatito_active = missionNamespace getVariable ["Gatito_active", true];
    if (!_Gatito_active) exitWith {};
    
    private ["_ViewDistance", "_ZeusCam", "_IsInUAV", "_ShownUAV", "_UAV", "_ForceRenderDistance", "_HideWeapons", "_ForceRenderDistanceZeus"];
    
    // Usar valores de configuraci√≥n global
    _ViewDistance = viewDistance;
    _ZeusCam = getPosASL curatorCamera;
    _IsInUAV = UAVControl (getConnectedUAV _player);
    _ShownUAV = shownUAVFeed;
    _UAV = getConnectedUAV _player;
    _ForceRenderDistance = missionNamespace getVariable ["Gatito_ForceRenderDistance", 300];
    _HideWeapons = missionNamespace getVariable ["Gatito_HideWeapons", true];
    _ForceRenderDistanceZeus = missionNamespace getVariable ["Gatito_ForceRenderDistanceZeus", 300];
    
    // üéõÔ∏è Variables de configuraci√≥n para diferentes tipos de objetos
    _HideVehicles = missionNamespace getVariable ["Gatito_HideVehicles", true];
    _HideAnimals = missionNamespace getVariable ["Gatito_HideAnimals", true];
    _HideFurniture = missionNamespace getVariable ["Gatito_HideFurniture", false];
    _HideRocks = missionNamespace getVariable ["Gatito_HideRocks", false];
    _HidePlants = missionNamespace getVariable ["Gatito_HidePlants", false];
    _HideDebris = missionNamespace getVariable ["Gatito_HideDebris", false];
    _HideSigns = missionNamespace getVariable ["Gatito_HideSigns", false];
    _HideItems = missionNamespace getVariable ["Gatito_HideItems", false];
    _HideDoors = missionNamespace getVariable ["Gatito_HideDoors", false];
    _HideWindows = missionNamespace getVariable ["Gatito_HideWindows", false];
    _HideContainers = missionNamespace getVariable ["Gatito_HideContainers", false];
    
    // ‚è±Ô∏è Procesamiento s√≥lo cada ciertos frames para mejorar rendimiento
    _frameCounter = missionNamespace getVariable ["Gatito_frameCounter", 0];
    _frameCounter = _frameCounter + 1;
    if (_frameCounter >= 30) then {
        _frameCounter = 0;
    };
    missionNamespace setVariable ["Gatito_frameCounter", _frameCounter];

    // üö∂ Optimizaci√≥n: Solo procesar unidades si el jugador se ha movido significativamente
    private _lastPlayerPos = missionNamespace getVariable ["Gatito_lastPlayerPos", [0,0,0]];
    private _playerPos = getPosASL _player;
    private _playerMoved = (_lastPlayerPos distance _playerPos) > 5;
    
    // üßç‚Äç‚ôÇÔ∏è Procesar unidades solo cuando es necesario
    if (_playerMoved || _frameCounter % 3 == 0) then {
        // Actualizar posici√≥n del jugador
        missionNamespace setVariable ["Gatito_lastPlayerPos", _playerPos];
        
        // Dividir unidades para un mejor rendimiento
        _allunits = allUnits;
        
        // Limitar cantidad m√°xima de unidades a procesar
        if (count _allunits > 100) then {
            _allunits resize 100;
        };
        
        _allunits1 = [_allunits, ((count _allunits) / 2)] call BIS_fnc_subSelect;
        _allunits deleteRange [((count _allunits) / 2), count _allunits];
        _allunits2 = _allunits;

        // Procesar unidades vivas
        [_allunits1, _player] call Gatito_fnc_loop;
        [_allunits2, _player] call Gatito_fnc_loop;
    };

    // ‚ò†Ô∏è Procesar unidades muertas s√≥lo cada 5 frames
    if (_frameCounter % 5 == 0) then {
        _alldeadmen = allDeadMen;
        
        // Limitar cantidad de muertos
        if (count _alldeadmen > 50) then {
            _alldeadmen resize 50;
        };
        
        _alldeadmen1 = [_alldeadmen, ((count _alldeadmen) / 2)] call BIS_fnc_subSelect;
        _alldeadmen deleteRange [((count _alldeadmen) / 2), count _alldeadmen];
        _alldeadmen2 = _alldeadmen;

        [_alldeadmen1, _player] call Gatito_fnc_loop;
        [_alldeadmen2, _player] call Gatito_fnc_loop;
    };
    
    // üöó Procesar veh√≠culos cada 3 frames
    if (_HideVehicles && (_frameCounter % 3 == 0)) then {
        _allVehicles = vehicles select {!(_x isKindOf "WeaponHolderSimulated") && !(_x isKindOf "GroundWeaponHolder")};
        
        // Limitar cantidad de veh√≠culos
        if (count _allVehicles > 30) then {
            _allVehicles resize 30;
        };
        
        _allVehicles1 = [_allVehicles, ((count _allVehicles) / 2)] call BIS_fnc_subSelect;
        _allVehicles deleteRange [((count _allVehicles) / 2), count _allVehicles];
        _allVehicles2 = _allVehicles;
        
        // Usar m√©todo r√°pido para veh√≠culos
        [_allVehicles1, _player, 300] call Gatito_fnc_loopObjectsFast;
        [_allVehicles2, _player, 300] call Gatito_fnc_loopObjectsFast;
    };
    
    // üêÑ Procesar animales cada 5 frames
    if (_HideAnimals && (_frameCounter % 5 == 0)) then {
        _allAnimals = [];
        
        // Lista de clases de animales vanilla
        _animalClasses = [
            "Animal_Base_F", 
            "Sheep_base_F", 
            "Goat_Base_F", 
            "Fowl_Base_F", 
            "Rabbit_F",
            "Turtle_F",
            "Snake_random_F",
            "Fin_Base_F",
            "Alsatian_Base_F",
            "Cow_Base_F",
            "Deer_Base_F"
        ];
        
        {
            // Usar funci√≥n con cach√© para mejor rendimiento
            _animals = [_x] call Gatito_fnc_getCachedMissionObjects;
            if (count _animals > 5) then {
                _animals resize 5;
            };
            _allAnimals append _animals;
        } forEach _animalClasses;
        
        // Limitar la cantidad total
        if (count _allAnimals > 20) then {
            _allAnimals resize 20;
        };
        
        [_allAnimals, _player, 300] call Gatito_fnc_loopObjectsFast;
    };
    
    // üè† Procesamiento de objetos ambientales 
    // (solo uno por ciclo para distribuir la carga)
    if (_frameCounter < 10) then {
        switch (_frameCounter % 9) do {
            // ü™ë Procesar muebles
            case 0: {
                if (_HideFurniture) then {
                    _allFurniture = [];
                    
                    // Lista de clases de muebles vanilla
                    _furnitureClasses = [
    "Land_Garbage_square3_F", "Land_Garbage_square5_F", "Land_Garbage_line_F", "Land_Garbage_square_F",
    "Land_GarbagePallet_F", "Land_GarbageBags_F", "Land_GarbageWashingMachine_F", "Land_Tyres_F",
    "Land_JunkPile_F", "Land_Wreck_Car_F", "Land_Wreck_Car2_F", "Land_Wreck_Car3_F", "Land_Wreck_Offroad_F", 
    "Land_Wreck_Offroad2_F", "Land_Wreck_Truck_F", "Land_Wreck_Truck_dropside_F", "Land_Wreck_Van_F", 
    "Land_Wreck_Skodovka_F", "Land_Wreck_HMMWV_F", "Land_Wreck_BMP2_F", "Land_Wreck_T72_hull_F",
    "Land_Razorwire_F", "Land_WoodenTable_large_F", "Land_WoodenTable_small_F", "Land_WoodenBox_F", 
    "Land_ChairPlastic_F", "Land_ChairWood_F", "Land_WoodenLog_F", "Land_WoodPile_F", "Land_Bench_F",
    "Land_CampingTable_F", "Land_CampingChair_V1_F", "Land_CampingChair_V2_F",
    "Land_PlasticCase_01_small_F", "Land_PlasticCase_01_medium_F", "Land_PlasticCase_01_large_F",
    "Land_Metal_rack_F", "Land_Metal_rack_Tall_F", "Land_Metal_wooden_rack_F",
    "Land_BarrelEmpty_F", "Land_BarrelEmpty_grey_F", "Land_BarrelSand_F", "Land_BarrelSand_grey_F", 
    "Land_BarrelTrash_F", "Land_BarrelTrash_grey_F", "Land_BarrelWater_F", "Land_BarrelWater_grey_F", 
    "Land_MetalBarrel_F", "Land_MetalBarrel_empty_F", "Land_CanisterFuel_F", "Land_CanisterOil_F", "Land_CanisterPlastic_F",
    "Land_CratesPlastic_F", "Land_CratesWooden_F", "Land_Sacks_goods_F", "Land_Sacks_heap_F", "Land_BarGate_F",
    "Land_Laptop_F", "Land_Laptop_device_F", "Land_Laptop_unfolded_F", "Land_ATM_01_F", "Land_ATM_02_F", 
    "Land_CashDesk_F", "Land_Sink_F", "Land_Destroy_F", "Land_OfficeTable_01_new_F", "Land_Trophy_01_bronze_F",
    "Land_Trophy_01_silver_F", "Land_Trophy_01_gold_F", "Land_OfficeCabinet_01_F", "Land_ShelvesWooden_F", 
    "Land_ShelvesWooden_blue_F", "Land_ShelvesWooden_khaki_F", "Land_Icebox_F", "Land_FireExtinguisher_F",
    "Land_Bucket_F", "Land_Bucket_clean_F", "Land_Bucket_painted_F", "Land_GasTank_01_blue_F",
    "Land_GasTank_01_khaki_F", "Land_GasTank_01_yellow_F", "Land_GasTank_02_F",
    "Land_PortableCabinet_01_4drawers_black_F", "Land_PortableCabinet_01_4drawers_olive_F", "Land_PortableCabinet_01_4drawers_sand_F",
    "Land_PortableCabinet_01_bookcase_black_F", "Land_PortableCabinet_01_bookcase_olive_F", "Land_PortableCabinet_01_bookcase_sand_F",
    "Land_PortableCabinet_01_closed_black_F", "Land_PortableCabinet_01_closed_olive_F", "Land_PortableCabinet_01_closed_sand_F",
    "Land_PortableCabinet_01_lid_black_F", "Land_PortableCabinet_01_lid_olive_F", "Land_PortableCabinet_01_lid_sand_F",
    "Land_PortableLight_single_F", "Land_PortableLight_double_F", "Land_DieselGroundPowerUnit_01_F",
    "Land_Portable_generator_F", "Land_ToolTrolley_01_F", "Land_ToolTrolley_02_F", "Land_WeldingTrolley_01_F",
    "Land_PressureWasher_01_F", "Land_Pallet_F", "Land_Pallet_vertical_F",
	"Land_Sofa_01_F", "Land_ArmChair_01_F", "Land_RattanTable_01_F", "Land_TablePlastic_01_F", 
    "Land_BedDouble_01_F", "Land_BedSingle_01_F", "Land_WardrobeStanding_01_F", "Land_WardrobeRoomy_01_F",
    "Land_DressingTable_01_F", "Land_TVStanding_01_F", "Land_TVSet_01_F", "Land_TvScreen_01_F", 
    "Land_MobileCrane_01_F", "Land_MobilePhone_old_F", "Land_MobilePhone_smart_F", "Land_ShelvesWooden_01_F",
    "Land_ShelfFurniture_01_F", "Land_ShelfFullOfBooks_01_F", "Land_ModularCouch_01_Corner_F", "Land_ModularCouch_01_F",
    "Land_CouchSofa_01_F", "Land_CouchModern_01_F", "Land_TableLarge_01_F", "Land_TableSmall_01_F", 
    "Land_TableDesk_F", "Land_TablePlastic_01_round_F", "Land_TableAntique_01_F", "Land_MiniBar_01_F",
    "Land_BookCase_01_F", "Land_BookCase_02_F", "Land_OfficeCabinet_02_F", "Land_Rack_01_F", "Land_Cabinet_01_F",
    "Land_Cabinet_02_F", "Land_Carpet_01_rug_F", "Land_Carpet_01_rugs_F", "Land_Carpet_01_wide_F", "Land_FridgeSteel_01_F",
    "Land_Fridge_01_closed_F", "Land_Fridge_01_open_F", "Land_MicrowaveOven_01_F", "Land_Stove_01_F", "Land_WasherDryer_01_F",
    "Land_Shower_01_F", "Land_Toilet_01_F", "Land_Toilet_02_F", "Land_Bathtub_01_F", "Land_BathSink_01_F", 
    "Land_KitchenCounter_01_F", "Land_KitchenSink_01_F", "Land_BasketTable_01_F", "Land_BeachChair_01_F", "Land_BarrelPlastic_F",
    "Land_PlasticBucket_01_F", "Land_PlasticBucket_01_open_F", "Land_PlasticBucket_01_closed_F", "Land_ChestWooden_01_F",
    "Land_ChestMetal_01_F", "Land_PaperBox_01_F", "Land_PaperBox_01_open_boxes_F", "Land_PaperBox_01_open_empty_F",
    "Land_PaperBox_01_open_water_F", "Land_PaperBox_01_small_closed_brown_F", "Land_PaperBox_01_small_closed_white_F",
    "Land_PaperBox_01_small_closed_white_IDAP_F", "Land_PaperBox_01_small_closed_white_med_F", "Land_PaperBox_01_small_ransacked_brown_F",
    "Land_PaperBox_01_small_ransacked_white_F", "Land_PaperBox_01_small_ransacked_white_IDAP_F", "Land_PaperBox_01_small_ransacked_white_med_F",
    "Land_PaperBox_01_small_stacked_F", "Land_GymBench_01_F", "Land_GymRack_01_F", "Land_GymRack_02_F", "Land_GymRack_03_F",
    "Land_TableTennis_01_F", "Land_Trophy_01_bronze_F", "Land_Trophy_01_silver_F", "Land_Trophy_01_gold_F", "Land_WashingMachine_F",
    "Land_TentDome_F", "Land_PartyTent_01_F", "Land_Sunshade_01_F", "Land_Sunshade_02_F", "Land_Sunshade_03_F", "Land_Sunshade_04_F",
    "Land_SunChair_01_F", "Land_AirConditioner_01_F", "Land_AirConditioner_02_F", "Land_AirConditioner_03_F", "Land_Fan_01_F",
    "Land_HomeLamp_01_F", "Land_DeskLamp_01_F", "Land_FloorLamp_01_F", "Land_Projector_01_F", "Land_PCStation_01_F", 
    "Land_PCStation_02_F", "Land_PCSet_01_F", "Land_PCSet_01_screen_F", "Land_PCSet_01_mouse_F", "Land_PCSet_01_keyboard_F",
    "Land_PCSet_01_case_F", "Land_PCSet_01_case_F", "Land_TableFootball_01_F", "Land_Photoframe_01_F", "Land_Photoframe_02_F",
    "Land_Photoframe_03_F", "Land_Photoframe_04_F", "Land_MapBoard_01_F", "Land_MapBoard_02_F", "Land_MapBoard_03_F", 
    "Land_MusicStand_01_F", "Land_Trench_01_grass_F", "Land_Trench_01_forest_F"
                    ];
                    
                    {
                        // Usar funci√≥n con cach√©
                        _furniture = [_x] call Gatito_fnc_getCachedMissionObjects;
                        if (count _furniture > 3) then {
                            _furniture resize 3;
                        };
                        _allFurniture append _furniture;
                    } forEach _furnitureClasses;
                    
                    // Limitar cantidad
                    if (count _allFurniture > 150) then {
                        _allFurniture resize 150;
                    };
                    
                    [_allFurniture, _player, 300] call Gatito_fnc_loopObjectsFast;
                };
            };
            
            // ü™® Procesar rocas
            case 1: {
                if (_HideRocks) then {
                    _allRocks = [];
                    
                    // Lista de clases de rocas vanilla
                    _rockClasses = [
                        "Land_Small_Stone_01_F",
                        "Land_Small_Stone_02_F",
                        "Land_BluntRock_apart",
                        "Land_BluntRock_monolith",
                        "Land_BluntRock_spike",
                        "Land_BluntRock_wallH",
                        "Land_BluntRock_wallV",
                        "Land_BluntStone_01",
                        "Land_BluntStone_02",
                        "Land_BluntStone_03",
                        "Land_W_sharpRock_apart",
                        "Land_W_sharpRock_monolith",
                        "Land_W_sharpRock_spike",
                        "Land_W_sharpRock_wallH",
                        "Land_W_sharpRock_wallV",
                        "Land_W_sharpStone_01",
                        "Land_W_sharpStone_02",
						"Crater", 
						"CraterLong", 
						"CraterLong_small",
                        "Land_Limestone_01_01_F"
                    ];
                    
                    {
                        // Usar funci√≥n con cach√©
                        _rocks = [_x] call Gatito_fnc_getCachedMissionObjects;
                        if (count _rocks > 3) then {
                            _rocks resize 3;
                        };
                        _allRocks append _rocks;
                    } forEach _rockClasses;
                    
                    // Limitar cantidad
                    if (count _allRocks > 10) then {
                        _allRocks resize 10;
                    };
                    
                    [_allRocks, _player, 300] call Gatito_fnc_loopObjectsFast;
                };
            };
           
// üèùÔ∏è Procesar objetos costeros de Malden
case 10: {
    if (_HideCoastal) then {
        _allCoastalObjects = [];
        
        // Lista de elementos costeros t√≠picos de Malden
        _coastalClasses = [
            "Land_PierWooden_01_F", "Land_PierWooden_02_F", "Land_PierWooden_03_F",
            "Land_PierConcrete_01_F", "Land_PierConcrete_02_F", "Land_PierConcrete_03_F",
            "Land_Pier_F", "Land_Pier_small_F", "Land_Pier_addon_F",
            "Land_Sea_Wall_F", "Land_Jetty_F", "Land_Slum_House01_F", "Land_Slum_House02_F",
            "Land_Slum_House03_F", "Land_Boat_01_F", "Land_Boat_02_F", "Land_Boat_03_F",
            "Land_Boat_04_F", "Land_Boat_05_F", "Land_Boat_06_F", "Land_FishingGear_01_F",
            "Land_FishingGear_02_F", "Land_Pier_Box_F", "Land_Lighthouse_small_F", "Land_Lighthouse_F"
        ];
        
        {
            // Usar funci√≥n con cach√©
            _coastalObjs = [_x] call Gatito_fnc_getCachedMissionObjects;
            if (count _coastalObjs > 2) then {
                _coastalObjs resize 2;
            };
            _allCoastalObjects append _coastalObjs;
        } forEach _coastalClasses;
        
        // Limitar cantidad
        if (count _allCoastalObjects > 15) then {
            _allCoastalObjects resize 15;
        };
        
        [_allCoastalObjects, _player, 300] call Gatito_fnc_loopObjectsFast;
    };
};

// üß∞ Procesar objetos peque√±os abundantes
case 11: {
    if (_HideSmallObjects) then {
        _allSmallObjects = [];
        
        // Lista de objetos peque√±os comunes
        _smallClasses = [
            "Land_Pallets_F", "Land_Pallets_stack_F", "Land_Pallet_F", "Land_Pallet_vertical_F",
            "Land_Sacks_heap_F", "Land_Sacks_goods_F", "Land_Basket_F", "Land_Sack_F",
            "Land_WoodenBox_F", "Land_WoodenCrate_01_F", "Land_WoodenCrate_01_stack_x3_F",
            "Land_WoodPile_F", "Land_WoodPile_large_F", "Land_Tyres_F", "Land_TyreBarrier_01_F",
            "Land_TyreBarrier_02_F", "Land_Can_V1_F", "Land_Can_V2_F", "Land_Can_V3_F", 
            "Land_BottlePlastic_V1_F", "Land_BottlePlastic_V2_F", "Land_Canteen_F",
            "Land_Ground_sheet_F", "Land_Ground_sheet_folded_F", "Land_Ground_sheet_folded_khaki_F",
            "Land_Garbage_square3_F", "Land_Garbage_square5_F", "Land_Garbage_line_F"
        ];
        
        {
            // Usar funci√≥n con cach√©
            _smallObjs = [_x] call Gatito_fnc_getCachedMissionObjects;
            if (count _smallObjs > 2) then {
                _smallObjs resize 2;
            };
            _allSmallObjects append _smallObjs;
        } forEach _smallClasses;
        
        // Limitar cantidad
        if (count _allSmallObjects > 20) then {
            _allSmallObjects resize 20;
        };
        
        [_allSmallObjects, _player, 300] call Gatito_fnc_loopObjectsFast;
    };
};

// üèôÔ∏è Procesar elementos urbanos mediterr√°neos
case 12: {
    if (_HideUrban) then {
        _allUrbanObjects = [];
        
        // Lista de elementos urbanos t√≠picos de Malden
        _urbanClasses = [
            "Land_Sidewalk_01_F", "Land_Sidewalk_02_F", "Land_Sidewalk_03_F", "Land_Sidewalk_04_F",
            "Land_RoadCone_01_F", "Land_RoadBarrier_01_F", "Land_RoadBarrier_Small_F", "Land_Obstacle_Bridge_F",
            "Land_RoadCrack_01_F", "Land_RoadCrack_02_F", "Land_CityGate_01_F", "Land_Wall_IndCnc_4_F",
            "Land_City_Gate_F", "Land_City_8m_F", "Land_City_4m_F", "Land_City_Pillar_F",
            "Land_LampStreet_Small_F", "Land_LampStreet_F", "Land_LampShabby_F", 
            "Land_PowerPoleWooden_F", "Land_PowerPoleWooden_Small_F", "Land_PowerLine_01_pole_lamp_F",
            "Land_PowerLine_01_pole_small_F", "Land_PowerLine_01_pole_transformer_F",
            "Land_House_Small_01_F", "Land_House_Small_02_F", "Land_House_Small_03_F", 
            "Land_House_Big_01_F", "Land_House_Big_02_F", "Land_House_Big_03_F",
            "Land_House_Native_01_F", "Land_House_Native_02_F",
            "Land_VillageStore_01_F", "Land_FuelStation_01_shop_F", "Land_FuelStation_01_workshop_F"
        ];
        
        {
            // Usar funci√≥n con cach√©
            _urbanObjs = [_x] call Gatito_fnc_getCachedMissionObjects;
            if (count _urbanObjs > 1) then {
                _urbanObjs resize 1;
            };
            _allUrbanObjects append _urbanObjs;
        } forEach _urbanClasses;
        
        // Limitar cantidad
        if (count _allUrbanObjects > 12) then {
            _allUrbanObjects resize 12;
        };
        
        [_allUrbanObjects, _player, 300] call Gatito_fnc_loopObjectsFast;
    };
};

// üåø Procesar vegetaci√≥n mediterr√°nea (sin √°rboles)
case 13: {
    if (_HideVegetation) then {
        _allVegetation = [];
        
        // Lista de vegetaci√≥n mediterr√°nea (sin √°rboles)
        _vegetationClasses = [
            "Land_Bush_01_F", "Land_Bush_02_F", "Land_Bush_03_F", "Land_Bush_04_F", "Land_Bush_05_F",
            "Land_Grain_01_F", "Land_Sunflower_01_F", "Land_Vineyard_01_F",
            "Land_Flower_01_F", "Land_Flower_02_F", "Land_Flower_03_F", "Land_Flower_04_F",
            "Land_Grass_Patch_01_F", "Land_Grass_Tall_01_F", "Land_Grass_Dry_01_F",
            "Land_ClutterCutter_small_F", "Land_ClutterCutter_medium_F", "Land_ClutterCutter_large_F",
            "Land_Weed_01_F", "Land_Weed_02_F", "Land_Plant_01_F", "Land_Plant_02_F",
            "Land_BambooFence_01_F", "Land_BambooFence_02_F", "Land_PlantsGreen_F", 
            "Land_PlantMedFern_F", "Land_PlantSmallFern_F"
        ];
        
        {
            // Usar funci√≥n con cach√©
            _vegetationObjs = [_x] call Gatito_fnc_getCachedMissionObjects;
            if (count _vegetationObjs > 3) then {
                _vegetationObjs resize 3;
            };
            _allVegetation append _vegetationObjs;
        } forEach _vegetationClasses;
        
        // Limitar cantidad
        if (count _allVegetation > 25) then {
            _allVegetation resize 25;
        };
        
        [_allVegetation, _player, 300] call Gatito_fnc_loopObjectsFast;
    };
};		   
		
            // üåø Procesar plantas
            case 2: {
                if (_HidePlants) then {
                    _allPlants = [];
                    
                    // Lista de clases de plantas vanilla
                    _plantClasses = [
                        "Land_Bush_01_F",
                        "Land_Bush_02_F",
                        "Land_Bush_03_F",
                        "Land_Grass_1_F", 
                        "Land_Grass_2_F",
                        "Land_Grass_3_F",
                        "Land_Grass_4_F",
                        "Land_Grass_5_F",
                        "Land_Grass_6_F",
                        "Land_Grass_7_F",
                        "Land_Grass_8_F",
                        "Land_Plant_1_F",
                        "Land_Plant_2_F",
                        "Land_Plant_3_F",
                        "Land_Plant_4_F",
                        "Land_Flower_1_F",
                        "Land_Flower_2_F",
                        "Land_GrassLong_F",
                        "Land_GrassTall_F",
                        "Land_SmallBush_F",
                        "Land_TBush_01_F"
                    ];
                    
                    {
                        // Usar funci√≥n con cach√©
                        _plants = [_x] call Gatito_fnc_getCachedMissionObjects;
                        if (count _plants > 2) then {
                            _plants resize 2;
                        };
                        _allPlants append _plants;
                    } forEach _plantClasses;
                    
                    // Limitar cantidad
                    if (count _allPlants > 10) then {
                        _allPlants resize 10;
                    };
                    
                    [_allPlants, _player, 300] call Gatito_fnc_loopObjectsFast;
                };
            };
			
// ü©∏ Procesar manchas de sangre
case 9: {
    if (_HideBlood) then {
        _allBloodSpots = [];
        
        // Lista de clases de manchas de sangre
        _bloodClasses = [
            "BloodPool_01_Large_New_F", 
            "BloodPool_01_Medium_New_F", 
            "BloodSplatter_01_Large_New_F", 
            "BloodSplatter_01_Medium_New_F", 
            "BloodSplatter_01_Small_New_F", 
            "Blood_01_F"
        ];
        
        {
            // Usar funci√≥n con cach√©
            _bloodSpots = [_x] call Gatito_fnc_getCachedMissionObjects;
            if (count _bloodSpots > 3) then {
                _bloodSpots resize 3;
            };
            _allBloodSpots append _bloodSpots;
        } forEach _bloodClasses;
        
        // Limitar cantidad
        if (count _allBloodSpots > 500) then {
            _allBloodSpots resize 500;
        };
        
        [_allBloodSpots, _player, 300] call Gatito_fnc_loopObjectsFast;
    };
};
            
            // üóëÔ∏è Procesar escombros/basura
            case 3: {
                if (_HideDebris) then {
                    _allDebris = [];
                    
                    // Lista de clases de escombros vanilla
                    _debrisClasses = [
                        "Garbage_base_F",
                        "Land_Garbage_square3_F",
                        "Land_Garbage_square5_F",
                        "Land_Garbage_line_F",
                        "Land_Garbage_square_F",
                        "Land_GarbageBags_F",
                        "Land_GarbageHeap_01_F",
                        "Land_GarbageHeap_02_F",
                        "Land_JunkPile_F",
                        "Land_Tyres_F",
                        "Land_Wreck_Car_F",
                        "Land_Wreck_Car2_F"
                    ];
                    
                    {
                        // Usar funci√≥n con cach√©
                        _debris = [_x] call Gatito_fnc_getCachedMissionObjects;
                        if (count _debris > 2) then {
                            _debris resize 2;
                        };
                        _allDebris append _debris;
                    } forEach _debrisClasses;
                    
                    // Limitar cantidad
                    if (count _allDebris > 8) then {
                        _allDebris resize 8;
                    };
                    
                    [_allDebris, _player, 300] call Gatito_fnc_loopObjectsFast;
                };
            };
            
            // üö∏ Procesar se√±ales
            case 4: {
                if (_HideSigns) then {
                    _allSigns = [];
                    
                    // Lista de clases de se√±ales vanilla
                    _signClasses = [
                        "Land_Sign_F",
                        "SignAd_Sponsor_F",
                        "Sign_Arrow_F",
                        "Sign_Arrow_Green_F",
                        "Sign_Arrow_Blue_F",
                        "Sign_Arrow_Yellow_F",
                        "SignAd_SponsorS_F",
                        "Land_Sign_WarningMilitaryArea_F",
                        "Land_Sign_WarningMilAreaSmall_F",
                        "Land_Sign_WarningMilitaryVehicles_F",
                        "Land_Sign_MinesDanger_F",
                        "RoadCone_F",
                        "RoadCone_L_F",
                        "RoadBarrier_F",
                        "RoadBarrier_small_F"
                    ];
                    
                    {
                        // Usar funci√≥n con cach√©
                        _signs = [_x] call Gatito_fnc_getCachedMissionObjects;
                        if (count _signs > 2) then {
                            _signs resize 2;
                        };
                        _allSigns append _signs;
                    } forEach _signClasses;
                    
                    // Limitar cantidad
                    if (count _allSigns > 10) then {
                        _allSigns resize 10;
                    };
                    
                    [_allSigns, _player, 300] call Gatito_fnc_loopObjectsFast;
                };
            };
            
            // üì± Procesar objetos peque√±os e items
            case 5: {
                if (_HideItems) then {
                    _allItems = [];
                    
                    // Lista de clases de items vanilla
                    _itemClasses = [
                        "Land_Money_F",
                        "Land_Suitcase_F",
                        "Land_BakedBeans_F",
                        "Land_BottlePlastic_V1_F",
                        "Land_BottlePlastic_V2_F",
                        "Land_CanOpener_F",
                        "Land_CerealsBox_F",
                        "Land_DuctTape_F",
                        "Land_Matches_F",
                        "Land_MobilePhone_smart_F",
                        "Land_TacticalBacon_F",
                        "Land_Can_V1_F",
                        "Land_Can_V2_F",
                        "Land_Can_V3_F"
                    ];
                    
                    {
                        // Usar funci√≥n con cach√©
                        _items = [_x] call Gatito_fnc_getCachedMissionObjects;
                        if (count _items > 2) then {
                            _items resize 2;
                        };
                        _allItems append _items;
                    } forEach _itemClasses;
                    
                    // Limitar cantidad
                    if (count _allItems > 10) then {
                        _allItems resize 10;
                    };
                    
                    [_allItems, _player, 300] call Gatito_fnc_loopObjectsFast;
                };
            };			
// üè† Procesar props/objetos miscel√°neos
case 8: {
    if (_HideProps) then {
        _allProps = [];
        
        // Lista completa de objetos props/miscel√°neos
        _propClasses = [
            // Objetos dom√©sticos
            "Land_Sink_F", "Land_Basket_F", "Land_Bucket_F", "Land_Bucket_clean_F", "Land_Bucket_painted_F",
            "Land_BucketEmpty_F", "Land_GarbageBin_01_F", "Land_GarbageBin_02_F", "Land_GarbageContainer_closed_F",
            "Land_GarbageContainer_open_F", "Land_GarbagePallet_F", "Land_GarbageWashingMachine_F",
            "Land_JunkPile_F", "Land_WoodenTable_large_F", "Land_WoodenTable_small_F", "Land_TableDesk_F", 
            "Land_TablePlastic_01_F", "Land_ChairPlastic_F", "Land_ChairWood_F", "Land_OfficeChair_01_F",
            "Land_Sofa_01_F", "Land_ArmChair_01_F", "Land_RattanTable_01_F", "Land_BedDouble_01_F",
            "Land_BedSingle_01_F", "Land_WardrobeStanding_01_F", "Land_WardrobeRoomy_01_F", "Land_DressingTable_01_F",
            "Land_TVStanding_01_F", "Land_TVSet_01_F", "Land_TvScreen_01_F", "Land_ShelvesWooden_01_F",
            "Land_ShelfFurniture_01_F", "Land_ShelfFullOfBooks_01_F", "Land_ModularCouch_01_Corner_F", 
            "Land_ModularCouch_01_F", "Land_CouchSofa_01_F", "Land_CouchModern_01_F", "Land_TableLarge_01_F", 
            "Land_TableSmall_01_F", "Land_TableAntique_01_F", "Land_MiniBar_01_F", "Land_BookCase_01_F", 
            "Land_BookCase_02_F", "Land_OfficeCabinet_02_F", "Land_Rack_01_F", "Land_Cabinet_01_F", "Land_Cabinet_02_F",
            "Land_Carpet_01_rug_F", "Land_Carpet_01_rugs_F", "Land_Carpet_01_wide_F", "Land_FridgeSteel_01_F",
            "Land_Fridge_01_closed_F", "Land_Fridge_01_open_F", "Land_MicrowaveOven_01_F", "Land_Stove_01_F", 
            "Land_WasherDryer_01_F", "Land_Shower_01_F", "Land_Toilet_01_F", "Land_Toilet_02_F", "Land_Bathtub_01_F", 
            "Land_BathSink_01_F", "Land_KitchenCounter_01_F", "Land_KitchenSink_01_F",
            
            // Muebles y accesorios adicionales
            "Land_BasketTable_01_F", "Land_BeachChair_01_F", "Land_ChestWooden_01_F", "Land_ChestMetal_01_F",
            "Land_GymBench_01_F", "Land_GymRack_01_F", "Land_GymRack_02_F", "Land_GymRack_03_F",
            "Land_TableTennis_01_F", "Land_Trophy_01_bronze_F", "Land_Trophy_01_silver_F", "Land_Trophy_01_gold_F", 
            "Land_WashingMachine_F", "Land_TentDome_F", "Land_PartyTent_01_F", "Land_Sunshade_01_F", 
            "Land_Sunshade_02_F", "Land_Sunshade_03_F", "Land_Sunshade_04_F", "Land_SunChair_01_F", 
            "Land_AirConditioner_01_F", "Land_AirConditioner_02_F", "Land_AirConditioner_03_F", "Land_Fan_01_F",
            "Land_HomeLamp_01_F", "Land_DeskLamp_01_F", "Land_FloorLamp_01_F", "Land_Projector_01_F", 
            "Land_PCStation_01_F", "Land_PCStation_02_F", "Land_PCSet_01_F", "Land_PCSet_01_screen_F", 
            "Land_PCSet_01_mouse_F", "Land_PCSet_01_keyboard_F", "Land_PCSet_01_case_F", "Land_TableFootball_01_F", 
            "Land_Photoframe_01_F", "Land_Photoframe_02_F", "Land_Photoframe_03_F", "Land_Photoframe_04_F", 
            "Land_MapBoard_01_F", "Land_MapBoard_02_F", "Land_MapBoard_03_F", "Land_MusicStand_01_F",
            
            // Bancos y asientos exteriores
            "Land_Bench_01_F", "Land_Bench_02_F", "Land_Bench_03_F", "Land_Bench_04_F", "Land_Bench_05_F",
            "Land_CampingChair_V1_F", "Land_CampingChair_V2_F", "Land_CampingTable_F", "Land_CampingTable_small_F",
            
            // Equipamiento urbano
            "Land_Loudspeakers_F", "Land_BarGate_F", "Land_BarGate_01_open_F", "Land_PowerPoleWooden_L_F",
            "Land_PowerPoleWooden_small_F", "Land_LampDecor_F", "Land_LampHalogen_F", "Land_LampHarbour_F",
            "Land_LampShabby_F", "Land_LampStreet_F", "Land_LampStreet_small_F", "Land_LampAirport_F",
            "Land_NavigLight", "Land_runway_edgelight", "Land_runway_edgelight_blue_F", "Land_Flush_Light_green_F",
            "Land_Flush_Light_red_F", "Land_Flush_Light_yellow_F", "Land_runway_PAPI", "Land_runway_PAPI_2",
            "Land_runway_PAPI_3", "Land_runway_PAPI_4", "Land_fs_roof_F", "Land_fs_feed_F", "Land_fs_sign_F",
            "Land_Atm_01_F", "Land_Atm_02_F", "Land_PhoneBooth_01_F", "Land_PhoneBooth_02_F",
            
            // Dispositivos y objetos peque√±os
            "Land_Laptop_F", "Land_Laptop_device_F", "Land_Laptop_unfolded_F", "Land_SatellitePhone_F",
            "Land_MobilePhone_old_F", "Land_MobilePhone_smart_F", "Land_PortableLongRangeRadio_F",
            "Land_PortableSpeakers_01_F", "Land_FMradio_F", "Land_Camera_01_F", "Land_HandyCam_F",
            "Land_Tablet_01_F", "Land_Tablet_02_F", "Land_MultiScreenComputer_01_F", "Land_PCSet_01_screen_F",
            "Land_DeskDrawer_01_F", "Land_DeskChair_01_F",
            
            // Equipamiento m√©dico
            "Land_Defibrillator_F", "Land_BloodBag_F", "Land_FirstAidKit_01_closed_F", "Land_FirstAidKit_01_open_F",
            "Land_Bandage_F", "Land_Antibiotic_F", "Land_DisinfectantSpray_F", "Land_HeatPack_F", "Land_PainKillers_F",
            "Land_VitaminBottle_01_F", "Land_Portable_generator_F", "Land_Stretcher_01_F", "Land_Stretcher_01_folded_F",
            "Land_IntravenStand_01_empty_F", "Land_IntravenStand_01_full_F", "Land_TripodScreen_01_F",
            "Land_TripodScreen_01_dual_v1_F", "Land_TripodScreen_01_dual_v2_F", "Land_TripodScreen_01_large_F",
            
            // Equipamiento industrial y herramientas
            "Land_CanisterFuel_F", "Land_CanisterFuel_Blue_F", "Land_CanisterFuel_Red_F", "Land_CanisterFuel_White_F",
            "Land_CanisterOil_F", "Land_DieselGroundPower_01_F", "Land_Portable_generator_F", "Land_PortableLight_single_F",
            "Land_PortableLight_double_F", "Land_WeldingTrolley_01_F", "Land_WorkStand_F", "Land_ToolTrolley_01_F",
            "Land_ToolTrolley_02_F", "Land_DrillAku_F", "Land_Grinder_F", "Land_Screwdriver_V1_F", "Land_Screwdriver_V2_F",
            "Land_Hammer_F", "Land_Axe_F", "Land_Axe_fire_F", "Land_Meter3m_F", "Land_Wrench_F",
            "Land_DuctTape_F", "Land_ExtensionCord_F", "Land_Gloves_F", "Land_MultiMeter_F", "Land_Pliers_F",
            "Land_Rope_01_F", "Land_Rope_01_folded_F", "Land_Battery_F", "Land_BoreSighter_01_F",
            
            // Cajas, contenedores y suministros
            "Land_PaperBox_closed_F", "Land_PaperBox_open_empty_F", "Land_PaperBox_open_full_F", "Land_PaperBox_01_F", 
            "Land_PaperBox_01_open_boxes_F", "Land_PaperBox_01_open_empty_F", "Land_PaperBox_01_open_water_F", 
            "Land_PaperBox_01_small_closed_brown_F", "Land_PaperBox_01_small_closed_white_F",
            "Land_PaperBox_01_small_closed_white_IDAP_F", "Land_PaperBox_01_small_closed_white_med_F", 
            "Land_PaperBox_01_small_ransacked_brown_F", "Land_PaperBox_01_small_ransacked_white_F", 
            "Land_PaperBox_01_small_ransacked_white_IDAP_F", "Land_PaperBox_01_small_ransacked_white_med_F",
            "Land_PaperBox_01_small_stacked_F", "Land_MetalBarrel_F", "Land_MetalBarrel_empty_F", "Land_BarrelEmpty_F", 
            "Land_BarrelEmpty_grey_F", "Land_BarrelSand_F", "Land_BarrelSand_grey_F", "Land_BarrelTrash_F", 
            "Land_BarrelTrash_grey_F", "Land_BarrelWater_F", "Land_BarrelWater_grey_F", "Land_WaterBarrel_F", 
            "Land_WaterTank_F", "Land_BarrelPlastic_F", "Land_PlasticBucket_01_F", "Land_PlasticBucket_01_open_F", 
            "Land_PlasticBucket_01_closed_F", "Land_PlasticCase_01_large_F", "Land_PlasticCase_01_medium_F",
            "Land_PlasticCase_01_small_F", "Land_MetalCase_01_large_F", "Land_MetalCase_01_medium_F",
            "Land_MetalCase_01_small_F", "Land_WoodenBox_F", "Land_WoodenCrate_01_F", "Land_WoodenCrate_01_stack_x3_F",
            "Land_WoodenCrate_01_stack_x5_F", "Land_CargoBox_V1_F", "Land_Sack_F", "Land_Sacks_goods_F",
            "Land_Sacks_heap_F", "Land_LuggageHeap_01_F", "Land_LuggageHeap_02_F", "Land_LuggageHeap_03_F", 
            "Land_Suitcase_F", "Land_TacticalBacon_F", "Land_BakedBeans_F", "Land_BottlePlastic_V1_F",
            "Land_BottlePlastic_V2_F", "Land_Can_V1_F", "Land_Can_V2_F", "Land_Can_V3_F", "Land_Can_Rusty_F",
            "Land_CanOpener_F", "Land_CerealsBox_F", "Land_RiceBox_F", "Land_PowderedMilk_F",
            
            // Materiales de construcci√≥n
            "Land_Tyre_F", "Land_Garbage_square3_F", "Land_Garbage_square5_F", "Land_Garbage_line_F",
            "Land_CratesPlastic_F", "Land_CratesWooden_F", "Land_Pallets_F", "Land_Pallets_stack_F",
            "Land_CinderBlocks_F", "Land_Bricks_V1_F", "Land_Bricks_V2_F", "Land_Bricks_V3_F",
            "Land_Bricks_V4_F", "Land_IronPipes_F", "Land_Pipes_large_F", "Land_Pipes_small_F",
            "Land_ConcreteKerb_01_4m_F", "Land_ConcreteKerb_01_8m_F", "Land_ConcreteKerb_01_corner_F",
            "Land_ConcreteKerb_02_2m_F", "Land_ConcreteKerb_02_4m_F", "Land_ConcreteKerb_02_8m_F",
            
            // Escombros y elementos de investigaci√≥n
            "Land_Trench_01_grass_F", "Land_Trench_01_forest_F", "Land_Calvary_01_V1_F", "Land_Calvary_02_V1_F",
            "Land_Calvary_01_V2_F", "Land_Calvary_02_V2_F", "Land_BellTower_01_V1_F", "Land_BellTower_01_V2_F",
            "Land_Grave_monument_01_F", "Land_Grave_monument_02_F", "Land_Grave_obelisk_F", 
            "Land_Grave_soldier_F", "Land_Grave_V1_F", "Land_Grave_V2_F", "Land_Grave_V3_F", 
            "Land_Grave_forest_F", "Land_GarbageContainer_closed_F", "Land_GarbageContainer_open_F",
            "Land_GarbageBags_F", "Land_GarbageHeap_01_F", "Land_GarbageHeap_02_F", "Land_GarbageHeap_03_F",
            "Land_GarbageHeap_04_F", "Land_GarbagePallet_F", "Land_GarbageWashingMachine_F",
            "Land_GarbageBarrel_01_F", "Land_JunkPile_F", "Land_Tyres_F", "Land_ConcretePipe_F",
            
            // Restos y veh√≠culos da√±ados
            "Land_Wreck_Car_F", "Land_Wreck_Car2_F", "Land_Wreck_Car3_F", "Land_Wreck_CarDismantled_F",
            "Land_Wreck_Offroad_F", "Land_Wreck_Offroad2_F", "Land_Wreck_Truck_dropside_F", "Land_Wreck_Truck_F",
            "Land_Wreck_UAZ_F", "Land_Wreck_Ural_F", "Land_Wreck_HMMWV_F", "Land_Wreck_Hunter_F",
            "Land_Wreck_Slammer_F", "Land_Wreck_Slammer_hull_F", "Land_Wreck_Slammer_turret_F",
            "Land_Wreck_T72_hull_F", "Land_Wreck_T72_turret_F", "Land_UWreck_Heli_Attack_01_F",
            "Land_UWreck_Heli_Attack_02_F", "Land_UWreck_MV22_F", "Land_Wreck_Plane_Transport_01_F",
            "Land_Wreck_Traw_F", "Land_Wreck_Traw2_F",
            
            // Objetos religiosos y decoraci√≥n
            "Land_Church_01_V1_F", "Land_Church_01_V2_F", "Land_Church_02_V1_F", "Land_Church_02_V2_F",
            "Land_Church_03_V1_F", "Land_Church_03_V2_F", "Land_Cathedral_01_F", "Land_Masoleum_01_F",
            "Land_Grave_01_F", "Land_Grave_02_F", "Land_Grave_03_F", "Land_Grave_04_F", "Land_Grave_05_F",
            "Land_Grave_06_F", "Land_Grave_07_F", "Land_Grave_08_F", "Land_Grave_09_F", "Land_Grave_10_F",
            "Land_Statue_01_F", "Land_Statue_02_F", "Land_Statue_03_F", "Land_ChestBig_F", "Land_ChestSmall_F"
        ];
        
        {
            // Usar funci√≥n con cach√©
            _props = [_x] call Gatito_fnc_getCachedMissionObjects;
            if (count _props > 1) then {
                _props resize 1;
            };
            _allProps append _props;
        } forEach _propClasses;
        
        // Limitar cantidad para evitar sobrecarga
        if (count _allProps > 200) then {
            _allProps resize 200;
        };
        
        [_allProps, _player, 300] call Gatito_fnc_loopObjectsFast;
    };
};            
            // üö™ Procesar puertas
            case 6: {
                if (_HideDoors) then {
                    _allDoors = [];
                    
                    // Lista de clases de puertas vanilla
                    _doorClasses = [
                        "Land_Door_01_F",
                        "Land_Door_02_F",
                        "Land_DoorLocked_01_F",
                        "Land_DoorLocked_02_F",
                        "Land_House_Door_01_F",
                        "Land_House_Door_02_F",
                        "Land_GarageRow_01_door_F",
                        "Land_CarService_door_F"
                    ];
                    
                    {
                        // Usar funci√≥n con cach√©
                        _doors = [_x] call Gatito_fnc_getCachedMissionObjects;
                        if (count _doors > 2) then {
                            _doors resize 2;
                        };
                        _allDoors append _doors;
                    } forEach _doorClasses;
                    
                    // Limitar cantidad
                    if (count _allDoors > 10) then {
                        _allDoors resize 10;
                    };
                    
                    [_allDoors, _player, 300] call Gatito_fnc_loopObjectsFast;
                };
            };
            
            // ü™ü Procesar ventanas
            case 7: {
                if (_HideWindows) then {
                    _allWindows = [];
                    
                    // Lista de clases de ventanas vanilla
                    _windowClasses = [
                        "Land_Window_01_F",
                        "Land_Window_02_F",
                        "Land_WindowBig_01_F",
                        "Land_WindowBig_02_F",
                        "Land_WindowSmall_01_F",
                        "Land_WindowSmall_02_F"
                    ];
                    
                    {
                        // Usar funci√≥n con cach√©
                        _windows = [_x] call Gatito_fnc_getCachedMissionObjects;
                        if (count _windows > 2) then {
                            _windows resize 2;
                        };
                        _allWindows append _windows;
                    } forEach _windowClasses;
                    
                    // Limitar cantidad
                    if (count _allWindows > 10) then {
                        _allWindows resize 10;
                    };
                    
                    [_allWindows, _player, 300] call Gatito_fnc_loopObjectsFast;
                };
            };
            
            // üì¶ Procesar contenedores
            case 8: {
                if (_HideContainers) then {
                    _allContainers = [];
                    
                    // Lista de clases de contenedores vanilla
                    _containerClasses = [
                        "Land_Ammobox_F",
                        "Box_NATO_Ammo_F",
                        "Box_East_Ammo_F", 
                        "Box_IND_Ammo_F",
                        "Land_PaperBox_01_F",
                        "Land_PaperBox_closed_F",
                        "Land_PaperBox_open_empty_F",
                        "Land_Cargo10_blue_F",
                        "Land_Cargo20_blue_F",
                        "Land_Cargo40_blue_F"
                    ];
                    
                    {
                        // Usar funci√≥n con cach√©
                        _containers = [_x] call Gatito_fnc_getCachedMissionObjects;
                        if (count _containers > 2) then {
                            _containers resize 2;
                        };
                        _allContainers append _containers;
                    } forEach _containerClasses;
                    
                    // Limitar cantidad
                    if (count _allContainers > 10) then {
                        _allContainers resize 10;
                    };
                    
                    [_allContainers, _player, 300] call Gatito_fnc_loopObjectsFast;
                };
            };
        };
    };

    // üî´ Procesar armas en el suelo
    if (_HideWeapons && (_frameCounter % 4 == 0)) then {
        // Usar funci√≥n con cach√© para armas tambi√©n
        _weapons = ["GroundWeaponHolder"] call Gatito_fnc_getCachedMissionObjects;
        if (count _weapons > 20) then {
            _weapons resize 20;
        };
        
        [_weapons, _player, 300] call Gatito_fnc_loopObjectsFast;
    };
};

// üîÑ Bucle principal del sistema Gatito
Gatito_fnc_mainLoop = {
    if (!hasInterface) exitWith {};
    
    // üõ†Ô∏è Establecer valores iniciales
    missionNamespace setVariable ["Gatito_active", true];
    missionNamespace setVariable ["Gatito_ForceRenderDistance", 300]; 
    missionNamespace setVariable ["Gatito_ForceRenderDistanceZeus", 300]; 
    missionNamespace setVariable ["Gatito_HideWeapons", true];
    missionNamespace setVariable ["Gatito_frameCounter", 0];
    
    // üéöÔ∏è Nuevas configuraciones (activadas por defecto: veh√≠culos y animales)
    missionNamespace setVariable ["Gatito_HideVehicles", true];
    missionNamespace setVariable ["Gatito_HideAnimals", true];
    
    // üéöÔ∏è Configuraciones adicionales (desactivadas por defecto)
    missionNamespace setVariable ["Gatito_HideFurniture", false];
    missionNamespace setVariable ["Gatito_HideRocks", false];
    missionNamespace setVariable ["Gatito_HidePlants", false];
    missionNamespace setVariable ["Gatito_HideDebris", false];
    missionNamespace setVariable ["Gatito_HideSigns", false];
    missionNamespace setVariable ["Gatito_HideItems", false];
    missionNamespace setVariable ["Gatito_HideDoors", false];
    missionNamespace setVariable ["Gatito_HideWindows", false];
    missionNamespace setVariable ["Gatito_HideContainers", false];
    
    // ‚öôÔ∏è Si CBA est√° disponible, configurar teclas y opciones
    if (OPT_tieneCBA) then {
        // Intentar a√±adir configuraciones CBA si no existen
        if (!isNil "cba_settings_fnc_init") then {
            ["Gatito_ForceRenderDistance", "SLIDER", ["Distancia de Renderizado Forzado", 
             "Distancia a la que se fuerza el renderizado de objetos"], 
             "üê± Gatito Performance", [0, 200, 300, 0], nil, {
                missionNamespace setVariable ["Gatito_ForceRenderDistance", _this];
             }, false] call CBA_fnc_addSetting;
            
            ["Gatito_ForceRenderDistanceZeus", "SLIDER", ["Distancia de Renderizado Zeus", 
             "Distancia de renderizado forzado en Zeus"], 
             "üê± Gatito Performance", [0, 200, 300, 0], nil, {
                missionNamespace setVariable ["Gatito_ForceRenderDistanceZeus", _this];
             }, false] call CBA_fnc_addSetting;
            
            ["Gatito_HideWeapons", "CHECKBOX", ["Ocultar Armas üî´", 
             "Ocultar armas en el suelo"], 
             "üê± Gatito Performance", true, nil, {
                missionNamespace setVariable ["Gatito_HideWeapons", _this];
             }, false] call CBA_fnc_addSetting;
             
            // Configuraciones para los tipos adicionales
            ["Gatito_HideVehicles", "CHECKBOX", ["Ocultar Veh√≠culos üöó", 
             "Ocultar veh√≠culos fuera de vista"], 
             "üê± Gatito Performance", true, nil, {
                missionNamespace setVariable ["Gatito_HideVehicles", _this];
             }, false] call CBA_fnc_addSetting;
             
            ["Gatito_HideAnimals", "CHECKBOX", ["Ocultar Animales üêÑ", 
             "Ocultar animales fuera de vista"], 
             "üê± Gatito Performance", true, nil, {
                missionNamespace setVariable ["Gatito_HideAnimals", _this];
             }, false] call CBA_fnc_addSetting;
             
            ["Gatito_HideFurniture", "CHECKBOX", ["Ocultar Muebles ü™ë", 
             "Ocultar muebles fuera de vista"], 
             "üê± Gatito Performance", false, nil, {
                missionNamespace setVariable ["Gatito_HideFurniture", _this];
             }, false] call CBA_fnc_addSetting;
             
            ["Gatito_HideRocks", "CHECKBOX", ["Ocultar Rocas ü™®", 
             "Ocultar rocas fuera de vista"], 
             "üê± Gatito Performance", false, nil, {
                missionNamespace setVariable ["Gatito_HideRocks", _this];
             }, false] call CBA_fnc_addSetting;
             
            ["Gatito_HidePlants", "CHECKBOX", ["Ocultar Plantas üåø", 
             "Ocultar plantas fuera de vista"], 
             "üê± Gatito Performance", false, nil, {
                missionNamespace setVariable ["Gatito_HidePlants", _this];
             }, false] call CBA_fnc_addSetting;
             
            ["Gatito_HideDebris", "CHECKBOX", ["Ocultar Escombros üóëÔ∏è", 
             "Ocultar escombros fuera de vista"], 
             "üê± Gatito Performance", false, nil, {
                missionNamespace setVariable ["Gatito_HideDebris", _this];
             }, false] call CBA_fnc_addSetting;
             
            ["Gatito_HideSigns", "CHECKBOX", ["Ocultar Se√±ales üö∏", 
             "Ocultar se√±ales fuera de vista"], 
             "üê± Gatito Performance", false, nil, {
                missionNamespace setVariable ["Gatito_HideSigns", _this];
             }, false] call CBA_fnc_addSetting;
             
            ["Gatito_HideItems", "CHECKBOX", ["Ocultar Objetos Peque√±os üì±", 
             "Ocultar objetos peque√±os fuera de vista"], 
             "üê± Gatito Performance", false, nil, {
                missionNamespace setVariable ["Gatito_HideItems", _this];
             }, false] call CBA_fnc_addSetting;
             
            ["Gatito_HideDoors", "CHECKBOX", ["Ocultar Puertas üö™", 
             "Ocultar puertas fuera de vista"], 
             "üê± Gatito Performance", false, nil, {
                missionNamespace setVariable ["Gatito_HideDoors", _this];
             }, false] call CBA_fnc_addSetting;
             
            ["Gatito_HideWindows", "CHECKBOX", ["Ocultar Ventanas ü™ü", 
             "Ocultar ventanas fuera de vista"], 
             "üê± Gatito Performance", false, nil, {
                missionNamespace setVariable ["Gatito_HideWindows", _this];
             }, false] call CBA_fnc_addSetting;
             
            ["Gatito_HideContainers", "CHECKBOX", ["Ocultar Contenedores üì¶", 
             "Ocultar contenedores fuera de vista"], 
             "üê± Gatito Performance", false, nil, {
                missionNamespace setVariable ["Gatito_HideContainers", _this];
             }, false] call CBA_fnc_addSetting;
        };
    };
    
    // üì¢ Mensaje informativo al iniciar
    systemChat "";
    
    // üîÑ Bucle principal con intervalo din√°mico
    while {true} do {
        if (missionNamespace getVariable ["Gatito_active", true]) then {
            // Ajuste din√°mico del intervalo basado en la velocidad del jugador
            _playerSpeed = speed (vehicle player);
            _sleepTime = 0.2; // valor predeterminado
            
            // Si el jugador se mueve r√°pido, reducir el tiempo de espera
            if (_playerSpeed > 30) then {
                _sleepTime = 0.1;
            } else {
                if (_playerSpeed > 15) then {
                    _sleepTime = 0.15;
                };
            };
            
            {
                [_x] call Gatito_fnc_hide;
            } forEach allPlayers;
            
            // Usar el tiempo de espera calculado
            sleep _sleepTime;
        } else {
            sleep 0.5; // si est√° desactivado, esperar m√°s tiempo
        };
    };
};

// üöÄ Inicializaci√≥n del sistema Gatito
OPT_fnc_inicializarGatito = {
    // Iniciar el bucle principal en un hilo separado
    [] spawn Gatito_fnc_mainLoop;
    
    // A√±adir evento para activaci√≥n/desactivaci√≥n manual
    if (OPT_tieneCBA && !isNil "cba_keybinding_fnc_addKeybind") then {
        ["", "toggle_gatito", "Activar/Desactivar Sistema Gatito", {
            private _active = !(missionNamespace getVariable ["Gatito_active", true]);
            missionNamespace setVariable ["Gatito_active", _active];
            systemChat format ["", ["", ""] select _active];
            true
        }, {}, [DIK_U, [false, false, false]], false] call CBA_fnc_addKeybind;
    };
};
